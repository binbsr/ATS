@page "/apply"

<PageTitle>Apply For Internship / Traineeship</PageTitle>

@inject ApplicationDbContext Db
@inject ISnackbar SnackBar

<EditForm Model="@model" OnValidSubmit="OnValidSubmit" Context="applicationForm">
    <MudContainer>
        <MudPaper Class="pa-5 mb-4" Elevation="5">

            @if (alreadyApplied)
            {
                <MudAlert Severity="Severity.Success" Variant="Variant.Outlined">We have received your application, please feel free to update your details or contact us for any queries.</MudAlert>
            }
            else
            {
                <MudAlert Severity="Severity.Warning" Variant="Variant.Outlined">Please enter your details and click apply to start your traineeship journey.</MudAlert>
            }

            <MudRadioGroup @bind-Value="model.ApplicantType" Class="mt-4">
                <MudRadio Value="ApplicantType.StudentInternship" Color="Color.Tertiary" Dense>I am student, want to start internship/traineeship</MudRadio>
                <MudRadio Value="ApplicantType.SoftwareEngineeringAspirant" Color="Color.Tertiary" Dense>I want to learn software engineering and tech stack(s)</MudRadio>
                <MudRadio Value="ApplicantType.CorporateEmployee" Color="Color.Tertiary" Dense>Corporate training</MudRadio>
            </MudRadioGroup>

            <MudTextField @bind-Value="model.Name"
                          Class="mt-4"
                          Immediate="true"
                          Label="Full Name"
                          TextChanged="UserNameChanged" />

            <MudTextField @bind-Value="model.Email"
                          Class="mt-4"
                          Immediate="true"
                          Label="Email" Disabled="true" />

            <MudTextField @bind-Value="model.Phone"
                          Class="mt-4"
                          Immediate="true"
                          Label="Phone"
                          TextChanged="PhoneChanged" />

            <MudAutocomplete T="College"
                             Label="Select College"
                             @bind-Value="model.College"
                             Class="mt-4"
                             SearchFunc="@SearchColleges"
                             ToStringFunc="@(e=> e==null ? null : $"{e.Name} ({e.Location})")"
                             ShowProgressIndicator="true"
                             ProgressIndicatorColor="Color.Default"
                             MaxItems="null" />

            <MudAutocomplete T="TechProgram"
                             Label="Select Program"
                             Class="mt-4"
                             @bind-Value="model.TechProgram"
                             SearchFunc="@SearchPrograms"
                             ToStringFunc="@(e=> e==null ? null : $"{e.Name} ({e.Affliation})")"
                             ShowProgressIndicator="true"
                             ProgressIndicatorColor="Color.Default"
                             MaxItems="null" />

            <ImageUpload Class="mt-4" ExistingImagePath="@model.ProfileImagePath" ImageChanged="ProfileChanged" Label="Upload Profile Image (<100kb)" />
            @if (!profileSuccess)
            {
                <MudText Color="Color.Warning">@message</MudText>
            }

            <MudButton ButtonType="ButtonType.Submit"
                       Variant="Variant.Filled"
                       Color="Color.Tertiary"
                       Class="mt-3 d-flex ml-auto"
                       StartIcon="@Icons.Material.Sharp.HowToReg"
                       Disabled="isSaveDisabled">
                @(alreadyApplied ? "Update Details" : "Apply for Traineeship")
            </MudButton>
        </MudPaper>
    </MudContainer>
</EditForm>

@code {

    private Student model = new();
    bool alreadyApplied = false;
    List<College> colleges = [];
    List<TechProgram> techPrograms = [];
    private bool profileSuccess = false;
    private string message = "";
    private string alreadyAppliedMessage = "";

    private bool isSaveDisabled => model.Name is ""
        || model.Phone is ""
        || model.Email is ""
        || model.College is null
        || model.TechProgram is null;

    private async Task OnValidSubmit(EditContext editContext)
    {
        // Save profile image first if it's uploaded
        (profileSuccess, message) = await ImageUploader.Upload(model.ProfileImage);
        if (profileSuccess)
        {
            model.ProfileImagePath = message;
        }

        if (alreadyApplied)
        {
            // User updating his/her details
            Db.Students.Update(model);
        }
        else
        {
            Db.Students.Add(model);
        }

        var rowsAffected = await Db.SaveChangesAsync();

        if (rowsAffected > 0)
        {
            SnackBar.Add("Applicaion details received successfully", Severity.Success);
            alreadyApplied = true;
        }
        else
        {
            SnackBar.Add("Applicaion process failed", Severity.Error);
        }
    }

    private void ProfileChanged(IBrowserFile file)
    {
        model.ProfileImage = file;
    }

    private async Task<IEnumerable<College>> SearchColleges(string value)
    {
        if (!colleges.Any())
        {
            colleges = await Db.Colleges.ToListAsync();
        }

        if (value is null or "")
        {
            return colleges;
        }

        return colleges.Where(x => x.Name.Contains(value, StringComparison.OrdinalIgnoreCase));
    }

    private async Task<IEnumerable<TechProgram>> SearchPrograms(string value)
    {
        if (!techPrograms.Any())
        {
            techPrograms = await Db.TechPrograms.ToListAsync();
        }

        if (value is null or "")
        {
            return techPrograms;
        }

        return techPrograms.Where(x => x.Name.Contains(value, StringComparison.OrdinalIgnoreCase));
    }

    private void UserNameChanged()
    {
        model.Email = CreateEmail(model.Name, model.Phone);
    }

    private async Task PhoneChanged()
    {
        model.Email = CreateEmail(model.Name, model.Phone);
        if (model.Phone.Length == 10)
        {
            var student = await Db.Students
                .Include(x => x.College)
                .Include(y => y.TechProgram)
                .FirstOrDefaultAsync(x => x.Phone == model.Phone);

            alreadyApplied = student is not null;
            if(alreadyApplied)
            {
                model = student!;
            }
            else
            {
                model.Id = Guid.NewGuid().ToString();
            }
        }
    }

    private string CreateEmail(string name, string phone) =>
        $"{name} {phone}".ToEmail();

}
