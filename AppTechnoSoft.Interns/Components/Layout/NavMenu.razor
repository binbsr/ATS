@implements IDisposable

@inject NavigationManager NavigationManager

<MudPaper Width="250px" Class="d-inline-flex py-3" Elevation="0">
    <MudNavMenu Class="mud-width-full">
        <MudNavLink Href="/dashboard" Icon="@Icons.Material.Filled.Dashboard" IconColor="Color.Success">Your Dashboard</MudNavLink>
        <MudNavLink Href="/apply" Icon="@Icons.Material.Filled.Dashboard" IconColor="Color.Success">Apply</MudNavLink>
        <MudNavLink Href="/programs" Icon="@Icons.Material.Filled.Book" IconColor="Color.Info">Programs</MudNavLink>
        <MudNavLink Href="/colleges" Icon="@Icons.Material.Filled.School" IconColor="Color.Info">Colleges</MudNavLink>
        <MudNavLink Href="/students" Icon="@Icons.Material.Filled.Groups3" IconColor="Color.Info">Students</MudNavLink>
        <MudNavLink Href="/widgets" Icon="@Icons.Material.Filled.Widgets" IconColor="Color.Info">Widgets</MudNavLink>
        <MudDivider Class="my-2" />
        <AuthorizeView>
            <Authorized>
                <MudNavLink Href="Account/Manage" Icon="@Icons.Material.Filled.VerifiedUser">
                    @context.User.Identity?.Name
                </MudNavLink>
                <form action="Account/Logout" method="post">
                    <AntiforgeryToken />
                    <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                    <MudButton ButtonType="ButtonType.Submit" StartIcon="@Icons.Material.Filled.Logout">Logout</MudButton>
                </form>
            </Authorized>
            <NotAuthorized>
                <MudNavLink Href="Account/Register" Icon="@Icons.Material.Filled.PersonAdd" IconColor="Color.Secondary">Register</MudNavLink>
                <MudNavLink Href="Account/Login" Icon="@Icons.Material.Filled.Login" IconColor="Color.Secondary">Login</MudNavLink>
            </NotAuthorized>
        </AuthorizeView>
    </MudNavMenu>
</MudPaper>

@code {
    private string? currentUrl;

    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}
