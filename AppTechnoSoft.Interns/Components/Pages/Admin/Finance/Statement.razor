@page "/financial-statement"

@inject ApplicationDbContext Db

<PageTitle>Financial Statement</PageTitle>

<MudDataGrid Items="@budgets"
             Dense
             Groupable 
             Filterable>
    <Columns>
        <PropertyColumn Property="x => x.Title" Groupable="false" Filterable="false" />
        <PropertyColumn Property="x => x.Date" Title="Date">
            <CellTemplate>
                @context.Item.Date.ToNepalTime().ToLongDateString()
            </CellTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.Credit" AggregateDefinition="CreditAggregation" Groupable="false" Filterable="false">
            <CellTemplate>
                @{
                    var value = context.Item.Credit;
                }
                @if (value is not null)
                {
                    <MudIcon Icon="@Icons.Material.Sharp.ArrowUpward" Color="Color.Success" Size="Size.Small" />
                    @value?.AsCurrency()
                }
            </CellTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.Debit" AggregateDefinition="DebitAggregation" Groupable="false" Filterable="false">
            <CellTemplate>
                @{
                    var value = context.Item.Debit;
                }
                @if (value is not null)
                {
                    <MudIcon Icon="@Icons.Material.Sharp.ArrowDownward" Color="Color.Error" Size="Size.Small" />
                    @value?.AsCurrency()
                }
            </CellTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.Balance" AggregateDefinition="BalanceAggregation" Filterable="false" Groupable="false">
            <CellTemplate>@context.Item.Balance?.AsCurrency()</CellTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.Status">
            <CellTemplate>
                <MudChip Color="Color.Info" Size="Size.Small">@context.Item.Status</MudChip>
            </CellTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.Notes" Groupable="false" Filterable="false" />
    </Columns>
</MudDataGrid>

@code {

    private List<AccountViewModel> budgets = [];

    protected override async Task OnInitializedAsync()
    {
        var feeCollection = await Db.FinAccounts
            .Where(x => x.Enabled)
            .Select(y => new 
            { 
                StudentName = y.Student.Name, 
                PaidTotal = y.PaidAmount, 
                DateAdded = y.Created 
            })
            .ToListAsync();

        // Fee credits
        if (feeCollection is not null)
        {
            foreach (var fee in feeCollection)
            {
                budgets.Add(new AccountViewModel
                    {
                        Title = $"{fee.StudentName} - Tution Fee",
                        Credit = fee.PaidTotal,
                        Status = BudgetStatus.Paid,
                        Date = fee.DateAdded,
                        Notes = "Source: Fee Collection"
                    });
            }
        }

        // Other revenue source credits
        var otherRevenues = await Db.Revenues.ToArrayAsync();
        if (otherRevenues is not null)
        {
            foreach (var revenue in otherRevenues)
            {
                budgets.Add(new AccountViewModel
                    {
                        Title = revenue.Particulars,
                        Credit = revenue.Amount,
                        Status = BudgetStatus.Paid,
                        Date = revenue.Date,
                        Notes = revenue.Source.ToString()
                    });
            }
        }

        // Operations debits
        var expenses = await Db.Expenses.ToListAsync();

        // Account debits
        if (expenses is not null)
        {
            foreach (var expense in expenses)
            {
                budgets.Add(new AccountViewModel
                    {
                        Title = expense.Title,
                        Debit = expense.Amount,
                        Status = BudgetStatus.Paid,
                        Date = expense.Created,
                        Notes = expense.Description
                    });
            }
        }

        budgets = budgets.OrderBy(x => x.Date).ToList();

        // Maintain balance at each step
        for (int counter = 0; counter < budgets.Count; counter++)
        {
            var accumulation = budgets.Take(counter + 1);
            budgets[counter].Balance = accumulation.Sum(x => x.Credit) - accumulation.Sum(x => x.Debit);
        }
    }

    AggregateDefinition<AccountViewModel> BalanceAggregation = new()
        {
            Type = AggregateType.Custom,
            CustomAggregate = x =>
            {
                var totalBalance = x.LastOrDefault()?.Balance;
                return $"{totalBalance?.AsCurrency()}";
            }
        };

    AggregateDefinition<AccountViewModel> CreditAggregation = new()
        {
            Type = AggregateType.Custom,
            CustomAggregate = x =>
            {
                var totalCredit = x.Sum(y => y.Credit);
                return $"{totalCredit?.AsCurrency()}";
            }
        };

    AggregateDefinition<AccountViewModel> DebitAggregation = new()
        {
            Type = AggregateType.Custom,
            CustomAggregate = x =>
            {
                var totalDebit = x.Sum(y => y.Debit);
                return $"{totalDebit?.AsCurrency()}";
            }
        };
}
