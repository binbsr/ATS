@inject IDbContextFactory<ApplicationDbContext> DbFactory

@if (loadingData)
{
    <MudProgressCircular Indeterminate Color="Color.Tertiary" />
}
else if (instructor is null)
{
    <ApplicationAlert Text="We couldn't find you on instructors pool, please contact AppSoft admin." />
}
else
{
    <MudPaper Class="p-2 my-2">
        <MudChipSet Filter SelectedChipChanged="BatchChanged">
            @foreach (var group in classesByBatch)
            {
                <MudChip Variant="Variant.Text" Size="Size.Large" Color="Color.Tertiary" Value="group.Key">@group.Key.Name</MudChip>
            }
        </MudChipSet>
    </MudPaper>

    <MudSimpleTable Style="overflow-x: auto;" Dense Outlined>        
        <thead>
            <tr>
                <th></th>
                @foreach (var h in headings)
                {
                    <th style="@(!h.IsOfficeDay() ? $"background: {Colors.Grey.Lighten1}" : "")">@h.ToString("dddd, MMM d")</th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var row in studentAttendances)
            {
                <tr>
                    <td>
                        <MudStack Row>
                            <MudAvatar>
                                <MudImage Src="@row.Key.Profile" />
                            </MudAvatar>
                            <MudText>@row.Key.Name</MudText>
                        </MudStack>

                    </td>
                    @foreach (var date in headings)
                    {
                        if (!date.IsOfficeDay() || date > DateTime.Today)   // Weekends and future dates
                        {
                            <td style="@($"background: {Colors.Grey.Lighten1}")"></td>
                        }
                        else
                        {
                            var attendance = row.Value.FirstOrDefault(x => x.Date.ToShortDateString() == date.ToShortDateString());

                            <td style="text-align:center">
                                @if (attendance is null)
                                {
                                    <MudAvatar Color="Color.Error">A</MudAvatar>
                                }
                                else
                                {
                                    @if (attendance.PunchOut == null || attendance.PunchOut == TimeOnly.MinValue)
                                    {
                                        <MudBadge Color="Color.Error" Icon="@Icons.Material.Sharp.CallMissed" Overlap Bordered>
                                            <MudTooltip Text="@($"Punchin - {attendance.PunchIn}")">
                                                <MudAvatar Color="Color.Tertiary">P</MudAvatar>
                                            </MudTooltip>
                                        </MudBadge>
                                    }
                                    else
                                    {
                                        <MudTooltip Text="@($"Punchin - {attendance.PunchIn} Punchout - {attendance.PunchOut}")">
                                            <MudAvatar Color="Color.Tertiary">P</MudAvatar>
                                        </MudTooltip>
                                    }
                                }
                            </td>
                        }
                    }
                </tr>
            }
        </tbody>
    </MudSimpleTable>
}

@code {

    [Parameter]
    public string LoggedInUserId { get; set; } = string.Empty;

    private record StudentAttedance(DateOnly Date, TimeOnly? PunchIn, TimeOnly? PunchOut);

    Dictionary<(string Name, string? Profile), IEnumerable<StudentAttedance>> studentAttendances = [];
    bool loadingData = false;
    Instructor instructor = null!;
    DateTime[] headings = [];

    IEnumerable<IGrouping<Batch, ClassSchedule>> classesByBatch = [];

    protected override async Task OnInitializedAsync()
    {
        loadingData = true;

        if (LoggedInUserId == string.Empty)
            return;

        using (var Db = DbFactory.CreateDbContext())
        {
            instructor = await Db.Instructors.FirstOrDefaultAsync(x => x.ApplicationUserId == LoggedInUserId);

            if (instructor is null)
            {
                loadingData = false;
                return;
            }

            var classes = await Db.ClassSchedules.Include(y => y.Batch).Where(x => x.InstructorId == instructor.Id).ToListAsync();
            classesByBatch = classes.GroupBy(x => x.Batch);
        }

        loadingData = false;
    }

    private async Task BatchChanged(MudChip chip)
    {
        //fetch students and attendances for this batch selection
        var batch = (Batch)chip.Value;
        if (batch is null)
            return;

        var batchId = batch.Id;
        headings = batch.Start.Until(batch.End);

        loadingData = true;
        using var Db = DbFactory.CreateDbContext();

        var attendances = await Db.Attendances
            .Where(x => x.Student.BatchId == batchId)
            .Select(x => new
            {
                Name = x.Student.Name,
                Profile = x.Student.ProfileImagePath,
                Date = x.Date,
                PunchIn = x.PunchIn,
                PunchOut = x.PunchOut
            })
            .GroupBy(y => new { y.Name, y.Profile })
            .ToListAsync();

        attendances.ForEach(x => studentAttendances.Add((x.Key.Name, x.Key.Profile), x.Select(y => new StudentAttedance(y.Date, y.PunchIn, y.PunchOut))));
        loadingData = false;
    }
}
