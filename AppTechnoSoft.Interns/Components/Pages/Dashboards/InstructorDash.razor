@page "/dashboard/consultant"

@attribute [Authorize(Roles = Role.AdminsAndInstructor)]

@inject IDbContextFactory<ApplicationDbContext> DbFactory

<PageTitle>Consultant Dashboard</PageTitle>

<MudGrid Class="pt-2">
    <MudItem md="6">
        <MudPaper Elevation="5">
            <MudText Typo="Typo.h6" Class="py-4" Align="Align.Center">Your Calendar</MudText>
            <MudTable Items="consultantClasses"
                      Hover="true"
                      Dense="true"
                      Loading="@loadingData"
                      GroupBy="@_groupDefinition"
                      GroupHeaderStyle="background-color:var(--mud-palette-background-gray);height:50px;"
                      LoadingProgressColor="Color.Tertiary"
                      FixedHeader="true">                
                <GroupHeaderTemplate>
                    <MudTh Style="font-weight:500" colspan="5">@($"{context.GroupName}: {context.Key}")</MudTh>
                </GroupHeaderTemplate>
                <RowTemplate>
                    <MudTd DataLabel="Module">@context.Module</MudTd>
                    <MudTd DataLabel="ClassTiming">@context.ClassTiming</MudTd>
                    <MudTd DataLabel="Link">
                        <MudButton Size="@Size.Small"
                                   Variant="@Variant.Filled"
                                   Color="@Color.Tertiary"
                                   StartIcon="@Icons.Material.Sharp.VideoCall"
                                   Href="@context.MeetingDetails"
                                   Target="_blank">
                            Start
                        </MudButton>
                    </MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager HideRowsPerPage="true" PageSizeOptions="[5, 20, 50]" />
                </PagerContent>
            </MudTable>
        </MudPaper>
    </MudItem>
    <MudItem md="6">
        <MudPaper Elevation="5">
            <MudText Typo="Typo.h6" Class="py-4" Align="Align.Center">Your Class Payables</MudText>
            <MudTable Items="consultantClasses"
                      Hover="true"
                      Dense="true"
                      Loading="@loadingData"
                      GroupBy="@_groupDefinition"
                      GroupHeaderStyle="background-color:var(--mud-palette-background-gray);height:50px;"
                      LoadingProgressColor="Color.Tertiary"
                      FixedHeader="true">                
                <GroupHeaderTemplate>
                    <MudTh Style="font-weight:500" colspan="5">@($"{context.GroupName}: {context.Key}")</MudTh>
                </GroupHeaderTemplate>
                <RowTemplate>
                    <MudTd DataLabel="Module">@context.Module</MudTd>
                    <MudTd DataLabel="ClassTiming">@context.ClassTiming</MudTd>
                    <MudTd DataLabel="Link">
                        <MudButton Size="@Size.Small"
                                   Variant="@Variant.Filled"
                                   Color="@Color.Tertiary"
                                   StartIcon="@Icons.Material.Sharp.VideoCall"
                                   Href="@context.MeetingDetails"
                                   Target="_blank">
                            Start
                        </MudButton>
                    </MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager HideRowsPerPage="true" PageSizeOptions="[5, 20, 50]" />
                </PagerContent>
            </MudTable>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {

    [CascadingParameter]
    private Task<AuthenticationState> AuthTask { get; set; } = null!;

    record ConsultantPayable(string BatchName, int ClassCount, double PerClassPrice, double Total);

    bool loadingData = false;
    record ConsultantClass(string Batch, string Module, DateTime ClassTiming, string MeetingDetails);
    List<ConsultantClass> consultantClasses = [];
    List<ConsultantPayable> consultantPayables = [];
    Dictionary<int, float> consultantBatchEarningLimit = [];

    private TableGroupDefinition<ConsultantClass> _groupDefinition = new()
        {
            GroupName = "Learning Group",
            Indentation = true,
            Expandable = false,
            Selector = (e) => e.Batch
        };

    protected override async Task OnInitializedAsync()
    {
        // Need instructorBudget
        loadingData = true;

        var userTask = await AuthTask;
        var loggedInUser = userTask.User;
        var loggedInUserId = loggedInUser.GetUserId();

        if (loggedInUserId == string.Empty)
            return;

        using (var db = DbFactory.CreateDbContext())
        {
            // load schedules for a consultant
            var classes = await db.ClassSchedules
                .Where(x => x.Instructor.ApplicationUserId == loggedInUserId)
                .Select(x => new
                {
                    x.Id,
                    BatchId = x.Batch.Id,
                    Batch = x.Batch.Name,
                    Module = x.Module.Description,
                    x.ClassStart,
                    x.MeetingDetails
                })
                .GroupBy(x => x.BatchId)
                // .Take(5)
                .ToListAsync();


            if (classes is null || classes.Count() == 0)
                return;

            foreach (var schedule in classes)
            {
                consultantClasses.AddRange(schedule.Select(x => new ConsultantClass(x.Batch, x.Module, x.ClassStart, x.MeetingDetails)));
            }

            // Calculate payables
            // Fetch consultant batch allocation limits
            var batchIds = classes.Select(x => x.Key);
            var batchLimits = await db.BatchBudgets
                .Where(x => batchIds.Contains(x.BatchId) && x.BudgetType == BudgetType.Training)
                .Select(x => new { x.BatchId, x.Allocation })
                .ToArrayAsync();

            consultantBatchEarningLimit = batchLimits.ToDictionary(x => x.BatchId, y => y.Allocation);


        }

        loadingData = false;
    }
}
