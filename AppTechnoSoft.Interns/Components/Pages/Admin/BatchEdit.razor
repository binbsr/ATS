@page "/add-batch"
@page "/edit-batch/{Id:int}"
@using AppTechnoSoft.Interns.Extensions

@inject ApplicationDbContext Db
@inject ISnackbar SnackBar
@inject NavigationManager Navigation
@inject UserManager<ApplicationUser> UserManager

<PageTitle>@pageTitle</PageTitle>

<MudContainer>
    <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator />
        <MudTextField Label="Name" Value="@model.Name" Disabled />
        <MudDateRangePicker Label="Batch Duration" DateRange="@(new DateRange(model.Start, model.End))" DateRangeChanged="DatesChanged" />

        <MudSelect T="string"
                   Dense="true"
                   Label="Batch Members"
                   MultiSelection="true"
                   @bind-SelectedValues="@studentsSelected"
                   Class="my-3"
                   MultiSelectionTextFunc="@(new Func<List<string>, string>(GetMultiSelectionText))"
                   AnchorOrigin="Origin.BottomCenter">
            @foreach (var student in students)
            {
                <MudSelectItem Value="@student.Id">@student.Name</MudSelectItem>
            }
        </MudSelect>

        <MudButton ButtonType="ButtonType.Submit"
                   Variant="Variant.Filled"
                   Color="Color.Primary"
                   Class="mt-3"
                   StartIcon="@Icons.Material.Filled.Save">
            Save Batch
        </MudButton>
    </EditForm>
</MudContainer>

@code {

    [Parameter]
    public int? Id { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> AuthTask { get; set; } = null!;

    Batch model = new();
    IEnumerable<string> studentsSelected = [];
    List<ListItem> students = new();
    record ListItem(string Id, string Name, int? BatchId);
    string pageTitle = string.Empty;
    bool IsAdd => Id is null or 0;

    protected override async Task OnInitializedAsync()
    {
        students = await Db.Students.Select(x => new ListItem(x.Id, $"{x.Name} ({x.Email})", x.BatchId)).ToListAsync();

        if (IsAdd)
        {
            pageTitle = "Add Batch";
            model = new()
                {
                    Start = DateTime.Now,
                    End = DateTime.Now.AddDays(75)
                };
            model.Name = $"{"Batch".MakeUnique()} - {model.Start:MMM dd (yyyy)} to {model.End:MMM dd (yyyy)}";
        }
        else
        {
            pageTitle = "Edit Batch";
            model = await Db.Batches.FindAsync(Id) ?? new();
            studentsSelected = students.Where(x => x.BatchId == Id).Select(x => x.Id);
        }
    }

    private async Task OnValidSubmit(EditContext context)
    {
        var state = await AuthTask;
        var userPrincipal = state.User;
        var userName = userPrincipal.Identity?.Name;

        if (IsAdd)
        {
            model.AddCreatedStamps(userName);
            Db.Batches.Add(model);
        }
        else
        {
            model.Id = Id!.Value;
            model.AddLastUpdatedStamps(userName);
            Db.Batches.Update(model);
        }

        var rowsAffected = await Db.SaveChangesAsync();

        if (rowsAffected > 0)
        {
            SnackBar.Add("Batch saved successfully", Severity.Success);
        }
        else
        {
            SnackBar.Add("Batch save failed", Severity.Error);
        }

        if (studentsSelected.Any())
        {
            rowsAffected = Db.Students
                .Where(s => studentsSelected.Contains(s.Id))
                .ExecuteUpdate(x => x
                    .SetProperty(y => y.BatchId, model.Id)
                    .SetProperty(y => y.Status, Status.Enrolled)
                );

            _ = (rowsAffected > 0)
                ? SnackBar.Add($"Trainees added to {model.Name} successfully", Severity.Success)
                : SnackBar.Add("Couldn't add trainees to just created batch", Severity.Error);


            // Get all students applicationUserids
            var appUserIds = await Db.Students.Where(x => studentsSelected.Contains(x.Id)).Select(y => y.ApplicationUserId).ToListAsync();

            if (appUserIds is null || !appUserIds.Any())
                return;

            foreach(var userId in appUserIds)
            {
                var appUser = await UserManager.FindByIdAsync(userId!);
                if (appUser is null)
                    continue;

                var resultAdd = await UserManager.AddToRoleAsync(appUser, Role.Trainee);

                _ = resultAdd.Succeeded ?
                SnackBar.Add($"{appUser.UserName} assinged trainee role", Severity.Success) :
                SnackBar.Add($"{appUser.UserName} role assignment failed. {string.Join("\n\r", resultAdd.Errors.Select(x => x.Description))}", Severity.Error);
            }           

        }

        Navigation.NavigateTo("/batches");
    }

    private void DatesChanged(DateRange range)
    {
        if (range.Start is null || range.End is null)
            return;

        model.Start = range.Start.Value;
        model.End = range.End.Value;
        var batchName = IsAdd ? "Batch".MakeUnique() : model.Name[..model.Name.IndexOf("-")].TrimEnd();
        model.Name = $"{batchName} - {range.Start:MMM dd (yyyy)} to {range.End:MMM dd (yyyy)}";
    }

    private string GetMultiSelectionText(List<string> selectedValues)
    {
        return $"{selectedValues.Count} student{(selectedValues.Count > 1 ? "s have" : " has")} been selected";
    }
}
