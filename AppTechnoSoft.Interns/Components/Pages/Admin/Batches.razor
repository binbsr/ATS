@page "/batches"
@attribute [Authorize(Roles = Role.Admins)]
@inject ApplicationDbContext Db
@inject ISnackbar SnackBar

<PageTitle>Learning Batches</PageTitle>

<MudButton Href="/add-batch" StartIcon="@Icons.Material.Filled.Add" Color="Color.Tertiary" Variant="Variant.Filled" Size="Size.Large" Class="m-2">New Batch</MudButton>

@if (loadingData)
{
    <Loading />
}
else
{
    <MudGrid Class="pa-3">
        @foreach (var batch in batches)
        {
            <MudItem md="12">
                <MudCard Elevation="5" Class="pa-3">
                    <MudCardHeader Class="pb-0">
                        <CardHeaderAvatar>
                            <MudAvatar Color="Color.Secondary" Size="Size.Large">B</MudAvatar>
                        </CardHeaderAvatar>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h5">@batch.Name</MudText>
                            <MudText Typo="Typo.body1" title="@batch.Created">Added @batch.Created.Humanize()</MudText>
                        </CardHeaderContent>
                        <CardHeaderActions>
                            <MudText Typo="Typo.h6" Inline>@(batch.Students?.Count ?? 0) Members</MudText>
                            <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Small" Color="Color.Warning" Href="@("/edit-batch/" + batch.Id)" />
                            <MudIconButton Icon="@Icons.Material.Sharp.Delete" Size="Size.Small" Color="Color.Error" OnClick="() => ConfirmDelete(batch)" />
                            <MudMessageBox @ref="mbox" Title="Warning" CancelText="Cancel">
                                <MessageContent>
                                    Are you sure to delete this batch? It can't be undone.
                                </MessageContent>
                                <YesButton>
                                    <MudButton Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Material.Filled.DeleteForever">Delete</MudButton>
                                </YesButton>
                            </MudMessageBox>
                        </CardHeaderActions>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudStack Spacing="3" Row Wrap="Wrap.Wrap" Justify="Justify.Center">
                            @foreach (var student in batch.Students ?? [])
                            {
                                <UserProfile AvatarPath="@student.ProfileImagePath" Name="@student.Name" />
                            }
                        </MudStack>

                        <MudGrid Class="mt-2">
                            @foreach (var team in batch.Teams ?? [])
                            {
                                <MudItem lg="4" md="6" sm="12" xs="12">
                                    <MudCard Elevation="0" Class="border-3 border-solid pa-3" Outlined>
                                        <MudCardHeader>
                                            <CardHeaderAvatar>
                                                @if (team.Avatar is null or "")
                                                {
                                                    <MudAvatar Color="Color.Info" Size="Size.Large">T</MudAvatar>
                                                }
                                                else
                                                {
                                                    <MudAvatar Size="Size.Large">
                                                        <MudImage Src="@team.Avatar" />
                                                    </MudAvatar>
                                                }
                                            </CardHeaderAvatar>
                                            <CardHeaderContent>
                                                <MudText Typo="Typo.h6">Team @team.Name</MudText>
                                            </CardHeaderContent>
                                            <CardHeaderActions>
                                                <MudIconButton Class="mt-5" Icon="@Icons.Material.Filled.Edit" Size="Size.Small" Color="Color.Warning" Href="@("/edit-team/" + team.Id)" />
                                                <MudIconButton Class="mt-5" Icon="@Icons.Material.Sharp.Delete" Size="Size.Small" Color="Color.Error" OnClick="() => ConfirmDeleteTeam(team, batch)" />
                                                <MudMessageBox @ref="mbox" Title="Warning" CancelText="Cancel">
                                                    <MessageContent>
                                                        Are you sure to delete this team? It can't be undone.
                                                    </MessageContent>
                                                    <YesButton>
                                                        <MudButton Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Material.Filled.DeleteForever">Delete</MudButton>
                                                    </YesButton>
                                                </MudMessageBox>
                                            </CardHeaderActions>
                                        </MudCardHeader>
                                        <MudCardContent Class="py-0">
                                            <MudStack Spacing="3" Row Wrap="Wrap.Wrap" Justify="Justify.Center">
                                                @foreach (var student in team.Students ?? [])
                                                {
                                                    <UserProfile AvatarPath="@student.ProfileImagePath" Name="@student.Name" />
                                                }
                                            </MudStack>
                                            <MudPaper Class="mt-4 p-2" Elevation="0" Style="text-align:center">
                                                <MudChip T="string" Size="Size.Large" Label="true">ATS Team Project</MudChip>
                                                <MudLink Href="@($"/projects?highlight={@team.Project?.Id}")" Class="d-block ml-2">@(team.Project?.Title ?? "None")</MudLink>
                                                <MudChip T="string" Size="Size.Large" Label="true">Project Git Repository</MudChip>
                                                <MudLink Href="@team.Project?.RepoUrl" Target="_blank" Class="d-block ml-2">@(team.Project?.RepoUrl ?? "None")</MudLink>
                                                <MudChip T="string" Size="Size.Large" Label="true">Agile Board</MudChip>
                                                <MudLink Href="@team.Project?.BoardUrl" Target="_blank" Class="d-block ml-2">@(team.Project?.BoardUrl ?? "None")</MudLink>
                                            </MudPaper>
                                        </MudCardContent>
                                        <MudCardActions Class="mx-2">
                                            <MudText Class="ml-auto" Typo="Typo.body1" title="@team.Created">Added @team.Created.Humanize()</MudText>
                                        </MudCardActions>
                                    </MudCard>
                                </MudItem>
                            }
                            <MudItem>
                                <MudButton Href="@($"/add-team?batchId={@batch.Id}")" StartIcon="@Icons.Material.Filled.Add" Color="Color.Tertiary" Variant="Variant.Filled" Size="Size.Large">New Team</MudButton>
                            </MudItem>
                        </MudGrid>
                    </MudCardContent>
                </MudCard>
            </MudItem>
        }
    </MudGrid>
}

@code {

    private List<Batch> batches = new();
    private Batch selectedBatch = new();
    private bool loadingData;
    private string searchString = "";
    MudMessageBox mbox { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        loadingData = true;

        batches = await Db.Batches
            .Include(x => x.Students)
            .Include(z => z.Teams)
            .ThenInclude(y => y.Students)
            .Include(z => z.Teams)
            .ThenInclude(y => y.Project)
            .ToListAsync();

        loadingData = false;
    }

    private bool FilterFunc1(Batch batch) => FilterFunc(batch, searchString);

    private bool FilterFunc(Batch batch, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (batch.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private async Task ConfirmDelete(Batch batch)
    {
        bool? result = await mbox.ShowAsync();
        if (result == null)
            return;

        Db.Batches.Remove(batch);

        var rowsAffected = await Db.SaveChangesAsync();

        if (rowsAffected > 0)
        {
            SnackBar.Add("Batch Deleted successfully", Severity.Success);
            batches.Remove(batch);
        }
        else
        {
            SnackBar.Add("Batch Delete failed", Severity.Error);
        }
    }

    private async Task ConfirmDeleteTeam(Team team, Batch batch)
    {
        bool? result = await mbox.ShowAsync();
        if (result == null)
            return;

        Db.Teams.Remove(team);

        var rowsAffected = await Db.SaveChangesAsync();

        if (rowsAffected > 0)
        {
            SnackBar.Add("Team Deleted successfully", Severity.Success);
            batch.Teams?.Remove(team);
        }
        else
        {
            SnackBar.Add("Team Delete failed", Severity.Error);
        }
    }
}
