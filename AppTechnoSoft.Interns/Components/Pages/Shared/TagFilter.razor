@inject IDbContextFactory<ApplicationDbContext> DbFactory

<MudPaper Class="p-3 mb-2 border-solid border-2 mud-border-success" Elevation="5">
    @if (tags is null || tags.Count == 0)
    {
        <MudProgressCircular Size="Size.Large" />
    }
    else
    {
        <MudChipSet SelectedChipChanged="RootFilterChanged" Filter Class="border-b-2 border-solid mud-border-success mb-3 pb-3 d-flex justify-center" Mandatory>
            @foreach (var tag in roottags)
            {
                <MudChip Default="@(tag == RootFilter.Internship)" Variant="Variant.Text" Color="Color.Default" SelectedColor="Color.Error" Style="font-size:1.3rem;font-weight:500" Class="p-4" Text="@tag" />
            }
        </MudChipSet>

        <MudChipSet Filter MultiSelection SelectedChipsChanged="FilterChanged">
            @foreach (var tag in tags)
            {
                <MudChip SelectedColor="Color.Success" Text="@tag.Name" Style="@("background:" + tag.ColorCode ?? "")" Class="text-white"></MudChip>
            }
        </MudChipSet>
    }
</MudPaper>

@code {

    [Parameter]
    public required string TagDescription { get; set; }

    [Parameter]
    public EventCallback<string> RootFilterTriggered { get; set; }

    [Parameter]
    public EventCallback<string[]> FilterTriggered { get; set; }

    public List<Tag> tags = [];
    public List<string> roottags = [RootFilter.Internship, RootFilter.Professional, RootFilter.Corporate];

    protected override async Task OnInitializedAsync()
    {
        if (TagDescription is null or "")
            return;

        using var Db = DbFactory.CreateDbContext();
        tags = await Db.Tags.Where(x => x.Description!.Contains(TagDescription)).ToListAsync();
    }

    private async Task RootFilterChanged(MudChip chip)
    {
        await RootFilterTriggered.InvokeAsync(chip.Text);
    }

    private async Task FilterChanged(MudChip[] chips)
    {
        var filters = chips.Select(x => x.Text).ToArray() ?? [];
        await FilterTriggered.InvokeAsync(filters);
    }   
}
