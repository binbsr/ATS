@page "/"

@inject ApplicationDbContext db

<PageTitle>Home</PageTitle>

<MudGrid>
    <MudItem md="12" xs="12">
        <MudCarousel Class="mud-width-full"
                     Style="height:400px;"
                     ShowArrows="@true"
                     ShowBullets="@true"
                     EnableSwipeGesture="@true"
                     AutoCycle="@true" TData="object">
            @foreach (var content in carouselItems)
            {
                <MudCarouselItem Transition="Transition.Slide" Style="@("background-color:" + content.Value)" Class="pt-5">
                    <MudText Typo="Typo.h3" Align="Align.Center">@((MarkupString)content.Key)</MudText>
                </MudCarouselItem>
            }
        </MudCarousel>
    </MudItem>
</MudGrid>
<MudPaper Class="pa-5 mt-4" Elevation="5">
    @foreach (var item in items.Where(x => x.Title == "HomeIntro"))
    {
        <MudText Typo="Typo.h5" Align="Align.Center">@item.Description</MudText>
        <MudText Typo="Typo.subtitle2" Class="mb-5">
            @((MarkupString)item.HtmlContent)
        </MudText>
    }   
</MudPaper>


@code {
    private Dictionary<string, string> carouselItems = new();
    private List<Widget> items = new();

    protected override async Task OnInitializedAsync()
    {
        items = await db.Widgets.Where(x => x.Title == "CarouselItem" || x.Title == "HomeIntro").ToListAsync();
        string[] colors = [ 
            Colors.Red.Accent2, 
            Colors.Purple.Accent2, 
            Colors.LightBlue.Accent2, 
            Colors.LightGreen.Accent2, 
            Colors.Teal.Accent2, 
            Colors.Lime.Accent2,
            Colors.Amber.Accent2,
            Colors.Orange.Accent3];
        Random rnd = new();

        foreach (var item in items.Where(x => x.Title == "CarouselItem"))
        {
            carouselItems.Add(item.HtmlContent, colors[rnd.Next(0, colors.Length)]);
        }
    }
}
