@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject ISnackbar SnackBar

<MudGrid>
    <MudItem md="6" sm="12">
        <MudAutocomplete T="Batch"
                         Variant="Variant.Outlined"
                         Dense
                         Margin="Margin.Dense"
                         Label="To Training Batch"
                         @bind-Value="batchToAssign"
                         SearchFunc="@SearchItems"
                         ToStringFunc="@(e=> e==null ? null : e.Name)"
                         ShowProgressIndicator="true"
                         ProgressIndicatorColor="Color.Tertiary"
                         MaxItems="null" />
    </MudItem>
    <MudItem md="6" sm="12">
        <MudAutocomplete T="Instructor"
                         Variant="Variant.Outlined"
                         Dense
                         Margin="Margin.Dense"
                         Label="As Instructor"
                         @bind-Value="onBehalfOfInstructor"
                         SearchFunc="@SearchInstructors"
                         ToStringFunc="@(e=> e==null ? null : e.Name)"
                         ShowProgressIndicator="true"
                         ProgressIndicatorColor="Color.Tertiary"
                         MaxItems="null" />
    </MudItem>
    <MudItem md="6" sm="12">
        <MudDatePicker Label="Deadline date" @bind-Date="deadlineDate" Color="Color.Secondary" />
    </MudItem>
    <MudItem md="6" sm="12">
        <MudTimePicker Label="Deadline day time" @bind-Time="deadlineTime" AmPm Color="Color.Secondary" />
    </MudItem>
    <MudItem md="10" sm="12">
        @if (errorMessage is not "")
        {
            <MudText Color="Color.Error" Typo="Typo.body1" Align="Align.Right">@errorMessage</MudText>
        }
    </MudItem>
    <MudItem md="2" sm="12">
        <MudButton Variant="Variant.Outlined"
                   FullWidth
                   StartIcon="@Icons.Material.Outlined.AssignmentTurnedIn"
                   Disabled="@SaveDisabled"
                   OnClick="TurnInAssignments">
            Assign
        </MudButton>
    </MudItem>
</MudGrid>

@code {

    [Parameter]
    public AssignmentViewModel Assignment { get; set; } = null!;

    [CascadingParameter]
    private Task<AuthenticationState> AuthTask { get; set; } = null!;

    private IEnumerable<Batch> batches = [];
    private IEnumerable<Instructor> instructors = [];
    private Batch batchToAssign = null!;
    private Instructor onBehalfOfInstructor = null!;
    private DateTime? deadlineDate;
    private TimeSpan? deadlineTime;
    private string errorMessage = "";
    private bool SaveDisabled => Assignment is null
        || batchToAssign is null
        || onBehalfOfInstructor is null
        || deadlineDate is null;

    protected override async Task OnInitializedAsync()
    {
        var userTask = await AuthTask;
        var loggedInUser = userTask.User;
        var loggedInUserId = loggedInUser.GetUserId();

        using var Db = DbFactory.CreateDbContext();
        var instructor = await Db.Instructors.FirstOrDefaultAsync(x => x.ApplicationUserId == loggedInUserId);

        if (instructor is null)
            return;

        onBehalfOfInstructor = instructor;
    }

    private async Task<IEnumerable<Batch>> SearchItems(string value, CancellationToken token)
    {
        if (!batches.Any())
        {
            using var Db = DbFactory.CreateDbContext();
            batches = await Db.Batches.ToListAsync(token);
        }

        if (value is null or "")
        {
            return batches;
        }

        return batches.Where(x => x.Name.Contains(value, StringComparison.OrdinalIgnoreCase));
    }

    private async Task<IEnumerable<Instructor>> SearchInstructors(string value, CancellationToken token)
    {
        if (!instructors.Any())
        {
            using var Db = DbFactory.CreateDbContext();
            var instructorModels = await Db.Instructors
                .Select(x => new { Id = x.Id, AppUserId = x.ApplicationUserId, Name = x.Name })
                .ToListAsync(token);
            instructors = instructorModels.Select(x => new Instructor { Id = x.Id, ApplicationUserId = x.AppUserId, Name = x.Name });
        }

        if (value is null or "")
        {
            return instructors;
        }

        return instructors.Where(x => x.Name.Contains(value, StringComparison.OrdinalIgnoreCase));
    }

    private async Task TurnInAssignments()
    {
        errorMessage = "";

        using var Db = DbFactory.CreateDbContext();

        // Sanity check if this assignment already assigned to this batch
        var remainingStudents = await Db.Students
            .Where(x => x.BatchId == batchToAssign.Id)
            .Select(s => s.Id)
            .Except(
                Db.StudentAssignments
                .Where(x => x.AssignmentId == Assignment.Id)
                .Select(x => x.StudentId))
            .ToArrayAsync();

        if (remainingStudents == null || remainingStudents.Length == 0)
        {
            errorMessage = "This assignment already been turned in for all students of this batch";
            return;
        }        

        var studemtsAssigment = remainingStudents.Select(x => new StudentAssignment
            {
                AssignmentId = Assignment.Id,
                StudentId = x,
                Status = AssignmentStatus.Assigned,
                InstructorId = onBehalfOfInstructor.Id,
                TurnInDate = DateTime.UtcNow,
                Deadline = deadlineDate + deadlineTime,
                Comment = $"{DateTime.UtcNow.ToNepalTime()}: {Assignment.Title} assigned."
            });

        Db.StudentAssignments.AddRange(studemtsAssigment);

        var rowsAffected = await Db.SaveChangesAsync();

        if (rowsAffected > 0)
        {
            SnackBar.Add($"'{Assignment.Title}' turned in for {remainingStudents.Length} student(s)", Severity.Success);
        }
        else
        {
            SnackBar.Add("Turning in assignment to batch students failed", Severity.Error);
        }
    }
}