@page "/logwork"

@inject ApplicationDbContext Db
@inject NavigationManager Navigation
@inject ISnackbar SnackBar

<PageTitle>Log Tasks</PageTitle>

@if (studentModel is null)
{
    <ApplicationAlert Text="Please complete your registration proces first." Navigation="/apply" />
}
else if (studentModel.Status == Status.Applied)
{
    <ApplicationAlert Text="You are not yet assiged to any batch. Please bear with us, we are regrouping you to appropriate training batch." />
}
else
{
    <MudTabs Outlined @ref="tabs">
        <MudTabPanel Text="Daily Tasks" Icon="@Icons.Material.Sharp.AddTask">
            <EditForm Model="@viewModel" OnValidSubmit="OnValidSubmit">
                <DataAnnotationsValidator />
                <MudCard Class="p-2">
                    <MudCardContent>
                        <MudGrid>
                            <MudItem md="4" xs="12">
                                <MudText Align="Align.Center" Typo="Typo.h6" Class="mb-2">Today</MudText>
                                <MudText Align="Align.Center" Typo="Typo.h2" Class="mb-2">@DateTime.Now.ToLongDateString()</MudText>
                            </MudItem>
                            <MudItem md="4" sm="12">
                                <MudText Align="Align.Center" Typo="Typo.h6" Class="mb-2">Punchin Time</MudText>
                                <MudButton StartIcon="@Icons.Material.Sharp.PunchClock"
                                           OnClick="PunchIn">Punch In</MudButton>
                                <MudText Align="Align.Center" Typo="Typo.h2" Class="mb-2">@punchinTime</MudText>
                            </MudItem>
                            <MudItem md="4" sm="12">
                                <MudText Align="Align.Center" Typo="Typo.h6" Class="mb-2">Punchout Time</MudText>
                                <MudText Align="Align.Center" Typo="Typo.h2" Class="mb-2">@punchOutTime</MudText>
                            </MudItem>
                            <MudItem Class="pt-0">
                                <MudText Align="Align.Right" Color="Color.Info" Typo="Typo.h6">
                                    Work Hours - @((viewModel!.PunchOut - viewModel!.PunchIn)!.Value.ToString(@"hh\:mm"))
                                </MudText>
                            </MudItem>
                        </MudGrid>
                        <MudTextField Variant="Variant.Outlined" Label="Add task summary" Lines="5" Class="mt-3"
                                      @bind-Value="viewModel.Task" For="@(() => viewModel.Task)" Immediate />
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton ButtonType="ButtonType.Submit"
                                   Variant="Variant.Filled"
                                   Color="Color.Primary"
                                   Class="ml-auto"
                                   StartIcon="@Icons.Material.Sharp.Save">
                            Punchout
                        </MudButton>
                    </MudCardActions>
                </MudCard>
            </EditForm>
        </MudTabPanel>
        <MudTabPanel Text="Attendance History" Icon="@Icons.Material.Filled.History" OnClick="LoadAttendances">
            <MudTable Items="@allAttendances" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@loading"
                      LoadingProgressColor="Color.Secondary">
                <HeaderContent>
                    <MudTh>Date</MudTh>
                    <MudTh>PunchIn</MudTh>
                    <MudTh>PunchOut</MudTh>
                    <MudTh>Task Done</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Date">@context.Date</MudTd>
                    <MudTd DataLabel="PunchIn">@context.PunchIn</MudTd>
                    <MudTd DataLabel="PunchOut">@context.PunchOut</MudTd>
                    <MudTd DataLabel="WorkLog">@context.WorkLog</MudTd>
                </RowTemplate>
            </MudTable>
        </MudTabPanel>
    </MudTabs>
}

@code {

    MudTabs tabs = default!;
    private AttendanceViewModel viewModel = null!;
    private Attendance model = null!;
    private Student studentModel = null!;
    bool logExists = false;
    List<Attendance> allAttendances = new();
    bool loading = false;
    TimeOnly punchinTime;
    TimeOnly punchOutTime;

    [CascadingParameter]
    private Task<AuthenticationState> AuthTask { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        var userTask = await AuthTask;
        var loggedInUser = userTask.User;
        var loggedInUserId = loggedInUser?.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value ?? "";

        if (loggedInUserId is null or "")
        {
            Navigation.NavigateTo("/Account/Login");
        }

        studentModel = await Db.Students.FirstOrDefaultAsync(x => x.ApplicationUserId == loggedInUserId);

        if (studentModel == null)
            return;

        (logExists, viewModel) = await FetchLog(studentModel.Id, DateTime.Today);
    }

    private async Task SelectionDateChanged(DateTime? selectedDate)
    {
        viewModel.Date = selectedDate;
        (logExists, viewModel) = await FetchLog(studentModel.Id, selectedDate);
    }

    private async Task<(bool, AttendanceViewModel)> FetchLog(string studentId, DateTime? dateTime)
    {
        if (dateTime is null || dateTime == default)
            return (false, viewModel);

        var date = DateOnly.FromDateTime(dateTime.Value);
        model = await Db.Attendances.FirstOrDefaultAsync(x => x.StudentId == studentId && x.Date == date) ?? default!;

        if (model is null)
            return (false, ViewModelEmpty(studentId));

        // Mutate viewmodel
        viewModel = model.ToViewModel();
        return (true, viewModel);
    }

    private AttendanceViewModel ViewModelEmpty(string sId) => new()
        {
            StudentId = sId,
            Date = DateTime.Today,
            PunchIn = DateTime.Now.TimeOfDay,
            PunchOut = DateTime.Now.TimeOfDay
        };

    private async Task OnValidSubmit(EditContext context)
    {
        if (viewModel.StudentId is null || viewModel.Date == default)
            return;

        if (logExists)
        {
            viewModel.ToModel(model);
        }
        else
        {
            var model = viewModel.ToModel();
            Db.Attendances.Add(model);
        }

        var rowsAffected = await Db.SaveChangesAsync();

        if (rowsAffected > 0)
        {
            SnackBar.Add($"Your worklog added for {model.Date}", Severity.Success);
            tabs.ActivatePanel(1);
        }
        else
        {
            SnackBar.Add("Couldn't add your worlog.", Severity.Error);
        }
    }

    private async Task LoadAttendances()
    {
        loading = true;
        allAttendances = await Db.Attendances.Where(x => x.StudentId == viewModel.StudentId).ToListAsync();
        loading = false;
    }

    private void PunchIn()
    {
        punchinTime = TimeOnly.FromDateTime(DateTime.Now);
    }

    private bool ShouldDisableDates(DateTime dt) =>
    dt > DateTime.Today // Future dates
    || (DateTime.Today >= dt.AddDays(3).Date) // Last 3 days including today
    || (int)dt.DayOfWeek == 0 // Sunday
    || (int)dt.DayOfWeek == 6; // Saturday
}
