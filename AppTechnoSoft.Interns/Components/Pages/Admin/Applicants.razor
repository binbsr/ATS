@page "/applicants"

@attribute [Authorize(Roles = Role.Admins)]
@inject ApplicationDbContext Db
@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject ISnackbar SnackBar

<PageTitle>Applicants</PageTitle>

<MudDataGrid T="StudentViewModel"
             MultiSelection="true"
             Items="@studentList"
             @bind-SelectedItems="selectedApplicants"
             SortMode="SortMode.Multiple"
             Filterable="true"
             Hover="true"
             QuickFilter="@_quickFilter"
             Loading="loadingData"
             ReadOnly="true"
             Hideable="true"
             Dense="true">

    <ToolBarContent>
        <MudButton Disabled="@(!selectedApplicants.Any())" StartIcon="@Icons.Material.Sharp.AutoDelete" OnClick="RemoveFromBatch" Class="ml-2 mt-5" Variant="Variant.Filled" Color="Color.Tertiary">De-Batch</MudButton>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="@($"Search {studentList.Count} applicants by name, email, status or phone...")" Adornment="Adornment.Start" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <Columns>
        <SelectColumn ShowInFooter="false" ShowInHeader="false" />
        <HierarchyColumn T="StudentViewModel" />
        <TemplateColumn Filterable="false">
            <CellTemplate>
                <MudAvatar>
                    @if (context.Item.ProfileImagePath is null or "")
                    {
                        <MudIcon Icon="@Icons.Material.Outlined.Person2" />
                    }
                    else
                    {
                        <MudImage Src="@context.Item.ProfileImagePath"></MudImage>
                    }
                </MudAvatar>
            </CellTemplate>
        </TemplateColumn>
        <PropertyColumn Property="x => x.Name" Filterable="false" />
        <PropertyColumn Property="x => x.Phone" Filterable="false" />
        <PropertyColumn Property="x => x.Email" Filterable="false" />
        <PropertyColumn Property="x => x.ApplicantType" Filterable="false" />
        <PropertyColumn Property="x => x.TrainingTrack" Filterable="false" />
        <PropertyColumn Property="x => x.Status" />
    </Columns>
    <ChildRowContent>
        <MudGrid Class="p-2">
            <MudItem md="12" Class="p-2">
                <MudStack Row>
                    <MudButton Variant="Variant.Outlined"
                               Disabled="context.Item.Email == string.Empty"
                               Color="Color.Warning"
                               Class="my-3"
                               StartIcon="@Icons.Material.Filled.Security"
                               OnClick="() => GenerateUserCreds(context.Item)">
                        Generate Login Details
                    </MudButton>

                    @if (context.Item.Password is not null)
                    {
                        <MudAlert Severity="Severity.Info" Style="font-size:1rem">
                            Please Keep it Safe (One time only)
                            <span class="border-2 border-dashed p-2" style="font-family:Courier New, Courier, monospace">
                                <b>Email:</b> @context.Item.Email
                                <b>Password:</b> @context.Item.Password
                            </span>
                        </MudAlert>
                    }
                </MudStack>
            </MudItem>
            <MudItem md="3" sm="4" Class="p-2">
                <b>Name</b><MudText Typo="Typo.body1">@context.Item.Name</MudText>
            </MudItem>
            <MudItem md="3" sm="4" Class="p-2">
                <b>College</b><MudText Typo="Typo.body1">@(context.Item.CollegeName ?? "N/A")</MudText>
            </MudItem>
            <MudItem md="3" sm="4" Class="p-2">
                <b>Program</b><MudText Typo="Typo.body1">@(context.Item.ProgramName ?? "N/A")</MudText>
            </MudItem>
            <MudItem md="3" sm="4" Class="p-2">
                <b>Team</b><MudText Typo="Typo.body1">@(context.Item.TeamName ?? "Not Assigned")</MudText>
            </MudItem>
            <MudItem md="3" sm="4" Class="p-2">
                <b>Applied</b><MudText Typo="Typo.body1">@context.Item.FormSubmitted.Humanize()</MudText>
            </MudItem>
            <MudItem md="3" sm="4" Class="p-2">
                <b>General Programming</b><MudText Typo="Typo.body1">@context.Item.GeneralProgramming.GetGeneralProgText()</MudText>
            </MudItem>
            <MudItem md="3" sm="4" Class="p-2">
                <b>Web Development Experience</b><MudText Typo="Typo.body1">@context.Item.WebExperience.GetWebExperienceText()</MudText>
            </MudItem>
            <MudItem md="3" sm="4" Class="p-2">
                <b>Database Development Experience</b><MudText Typo="Typo.body1">@context.Item.DbExperience.GetDbExperienceText()</MudText>
            </MudItem>
        </MudGrid>
    </ChildRowContent>
    <PagerContent>
        <MudDataGridPager T="StudentViewModel" PageSizeOptions="[20, 50, 100, 200]" />
    </PagerContent>
</MudDataGrid>

@code {
    private List<StudentViewModel> studentList = new();
    private HashSet<StudentViewModel> selectedApplicants = [];
    private string _searchString = string.Empty;
    private bool loadingData = false;

    private Func<StudentViewModel, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Email.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Status.ToString().Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Phone.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };

    protected override async Task OnInitializedAsync()
    {
        loadingData = true;
        var studentModels = await Db.Students
            .Include(s => s.College)
            .Include(t => t.TechProgram)
            .Include(t => t.Team)
            .Include(u => u.User)
            .AsNoTracking()
            .ToListAsync();

        studentList = studentModels.ToViewModel();
        loadingData = false;
    }

    private async Task RemoveFromBatch()
    {
        if (selectedApplicants.Any())
        {
            var rowsAffected = await Db.Students
                .Where(s => selectedApplicants.Select(z => z.Id).Contains(s.Id))
                .ExecuteUpdateAsync(x => x
                    .SetProperty(y => y.BatchId, null as int?)
                    .SetProperty(y => y.ApplicationUserId, null as string)
                    .SetProperty(y => y.Status, Status.Applied)
                );

            if (rowsAffected > 0)
            {
                SnackBar.Add("Selected trainees debatched", Severity.Success);
            }
            else
            {
                SnackBar.Add("Debatching failed", Severity.Error);
            }
        }
    }

    private async Task GenerateUserCreds(StudentViewModel studentViewModel)
    {
        // Register user programatically
        var user = Activator.CreateInstance<ApplicationUser>();
        await UserStore.SetUserNameAsync(user, studentViewModel.Email, CancellationToken.None);
        var emailStore = (IUserEmailStore<ApplicationUser>)UserStore;
        await emailStore.SetEmailAsync(user, studentViewModel.Email, CancellationToken.None);
        var password = PwdGenerator.NewPassword(8);
        var result = await UserManager.CreateAsync(user, password);
        _ = await UserManager.AddToRoleAsync(user, Role.Trainee);

        if (result.Succeeded)
        {
            SnackBar.Add($"User '{studentViewModel.Email}' registered successfully", Severity.Success);
        }
        else
        {
            SnackBar.Add(string.Join(", ", result.Errors.Select(error => error.Description)), Severity.Error);
        }

        studentViewModel.Password = password;
    }
}