@page "/dashboard"
@using AppTechnoSoft.Interns.Components.Account
@using Microsoft.AspNetCore.Identity

@attribute [Authorize]
@inject ApplicationDbContext Db

<PageTitle>Your dashboard</PageTitle>

@if (loadingData)
{
    <MudProgressCircular />
}

@if (student is null)
{
    <ApplicationAlert />
}
else
{
    <MudGrid>
        <MudItem xs="12">
            <MudPaper Class="pa-4" Elevation="5">
                <MudText Typo="Typo.h6" Class="my-2">@((MarkupString)$"Training Batch: <strong>{loggedInUserBatchName}</strong>")</MudText>
                <MudContainer Class="d-flex align-start gap-4 ml-0">
                    @foreach (var member in batchMembers)
                    {
                        var user = loggedInUserId == member.UserId ? $"{member.Name} (You)" : member.Name;
                        <MudStack AlignItems="AlignItems.Center">
                            <MudAvatar Style="height:80px; width:80px; font-size:2rem;">
                                <MudImage Src="@member.ProfilePath" />
                            </MudAvatar>
                            <MudText Typo="Typo.subtitle2">@user</MudText>
                            </MudStack>
                    }
                </MudContainer>
            </MudPaper>
        </MudItem>
        <MudItem xs="12">
            <MudPaper Class="pa-4" Elevation="5">
                <MudText Typo="Typo.h6" Class="mb-2">@((MarkupString)$"Agile Team: <strong>{loggedInUserTeamName}</strong>")</MudText>
                <MudGrid>
                    <MudItem md="1" xs="12" Class="d-flex">
                        <MudTooltip Text="@($"Team {loggedInUserTeamName} ({teamMembers.Count} members)")">
                            <MudAvatar Style="height:120px; width:120px; font-size:2.5rem;" Rounded>
                             <MudImage Src="@loggedInUserTeamAvatar" />
                         </MudAvatar>
                     </MudTooltip>
                 </MudItem>
                 <MudItem md="11" xs="12">
                     <MudContainer Class="d-flex align-start gap-4 ml-0">
                         @foreach (var member in teamMembers)
                            {
                                var user = loggedInUserId == member.UserId ? $"{member.Name} (You)" : member.Name;
                                <MudStack AlignItems="AlignItems.Center">
                                    <MudAvatar Style="height:80px; width:80px; font-size:2rem;">
                                        <MudImage Src="@member.ProfilePath" />
                                    </MudAvatar>
                                    <MudText Typo="Typo.subtitle2">@user</MudText>
                                    </MudStack>
                            }
                        </MudContainer>
                    </MudItem>
                </MudGrid>
            </MudPaper>
        </MudItem>
        <MudItem xs="12">
            <MudPaper Class="pa-4" Elevation="5">
                <MudText Typo="Typo.h6" Class="mb-2">Project Title: <strong>@projectTitle</strong></MudText>
                <MudText Typo="Typo.subtitle2" Class="mb-2">@projectDetails</MudText>
                </MudPaper>
            </MudItem>
            <MudItem xs="12">
                <MudPaper Class="pa-4" Elevation="5">
                    <MudText Typo="Typo.h6" Class="mb-2"><strong>Your Accomplishments</strong></MudText>
                    <MudText Typo="Typo.subtitle2" Class="mb-2">This section shows your module progress, completed assignments and shareable certificate.</MudText>
                </MudPaper>
            </MudItem>
        </MudGrid>
}

@code {

    bool loadingData = false;
    string loggedInUserId = string.Empty;
    Student? student;
    string loggedInUserTeamName = "Not assigned to any team";
    string loggedInUserBatchName = "Not assigned to any batch";
    string loggedInUserTeamAvatar = "";
    string projectTitle = "Project not assigned to your team";
    string projectDetails = string.Empty;
    List<StudentViewModel> teamMembers = new();
    List<StudentViewModel> batchMembers = new();
    record StudentViewModel(string Name, string UserId, string ProfilePath, string TeamName, string BatchName);

    [CascadingParameter]
    private Task<AuthenticationState> AuthTask { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        loadingData = true;
        var userTask = await AuthTask;
        var loggedInUser = userTask.User;
        loggedInUserId = loggedInUser?.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value ?? string.Empty;

        if (loggedInUserId == string.Empty)
            return;

        student = await Db.Students
            .Where(x => x.ApplicationUserId == loggedInUserId)
            .Include(b => b!.Batch)
            .Include(t => t.Team)
            .ThenInclude(b => b!.Project)
            .FirstOrDefaultAsync();

        if (student is null || student.BatchId is null)
        {
            loadingData = false;
            return;
        }

        loggedInUserBatchName = student?.Batch?.Name ?? string.Empty;
        loggedInUserTeamName = student?.Team?.Name ?? string.Empty;
        loggedInUserTeamAvatar = student?.Team?.Avatar ?? string.Empty;

        var title = student?.Team?.Project?.Title;

        if (title is not null or "")
        {
            projectTitle = title;
            projectDetails = student!.Team!.Project!.Requirements;
        }

        batchMembers = await Db.Students
            .Where(x => x.BatchId == student!.BatchId)
            .Select(x => new StudentViewModel(x.Name, x.ApplicationUserId!, x.ProfileImagePath!, x!.Team!.Name, x!.Batch!.Name))
            .ToListAsync();
        teamMembers = batchMembers.Where(x => x.TeamName == loggedInUserTeamName).ToList();
        loadingData = false;
    }
}
