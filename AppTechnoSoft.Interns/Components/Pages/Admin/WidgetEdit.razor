@page "/add-widget"
@page "/edit-widget/{Id:int}"

@inject ApplicationDbContext Db
@inject ISnackbar SnackBar

<PageTitle>@pageTitle</PageTitle>

    <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator />
        <MudTextField Label="Title" @bind-Value="model.Title" For="@(() => model.Title)" />
        <MudTextField Label="Description" Class="mt-3" @bind-Value="model.Description" For="@(() => model.Description)" />

        <MudSelect T="Tag" 
            Label="Tags" 
            HelperText="Check all tags that apply for this widget"
            MultiSelection="true" 
            @bind-SelectedValues="@tagsSelected" 
            Class="mb-3" 
            MultiSelectionTextFunc="@(new Func<List<string>, string>(GetMultiSelectionText))"
            AnchorOrigin="Origin.BottomCenter">
            @foreach (var tag in tags)
            {
                <MudSelectItem Value="@tag">@tag.Name</MudSelectItem>
            }
        </MudSelect>

    <BlazoredTextEditor @ref="@QuillHtml" EditorCssStyle="height:300px" Placeholder="Content for this widget...">
            <ToolbarContent>
                <span class="ql-formats">
                    <select class="ql-font">
                        <option selected=""></option>
                        <option value="serif"></option>
                        <option value="monospace"></option>
                    </select>
                    <select class="ql-header">
                        <option value="1"></option>
                        <option selected value="2"></option>
                        <option value="3"></option>
                        <option value="4"></option>
                        <option value="5"></option>
                    </select>
                    <select class="ql-size">
                        <option value="small"></option>
                        <option selected></option>
                        <option value="large"></option>
                        <option value="huge"></option>
                    </select>
                </span>
                <span class="ql-formats">
                    <button class="ql-bold"></button>
                    <button class="ql-italic"></button>
                    <button class="ql-underline"></button>
                    <button class="ql-strike"></button>
                </span>
                <span class="ql-formats">
                    <select class="ql-color"></select>
                    <select class="ql-background"></select>
                </span>
                <span class="ql-formats">
                    <button class="ql-list" value="ordered"></button>
                    <button class="ql-list" value="bullet"></button>
                </span>
                <span class="ql-formats">
                    <button class="ql-blockquote"></button>
                    <button class="ql-code-block"></button>
                    <button class="ql-script" value="sub"></button>
                    <button class="ql-script" value="super"></button>
                    <button class="ql-link"></button>
                </span>
            </ToolbarContent>
            <EditorContent>@((MarkupString)model.HtmlContent)</EditorContent>
        </BlazoredTextEditor>

        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="mt-3" StartIcon="@Icons.Material.Filled.Save">Save Widget</MudButton>
    </EditForm>

@code {

    [Parameter]
    public int? Id { get; set; }

    BlazoredTextEditor QuillHtml;
    Widget model = new Widget();
    List<Tag> tags = new();
    IEnumerable<Tag> tagsSelected;
    bool success;
    string pageTitle;
    bool IsAdd => Id is null or 0;

    protected override async Task OnInitializedAsync()
    {
        tags = await Db.Tags.ToListAsync();

        if (IsAdd)
        {
            pageTitle = "Add Widget";
        }
        else
        {
            pageTitle = "Edit Widget";
            model = await Db.Widgets.Include(x => x.Tags).FirstAsync(x => x.Id == Id);
            tagsSelected = model.Tags;
        }
    }

    private async Task OnValidSubmit(EditContext context)
    {
        model.HtmlContent = await QuillHtml.GetHTML();

        if (model.HtmlContent is null or "")
        {
            return;
        }

        model.Tags = tagsSelected.ToList();

        if (IsAdd)
        {
            Db.Widgets.Add(model);
        }
        else
        {
            model.Id = Id.Value;
            Db.Widgets.Update(model);
        }

        var rowsAffected = await Db.SaveChangesAsync();

        if (rowsAffected > 0)
        {
            SnackBar.Add("Widget saved successfully", Severity.Success);
        }
        else
        {
            SnackBar.Add("Widget save failed", Severity.Error);
        }
    }

    private string GetMultiSelectionText(List<string> selectedValues)
    {
        return $"{selectedValues.Count} tag{(selectedValues.Count > 1 ? "s have" : " has")} been selected";
    }
}
