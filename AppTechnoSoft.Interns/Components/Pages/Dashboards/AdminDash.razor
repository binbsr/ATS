@inject IDbContextFactory<ApplicationDbContext> DbFactory

@if (loadingData)
{
    <MudProgressCircular />
}
else
{
    <MudText Align="Align.Center" Typo="Typo.h6" Class="border-double border-b-4 mud-border-tertiary my-3">Admin Profile</MudText>
    <MudGrid>
        <MudItem md="6">
            <MudPaper Elevation="5" Class="py-3">
                <MudChart ChartType="ChartType.Donut" Width="350px" Height="350px" InputData="@data" InputLabels="@labels" LegendPosition="Position.Right">
                    <CustomGraphics>
                        <text class="donut-inner-text" x="49%" y="42%" dominant-baseline="middle" text-anchor="middle" fill="black" font-family="Helvetica" font-size="2">Total</text>
                        <text class="donut-inner-text" x="47%" y="55%" dominant-baseline="middle" text-anchor="middle" fill="black" font-family="Helvetica" font-size="5">@data.Sum().ToString()</text>
                    </CustomGraphics>
                </MudChart>
                <MudText Class="my-3" Typo="Typo.h6" Align="Align.Center">Total Students By Programs</MudText>
            </MudPaper>            
        </MudItem>
    </MudGrid>    
}

@code {

    bool loadingData = false;

    public double[] data = [];
    public string[] labels = [];

    protected override async Task OnInitializedAsync()
    {
        using var Db = DbFactory.CreateDbContext();
        var studentsByPrograms = await Db.Students.GroupBy(x => new { x.TechProgram!.Name, x.TechProgram.Affliation }).ToListAsync();

        if (studentsByPrograms is null)
            return;

        data = studentsByPrograms.Select(x => (double)x.Count()).ToArray();
        labels = studentsByPrograms.Select(x => $"{x.Key.Name} ({x.Key.Affliation})").ToArray();
    }
}
