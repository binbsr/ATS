@page "/projects"

@attribute [Authorize(Roles = Role.Admins)]
@inject ApplicationDbContext Db
@inject ISnackbar SnackBar

<PageTitle>Team Projects</PageTitle>

<MudTable Items="@projects" Hover="true" Breakpoint="Breakpoint.Sm" Filter="new Func<ProjectViewModel, bool>(FilterFunc)">
    <ToolBarContent>
        <MudFab Href="/add-project" StartIcon="@Icons.Material.Filled.Add" Title="Add New Project" Size="Size.Small" Color="Color.Tertiary"></MudFab>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search"
                      Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search"
                      IconSize="Size.Medium"
                      Class="mt-0">
        </MudTextField>
    </ToolBarContent>
    <ColGroup>
        <col />
        <col />
        <col />
        <col />
        <col />
    </ColGroup>
    <HeaderContent>
        <MudTh>#</MudTh>
        <MudTh>Title</MudTh>
        <MudTh>Repository</MudTh>
        <MudTh>Board</MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="#">@(projects.IndexOf(context) + 1)</MudTd>
        <MudTd DataLabel="Title">@context.Title</MudTd>
        <MudTd DataLabel="RepoUrl">@context.RepoUrl</MudTd>
        <MudTd DataLabel="BoardUrl">@context.BoardUrl</MudTd>
        <MudTd>
            <MudButton Variant="Variant.Outlined" Size="Size.Small" OnClick="@(() => ShowBtnPress(context.Id))">
                @((context.ShowDetails == true) ? "Hide" : "Show") Requirements
            </MudButton>
        </MudTd>
        <MudTd>
            <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Small" Color="Color.Warning" Href="@("/edit-project/" + context.Id)" />
            <MudIconButton Icon="@Icons.Material.Sharp.Delete" Size="Size.Small" Color="Color.Error" OnClick="() => ConfirmDelete(context)" />
            <MudMessageBox @ref="mbox" Title="Warning" CancelText="Cancel">
                <MessageContent>
                    Are you sure to delete this project? It can't be undone!
                </MessageContent>
                <YesButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Error" Class="ml-2 mb-2 mr-3" StartIcon="@Icons.Material.Filled.DeleteForever">Delete</MudButton>
                </YesButton>
            </MudMessageBox>
        </MudTd>
    </RowTemplate>
    <ChildRowContent>
        @if (context.ShowDetails)
        {
            <MudTr>
                <td colspan="5">
                    <MudCard Elevation="5">
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Align="Align.Center" Typo="Typo.h6">@context.Title</MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardContent>
                            @((MarkupString)context.Requirements.ToHtmlString())
                        </MudCardContent>
                    </MudCard>
                </td>
            </MudTr>
        }
    </ChildRowContent>
</MudTable>

@code
{
    private List<ProjectViewModel> projects = [];
    private List<Project> projectEntities = [];
    private ProjectViewModel currentProject = new();
    private bool ShowDetails { get; set; }
    string searchString = string.Empty;
    MudMessageBox mbox { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        projectEntities = await Db.Projects.ToListAsync();
        projects = projectEntities.ToViewModel();
    }

    private void ShowBtnPress(int projectId)
    {
        currentProject = projects.Find(x => x.Id == projectId) ?? new();
        currentProject.ShowDetails = !currentProject.ShowDetails;
    }

    private async Task ConfirmDelete(ProjectViewModel project)
    {
        bool? result = await mbox.Show();
        if (result == null)
            return;

        var model = projectEntities.Find(x => x.Id == project.Id);
        if (model is null)
            return;

        Db.Projects.Remove(model);

        var rowsAffected = await Db.SaveChangesAsync();

        if (rowsAffected > 0)
        {
            SnackBar.Add("Project Deleted successfully", Severity.Success);
            projects.Remove(project);
        }
        else
        {
            SnackBar.Add("Project Delete failed", Severity.Error);
        }
    }

    private bool FilterFunc(ProjectViewModel project) => Filter(project, searchString);

    private bool Filter(ProjectViewModel project, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (project.Title.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
}
