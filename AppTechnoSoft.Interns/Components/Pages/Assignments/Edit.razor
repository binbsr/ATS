@page "/assignments/edit/{Id:int}"

@attribute [Authorize(Roles = Role.AdminsAndInstructor)]
@inject ISnackbar SnackBar
@inject NavigationManager Navigation
@inject ApplicationDbContext Db

<PageTitle>Add Assignment</PageTitle>

<EditForm Model="@model" OnValidSubmit="OnValidSubmit">
    <MudTextField Label="Title" @bind-Value="model.Title" Variant="Variant.Outlined" />
    <MudAutocomplete T="Widget"
                     Dense
                     Class="mt-3"
                     Label="Select Module"
                     Variant="Variant.Outlined"
                     @bind-Value="model.Module"
                     SearchFunc="@SearchModules"
                     ToStringFunc="@(e=> e==null ? null : e.Description)"
                     ShowProgressIndicator="true"
                     ProgressIndicatorColor="Color.Default"
                     MaxItems="null" />

    <RichTextEditor Class="mt-3" MarkdownValue="@model.Details" EditorValueChanged="OnMarkdownValueChanged" PlaceHolder="Thorough assignment description" />

    <MudButton ButtonType="ButtonType.Submit"
               Variant="Variant.Filled"
               Color="Color.Tertiary"
               Class="ml-auto"
               StartIcon="@Icons.Material.Filled.Save">
        Update Assignment
    </MudButton>
</EditForm>

@code {

    [Parameter]
    public required int Id { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> AuthTask { get; set; } = null!;

    Assignment model = new();
    List<Widget> modules = [];

    protected override async Task OnInitializedAsync()
    {
        model = await Db.Assignments.FindAsync(Id) ?? new();
    }

    private async Task OnValidSubmit(EditContext context)
    {
        var state = await AuthTask;
        var userName = state.User.Identity?.Name;

        model.AddLastUpdatedStamps(userName);

        Db.Assignments.Update(model);
        var rowsAffected = await Db.SaveChangesAsync();

        if (rowsAffected > 0)
        {
            SnackBar.Add("New assignment details updated successfully", Severity.Success);
            Navigation.NavigateTo("/assignments");
        }
        else
        {
            SnackBar.Add("New assignment update failed", Severity.Error);
        }
    }

    private async Task<IEnumerable<Widget>> SearchModules(string value)
    {
        if (!modules.Any())
        {
            modules = await Db.Widgets.Where(x => x.Title == nameof(WidgetFilter.Module)).ToListAsync();
        }

        if (value is null or "")
        {
            return modules;
        }

        return modules.Where(x => x.Description.Contains(value, StringComparison.OrdinalIgnoreCase));
    }

    void OnMarkdownValueChanged(string value)
    {
        model.Details = value;
    }
}
