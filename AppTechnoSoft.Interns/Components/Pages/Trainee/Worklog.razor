@page "/logwork"

@inject ApplicationDbContext Db
@inject NavigationManager Navigation
@inject ISnackbar SnackBar

<PageTitle>Log Tasks</PageTitle>

@if (studentModel is null)
{
    <ApplicationAlert Text="Please complete your registration proces first." Navigation="/apply" />
}
else if (studentModel.Status == Status.Applied)
{
    <ApplicationAlert Text="You are not yet assiged to any batch. Please bear with us, we are regrouping you to appropriate training batch." />
}
else
{
    <MudTabs Outlined>
        <MudTabPanel Text="Daily Tasks" Icon="@Icons.Material.Sharp.AddTask">
            <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
                <MudCard Class="p-2">
                    <MudCardContent>
                        <MudGrid>
                            <MudItem md="4" xs="12">
                                <MudText Align="Align.Center" Typo="Typo.h6" Class="mb-2">Today</MudText>
                                <MudText Align="Align.Center" Typo="Typo.h3" Class="mb-2">@model.Date.ToLongDateString()</MudText>
                            </MudItem>
                            <MudItem md="4" sm="12" Style="text-align:center">
                                <MudText Align="Align.Center" Typo="Typo.h6" Class="mb-2">Punchin Time</MudText>
                                <MudText Align="Align.Center" Typo="Typo.h2" Class="mb-2">
                                    @(PunchInEmpty ? "00:00" : PunchInNepalTime)
                                </MudText>
                                <MudButton StartIcon="@Icons.Material.Sharp.PunchClock" OnClick="PunchIn"
                                           Variant="Variant.Filled" Color="Color.Tertiary" Disabled="@logExists">
                                    Punch In
                                </MudButton>
                            </MudItem>
                            <MudItem md="4" sm="12">
                                <MudText Align="Align.Center" Typo="Typo.h6" Class="mb-2">Punchout Time</MudText>
                                <MudText Align="Align.Center" Typo="Typo.h2" Class="mb-2">
                                    @(PunchOutEmpty ? "00:00" : PunchOutNepalTime)
                                </MudText>
                            </MudItem>                           
                        </MudGrid>
                        <MudTextField Variant="Variant.Outlined" Label="Add task summary" Lines="5" Class="mt-6"
                                      @bind-Value="@model.WorkLog" Immediate />
                    </MudCardContent>
                    <MudCardActions>
                        <MudText Typo="Typo.h6" Class="ml-auto">
                            Work Hours - @WorkHours
                        </MudText>
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Tertiary"
                                   Class="ml-auto" StartIcon="@Icons.Material.Sharp.DoneOutline" 
                                   Disabled="@(model.WorkLog is null or "")">
                            Punchout
                        </MudButton>
                    </MudCardActions>
                </MudCard>
            </EditForm>
        </MudTabPanel>
        <MudTabPanel Text="Attendance History" Icon="@Icons.Material.Filled.History" OnClick="LoadAttendances">
            <MudTable Items="@allAttendances" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@loading"
                      LoadingProgressColor="Color.Secondary" Context="attendance">
                <HeaderContent>
                    <MudTh>Date</MudTh>
                    <MudTh>PunchIn</MudTh>
                    <MudTh>PunchOut</MudTh>
                    <MudTh>Task Done</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Date">@attendance.Date</MudTd>
                    <MudTd DataLabel="PunchIn">@attendance.PunchIn</MudTd>
                    <MudTd DataLabel="PunchOut">@attendance.PunchOut</MudTd>
                    <MudTd DataLabel="WorkLog">@attendance.WorkLog</MudTd>
                </RowTemplate>
            </MudTable>
        </MudTabPanel>
    </MudTabs>
}

@code {

    private Attendance model = new();
    private Student? studentModel;
    bool logExists = false;
    List<Attendance> allAttendances = new();
    bool loading = false;
    private TimeOnly PunchInNepalTime => model.PunchIn.ToNepalTime(model.Date);
    private TimeOnly PunchOutNepalTime => model.PunchOut.ToNepalTime(model.Date);
    private bool PunchInEmpty => model.PunchIn == null || model.PunchIn == TimeOnly.MinValue;
    private bool PunchOutEmpty => model.PunchOut == null || model.PunchOut == TimeOnly.MinValue;
    private string WorkHours => PunchOutEmpty ? "No Punch Out Yet" : (model!.PunchOut - model!.PunchIn)!.Value.Humanize(2);

    [CascadingParameter]
    private Task<AuthenticationState> AuthTask { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        var userTask = await AuthTask;
        var loggedInUser = userTask.User;
        var loggedInUserId = loggedInUser.GetUserId();

        if (loggedInUserId is null or "")
        {
            Navigation.NavigateTo("/Account/Login");
        }

        studentModel = await Db.Students.FirstOrDefaultAsync(x => x.ApplicationUserId == loggedInUserId);

        if (studentModel == null)
            return;

        (logExists, model) = await FetchLog(studentModel.Id, DateTime.UtcNow);
    }

    private async Task<(bool, Attendance)> FetchLog(string studentId, DateTime? dateTime)
    {
        if (dateTime is null || dateTime == default)
            return (false, new());

        var date = DateOnly.FromDateTime(dateTime.Value);
        var model = await Db.Attendances.FirstOrDefaultAsync(x => x.StudentId == studentId && x.Date == date);

        if (model == null)
            return (false, new());

        return (true, model);
    }

    private async Task OnValidSubmit(EditContext context)
    {
        if (model.StudentId is null || model.Date == default)
            return;

        model.PunchOut = TimeOnly.FromDateTime(DateTime.UtcNow);

        if (logExists)
        {
            Db.Attendances.Update(model);
        }
        else
        {
            Db.Attendances.Add(model);
        }

        var rowsAffected = await Db.SaveChangesAsync();

        if (rowsAffected > 0)
        {
            SnackBar.Add($"Your task added for {model.Date}", Severity.Success);
        }
        else
        {
            SnackBar.Add("Couldn't add your task.", Severity.Error);
        }
    }

    private async Task LoadAttendances()
    {
        loading = true;
        allAttendances = await Db.Attendances.Where(x => x.StudentId == model.StudentId).ToListAsync();
        loading = false;
    }

    private async Task PunchIn()
    {
        var utcNow = DateTime.UtcNow;
        var timeNow = TimeOnly.FromDateTime(utcNow);
        var dateToday = DateOnly.FromDateTime(utcNow);

        var rowsUpdated = 0;
        if (logExists)
        {
            rowsUpdated = await Db.Attendances
                .Where(x => x.StudentId == studentModel!.Id && x.Date == dateToday)
                .ExecuteUpdateAsync(x => x.SetProperty(y => y.PunchIn, timeNow));
        }
        else
        {
            model = new Attendance
                {
                    Date = dateToday,
                    StudentId = studentModel!.Id,
                    PunchIn = timeNow
                };

            Db.Attendances.Add(model);
            rowsUpdated = await Db.SaveChangesAsync();
        }

        if (rowsUpdated > 0)
        {
            SnackBar.Add($"Punchin successful for {model.Date}", Severity.Success);
            logExists = true;
        }
        else
        {
            SnackBar.Add("Punchin failed", Severity.Error);
        }
    }
}
