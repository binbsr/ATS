@page "/logwork"

@inject ApplicationDbContext Db
@inject NavigationManager Navigation
@inject ISnackbar SnackBar

<PageTitle>Log Tasks</PageTitle>

@if (studentModel is null)
{
    <ApplicationAlert />
}
else
{
    <MudTabs Outlined>
     <MudTabPanel Text="Daily Tasks" Icon="@Icons.Material.Sharp.AddTask">
         <EditForm Model="@viewModel" OnValidSubmit="OnValidSubmit">
             <DataAnnotationsValidator />
             <MudCard Class="p-2">
                 <MudCardContent>
                     <MudGrid>
                         <MudItem md="4" xs="12">
                             <MudText Align="Align.Center" Typo="Typo.h6" Class="mb-2">Log Date</MudText>
                             <MudDatePicker Label="Date"
                                            Date="viewModel.Date"
                                            DateChanged="SelectionDateChanged"
                                            PickerVariant="PickerVariant.Static"
                                            Color="Color.Secondary"
                                            Orientation="Orientation.Landscape"
                                            IsDateDisabledFunc="ShouldDisableDates"
                                            AdditionalDateClassesFunc="@((DateTime dt)=>((int)dt.DayOfWeek == 0 ? "red-text text-accent-4" : ""))" />
                         </MudItem>
                         <MudItem md="4" sm="12">
                             <MudText Align="Align.Center" Typo="Typo.h6" Class="mb-2">Punchin Time</MudText>
                             <MudTimePicker AmPm @bind-Time="viewModel.PunchIn" PickerVariant="PickerVariant.Static" Color="Color.Secondary" />
                             </MudItem>
                             <MudItem md="4" sm="12">
                                 <MudText Align="Align.Center" Typo="Typo.h6" Class="mb-2">Punchout Time</MudText>
                                 <MudTimePicker AmPm @bind-Time="viewModel.PunchOut" PickerVariant="PickerVariant.Static" Color="Color.Secondary" />
                             </MudItem>
                             <MudItem md="8" sm="12">
                                 <MudText Color="Color.Info" Typo="Typo.h6">NOTE: You can log work for today and last 2 days in case you missed.</MudText>
                             </MudItem>
                             <MudItem md="4" sm="12">
                                 <MudText Align="Align.Right" Color="Color.Info" Typo="Typo.h6">@viewModel.Date!.Value.ToShortDateString() - @((viewModel!.PunchOut - viewModel!.PunchIn)!.Value.ToString(@"hh\:mm")) WorkHrs</MudText>
                            </MudItem>
                        </MudGrid>
                        <MudTextField Variant="Variant.Outlined"
                                      Label="Add task summary"
                                      Lines="5"
                                      Class="mt-3"
                                      @bind-Value="viewModel.Task"
                                      For="@(() => viewModel.Task)"
                                        Immediate />
                     </MudCardContent>
                     <MudCardActions>
                         <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" StartIcon="@Icons.Material.Sharp.Save">
                             @(logExists ? "Save" : "Punchout")
                         </MudButton>
                     </MudCardActions>
                 </MudCard>
             </EditForm>
         </MudTabPanel>
         <MudTabPanel Text="Attedance History" Icon="@Icons.Material.Filled.History" OnClick="LoadAttendances">
             <MudTable Items="@allAttendances" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@loading" LoadingProgressColor="Color.Secondary">
                 <HeaderContent>
                     <MudTh>Date</MudTh>
                     <MudTh>PunchIn</MudTh>
                     <MudTh>PunchOut</MudTh>
                     <MudTh>Task Done</MudTh>
                 </HeaderContent>
                 <RowTemplate>
                     <MudTd DataLabel="Nr">@context.Date</MudTd>
                     <MudTd DataLabel="Sign">@context.PunchIn</MudTd>
                     <MudTd DataLabel="Name">@context.PunchOut</MudTd>
                     <MudTd DataLabel="Molar mass">@context.WorkLog</MudTd>
                 </RowTemplate>
             </MudTable>
         </MudTabPanel>
    </MudTabs>
}

@code {

    private AttendanceViewModel viewModel = null!;
    private Student studentModel = null!;
    bool logExists = false;
    List<Attendance> allAttendances = new();
    bool loading = false;

    [CascadingParameter]
    private Task<AuthenticationState> AuthTask { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        var userTask = await AuthTask;
        var loggedInUser = userTask.User;
        var loggedInUserId = loggedInUser?.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value ?? "";

        if (loggedInUserId is null or "")
        {
            Navigation.NavigateTo("/Account/Login");
        }

        studentModel = await Db.Students.FirstOrDefaultAsync(x => x.ApplicationUserId == loggedInUserId) ?? new();

        viewModel = new()
            {
                StudentId = studentModel!.Id,
                Date = DateTime.Today,
                PunchIn = DateTime.Now.TimeOfDay,
                PunchOut = DateTime.Now.TimeOfDay
            };

        (logExists, viewModel) = await FetchLog(viewModel.Date);
    }

    private async Task SelectionDateChanged(DateTime? selectedDate)
    {
        viewModel.Date = selectedDate;
        (logExists, viewModel) = await FetchLog(selectedDate);
    }

    private async Task<(bool, AttendanceViewModel)> FetchLog(DateTime? dateTime)
    {
        if (dateTime is null || dateTime == default)
            return (false, viewModel);            

        var date = DateOnly.FromDateTime(dateTime.Value);
        var m = await Db.Attendances.AsNoTracking().FirstOrDefaultAsync(x => x.Date == date);
        if (m is null)
            return (false, viewModel);

        // Mutate viewmodel
        viewModel = m.ToViewModel();
        return (true, viewModel);
    }

    private async Task OnValidSubmit(EditContext context)
    {
        if (viewModel.StudentId is null || viewModel.Date == default)
            return;

        var model = viewModel.ToModel();

        if (logExists)
            Db.Attendances.Update(model);
        else
            Db.Attendances.Add(model);

        var rowsAffected = await Db.SaveChangesAsync();

        if (rowsAffected > 0)
        {
            SnackBar.Add($"Your worklog added for {model.Date}", Severity.Success);
        }
        else
        {
            SnackBar.Add("Couldn't add your worlog.", Severity.Error);
        }
    }

    private async Task LoadAttendances()
    {
        loading = true;
        allAttendances = await Db.Attendances.Where(x => x.StudentId == viewModel.StudentId).ToListAsync();
        loading = false;
    }

    private bool ShouldDisableDates(DateTime dt) =>
        dt > DateTime.Today         // Future dates
        || (DateTime.Today >= dt.AddDays(3).Date)  // Last 3 days including today
        || (int)dt.DayOfWeek == 0   // Sunday
        || (int)dt.DayOfWeek == 6;  // Saturday
}
