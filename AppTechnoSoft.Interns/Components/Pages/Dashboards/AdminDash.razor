@using ApexCharts

@inject IDbContextFactory<ApplicationDbContext> DbFactory

@if (loadingData)
{
    <MudText Align="MudBlazor.Align.Center">
        <MudProgressCircular Indeterminate Color="MudBlazor.Color.Tertiary" Size="MudBlazor.Size.Medium" />
    </MudText>
}
else
{
    <MudText Align="MudBlazor.Align.Center" Typo="Typo.h6" Class="border-double border-b-4 mud-border-tertiary my-3 mb-5">Admin Profile</MudText>
    <MudGrid>
        <MudItem md="4">
            <MudPaper Elevation="5" Class="pa-5">
                <ApexChart TItem="StudentByProgramAggregate"
                           Title="Trainees by programs"
                           Options="options">

                    <ApexPointSeries TItem="StudentByProgramAggregate"
                                     Items="studentsByPrograms"
                                     SeriesType="SeriesType.Donut"
                                     Name="Tech Program"
                                     XValue="@(e => e.Program)"
                                     YAggregate="@(e => e.Sum(d => d.Students.Count))"
                                     OrderByDescending="e=>e.Y" />
                </ApexChart>
            </MudPaper>
        </MudItem>

        <MudItem md="4">
            <MudPaper Elevation="5" Class="pa-5">
                <ApexChart TItem="StudentByStatusAggregate"
                           Title="Trainees by status"
                           Options="optionsStatus">

                    <ApexPointSeries TItem="StudentByStatusAggregate"
                                     Items="studentsByStatus"
                                     SeriesType="SeriesType.Donut"
                                     Name="Tech Program"
                                     XValue="@(e => e.Status)"
                                     YAggregate="@(e => e.Sum(d => d.Students.Count))"
                                     OrderByDescending="e=>e.Y" />
                </ApexChart>
            </MudPaper>
        </MudItem>

        <MudItem md="12">
            <MudPaper Elevation="5" Class="pa-5">
                <MudText Typo="Typo.h6" Align="MudBlazor.Align.Center" Class="mb-5">Applied students list by their competency levels</MudText>
                <MudExpansionPanels MultiExpansion>
                    @foreach (var group in appliedStudentsByCompentencies)
                    {
                        <MudExpansionPanel Style="font-weight:bold;"
                                           Text="@($"{group.Competency} - {group.Students.Count} people")">
                            <MudList>
                                @foreach (var student in group.Students)
                                {
                                    <MudListItem Dense="true">
                                        <MudImage Src="@(student.ProfileImagePath is null or "" ? "favicon.png" : student.ProfileImagePath)" Class="mr-3 rounded" Height="36" />
                                        @($"{student.Name} ({student.TechProgram!.Name}, {student.College!.Name})")
                                    </MudListItem>
                                }
                            </MudList>
                        </MudExpansionPanel>
                    }
                </MudExpansionPanels>
            </MudPaper>
        </MudItem>
    </MudGrid>
}

@code {

    bool loadingData = false;

    private record StudentByProgramAggregate(string Program, List<Student> Students);
    private record StudentByStatusAggregate(string Status, List<Student> Students);
    private record StudentByCompetencyAggregate(string Competency, List<Student> Students);

    private IEnumerable<StudentByProgramAggregate> studentsByPrograms = [];
    private IEnumerable<StudentByStatusAggregate> studentsByStatus = [];
    private ApexChartOptions<StudentByProgramAggregate> options { get; set; } = new();
    private ApexChartOptions<StudentByStatusAggregate> optionsStatus { get; set; } = new();

    private IEnumerable<StudentByCompetencyAggregate> appliedStudentsByCompentencies = [];

    protected override async Task OnInitializedAsync()
    {
        loadingData = true;
        var plotOptions = new PlotOptions
            {
                Pie = new PlotOptionsPie
                {
                    Donut = new PlotOptionsDonut
                    {
                        Labels = new DonutLabels
                        {
                            Total = new DonutLabelTotal { FontSize = "24px", Color = "#D807B8", Formatter = @"function (w) {return w.globals.seriesTotals.reduce((a, b) => { return (a + b) }, 0)}" }
                        }
                    }
                }
            };

        options.PlotOptions = plotOptions;
        optionsStatus.PlotOptions = plotOptions;

        using var Db = DbFactory.CreateDbContext();
        var allStudents = await Db.Students.Include(x => x.TechProgram).Include(y => y.College).ToListAsync();

        if (allStudents is null || !allStudents.Any())
        {
            loadingData = false;
            return;
        }

        // Group by programs
        studentsByPrograms = allStudents
           .GroupBy(x => new { x.TechProgram!.Name, x.TechProgram.Affliation })
           .Select(y => new StudentByProgramAggregate($"{y.Key.Name}({y.Key.Affliation})", y.ToList()));

        // Group students by stage
        studentsByStatus = allStudents
            .GroupBy(x => x.Status)
            .Select(y => new StudentByStatusAggregate(y.Key.ToString(), y.ToList()));

        // Group by compentences
        var appliedGroups = allStudents
            .GroupBy(x => new { x.GeneralProgramming, x.WebExperience, x.DbExperience });

        appliedStudentsByCompentencies = appliedGroups
            .Select(x => new StudentByCompetencyAggregate($"{x.Key.GeneralProgramming}, {x.Key.WebExperience}, {x.Key.DbExperience}", x.ToList()));

        loadingData = false;
    }
}
