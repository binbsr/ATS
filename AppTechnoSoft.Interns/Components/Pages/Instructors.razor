@page "/instructors"

@inject IDbContextFactory<ApplicationDbContext> DbFactory

<PageTitle>Instructors</PageTitle>

<TagFilter TagDescription="@FIlterTagCategory.InstructorExpertise"
           FilterTriggered="FilterChanged"
           FilterHelpText="Click on tags below to filter instructors and trainers by their expertise." />
<MudGrid Class="pt-3">
    @foreach (var instructor in instructorFiltered)
    {
        <MudItem xl="3" lg="4" md="6" sm="6" xs="12">
            <MudCard>
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudContainer Class="d-flex justify-center">
                            <MudAvatar Style="height:220px; width:220px; font-size:3rem;" Elevation="5">
                                <MudImage Src="@instructor.ProfilePath" />
                            </MudAvatar>
                        </MudContainer>
                    </CardHeaderContent>
                    <CardHeaderActions>
                        <AuthorizeView Roles="@Role.Admins">
                            <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Warning" Size="Size.Small" Class="ml-auto" Href="@("/edit-instructor/"+instructor.Id)" />
                        </AuthorizeView>
                    </CardHeaderActions>
                </MudCardHeader>
                <MudCardContent>
                    <MudText Typo="Typo.h5" Align="Align.Center">@instructor.Name</MudText>
                    <MudText Typo="Typo.h6" Align="Align.Center" Color="Color.Secondary">@instructor.Role</MudText>
                    <MudText Typo="Typo.h6" Align="Align.Center">@instructor.Organization</MudText>
                    <MudText Typo="Typo.body1" Class="mt-4" Style="text-align:justify">@instructor.Resume</MudText>
                    <AuthorizeView Roles="@Role.Admins">
                        <MudList DisableGutters Dense>
                            <MudListItem Icon="@Icons.Material.Sharp.Email">@(instructor.Email ?? "None")</MudListItem>
                            <MudListItem Icon="@Icons.Material.Sharp.Phone">@(instructor.Phone ?? "None")</MudListItem>
                            <MudListItem title="Other details" Icon="@Icons.Material.Sharp.Details">@(instructor.OtherDetails ?? "None")</MudListItem>
                        </MudList>
                    </AuthorizeView>
                </MudCardContent>
                <MudCardActions>
                    <MudContainer Class="p-0">
                        @foreach (var tag in instructor.Tags!)
                        {
                            <MudChip Style="@("background:" + tag.ColorCode)" Class="text-white">@tag.Name</MudChip>
                        }
                    </MudContainer>
                </MudCardActions>
            </MudCard>
        </MudItem>
    }
</MudGrid>

@code {

    [CascadingParameter]
    private Task<AuthenticationState> AuthTask { get; set; } = null!;

    private List<Instructor> instructors = new();
    private List<Instructor> instructorFiltered = [];

    protected override async Task OnInitializedAsync()
    {
        var state = await AuthTask;
        using var Db = DbFactory.CreateDbContext();

        if (state?.User is not null && (state.User.IsInRole(Role.Admin) || state.User.IsInRole(Role.SuperAdmin)))
        {
            instructors = await Db.Instructors.Include(x => x.Tags).ToListAsync();
        }
        else
        {
            instructors = await Db.Instructors.Include(x => x.Tags).Where(y => y.Publish).ToListAsync();
        }

        instructorFiltered = instructors;
    }

    private void FilterChanged(List<string> filterTexts)
    {
        if (filterTexts is null or [])
        {
            instructorFiltered = instructors;
        }
        else
        {
            instructorFiltered = instructors.Where(x => x.Tags!.Any(y => filterTexts.Contains(y.Name))).ToList();
        }
    }
}
