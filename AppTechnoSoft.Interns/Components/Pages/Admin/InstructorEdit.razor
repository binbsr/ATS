@page "/add-instructor"
@page "/edit-instructor/{Id:int}"

@inject ApplicationDbContext Db
@inject ISnackbar SnackBar
@inject NavigationManager Navigation

<PageTitle>@pageTitle</PageTitle>

    <EditForm Model="@model" OnValidSubmit="OnValidSubmit" Context="formContext">
        <MudTextField Label="Title" @bind-Value="model.Name" />
        <MudTextField Label="Resume Summary" Lines="6" Class="mt-3" @bind-Value="model.Resume" />
        <MudTextField Label="Professional Role" Class="mt-3" @bind-Value="model.Role" />
        <ImageUpload ExistingImagePath="@model.ProfilePath" ImageChanged="ProfileChanged" Label="Instructor Profile Image"/>
        <MudSelect T="Tag"
                   Label="Tags"
                   MultiSelection="true"
                   @bind-SelectedValues="@tagsSelected"
                   Class="mb-3"
                   MultiSelectionTextFunc="@(new Func<List<string>, string>(GetMultiSelectionText))"
                   AnchorOrigin="Origin.BottomCenter">
            @foreach (var tag in tags)
            {
                <MudSelectItem Value="@tag">@tag.Name</MudSelectItem>
            }
        </MudSelect>
        <MudSwitch @bind-Value="@model.Publish" Color="Color.Success" UnCheckedColor="Color.Error" Label="Show this profile publicly" />

        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="mt-3" StartIcon="@Icons.Material.Filled.Save">Save Instructor</MudButton>
</EditForm>

@code {

    [Parameter]
    public int? Id { get; set; }

    Instructor model = new();
    List<Tag> tags = new();
    IEnumerable<Tag> tagsSelected = [];
    string pageTitle = string.Empty;
    bool IsAdd => Id is null or 0;

    protected override async Task OnInitializedAsync()
    {
        tags = await Db.Tags.ToListAsync();

        if (IsAdd)
        {
            pageTitle = "Add Instructor";
        }
        else
        {
            pageTitle = "Edit Instructor";
            model = await Db.Instructors.Include(x => x.Tags).FirstAsync(x => x.Id == Id);
            tagsSelected = model?.Tags ?? [];
        }
    }

    private async Task OnValidSubmit(EditContext context)
    {
        // Save instructor profile image first if it's uploaded
        if (model.Profile is not null)
        {
            var file = model.Profile;
            try
            {
                var fileName = Path.GetRandomFileName();
                var relativeAssetPath = $"profile_uploads/{fileName}_{file.Name}";
                var currentAppPath = Environment.CurrentDirectory;
                var path = Path.Combine(currentAppPath, "wwwroot", relativeAssetPath);

                await using FileStream fs = new(path, FileMode.Create);
                await file.OpenReadStream().CopyToAsync(fs);
                model.ProfilePath = relativeAssetPath;
            }
            catch (Exception ex)
            {
                Console.WriteLine("File: {Filename} Error: {Error}",
                    file.Name, ex.Message);
            }
        }

        model.Tags = tagsSelected.ToList();

        if (IsAdd)
        {
            Db.Instructors.Add(model);
        }
        else
        {
            model.Id = Id!.Value;
            Db.Instructors.Update(model);
        }

        var rowsAffected = await Db.SaveChangesAsync();

        if (rowsAffected > 0)
        {
            SnackBar.Add("Instructor saved successfully", Severity.Success);
            Navigation.NavigateTo("/instructors");
        }
        else
        {
            SnackBar.Add("Instructor save failed", Severity.Error);
        }
    }

    private string GetMultiSelectionText(List<string> selectedValues)
    {
        return $"{selectedValues.Count} tag{(selectedValues.Count > 1 ? "s have" : " has")} been selected";
    }

    private void ProfileChanged(IBrowserFile file)
    {
        model.Profile = file;
    }
}
