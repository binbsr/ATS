@page "/trainee/{Id}"

@inject ApplicationDbContext Db

<PageTitle>ATS Profile - @(trainee?.Name ?? "Trainee")</PageTitle>

@if (trainee is null)
{
    <MudProgressLinear Indeterminate Color="Color.Tertiary" />
}
else
{
    <MudStack Row Justify="Justify.Center" AlignItems="AlignItems.Center" Spacing="16" Class="mb-4">
        <MudText Typo="Typo.h5" Color="Color.Secondary">@trainee.Name</MudText>
        <MudAvatar Style="height:128px; width:128px;">
            <MudImage Src="@trainee.AvatarPath" />
        </MudAvatar>
        <MudText Typo="Typo.h5" Color="Color.Info">
            Student of @trainee.Program
            <MudText Typo="Typo.body1">
                From @trainee.College
            </MudText>
        </MudText>
    </MudStack>

    <Accomplishment TraineeData="@trainee" />
}

@code {

    [Parameter]
    public string Id { get; set; } = null!;

    private TraineeViewModel trainee = null!;

    protected override async Task OnInitializedAsync()
    {
        var student = await Db.Students
            .Where(y => y.Id == Id)
            .Select(x => new
            {
                Id = x.Id,
                Name = x.Name,
                Status = x.Status,
                AvatarPath = x.ProfileImagePath,
                Program = $"{x.TechProgram!.Name} ({x.TechProgram.Affliation})",
                College = $"{x.College!.Name}, {x.College.Location}"
            })
            .FirstOrDefaultAsync();

        trainee = new TraineeViewModel(student!.Id, student.Name, student.AvatarPath ?? "/person.png", student.Program, student.College)
            {
                Status = student.Status
            };
    }
}
