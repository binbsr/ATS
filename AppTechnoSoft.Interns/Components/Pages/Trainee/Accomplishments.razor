@page "/accomplishments"

@inject ApplicationDbContext Db

<PageTitle>Accomplishments</PageTitle>
@if (trainee is null)
{
    <ApplicationAlert Text="You have not yet applied for AppSoft traineeship." Navigation="/apply" />
}
else
{
    <MudText Align="Align.Center">
        <MudLink Href="@($"/trainee/{trainee.Id}")" Target="_blank" Style="font-size:1.5rem">Share Profile <MudIcon Icon="@Icons.Material.Sharp.OpenInNew" /></MudLink>
    </MudText>
    <Accomplishment TraineeData="@trainee" />
}

@code {

    [CascadingParameter]
    private Task<AuthenticationState> AuthTask { get; set; } = null!;

    private TraineeViewModel trainee = null!;

    protected override async Task OnInitializedAsync()
    {
        var state = await AuthTask;
        var loggedInUserId = state.User.GetUserId();    
        
        var student = await Db.Students
            .Where(y => y.ApplicationUserId == loggedInUserId)
            .Select(x => new
            {
                Id = x.Id,
                Name = x.Name,
                Status = x.Status,
                AvatarPath = x.ProfileImagePath,
                Program = $"{x.TechProgram!.Name} ({x.TechProgram.Affliation})",
                College = $"{x.College!.Name}, {x.College.Location}"
            })
            .FirstOrDefaultAsync();

        if (student is null)
            return;

        trainee = new TraineeViewModel(student.Id, student.Name, student.AvatarPath ?? "/favicon.png", student.Program, student.College)
            {
                Status = student.Status
            };
    }
}