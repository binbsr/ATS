<MudExpansionPanel @bind-IsExpanded="isOpen" HideIcon Dense>
    <TitleContent>
        <div class="d-flex">
            <MudIcon Icon="@(isOpen ? Icons.Material.Sharp.HorizontalRule : Icons.Material.Sharp.Add)" Class="mr-2"></MudIcon>
            <MudText Style="font-size:1.1rem;font-weight:500;">@Widget.Description</MudText>
            <MudText Class="ml-auto mt-2" Typo="Typo.body2">Updated @((Widget.LastUpdated ?? Widget.Created).Humanize())</MudText>
            <AuthorizeView Roles="@($"{Role.Admin},{Role.SuperAdmin}")">
                <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Warning" Size="Size.Small" Href="@EditUrl" />
                <MudIconButton Icon="@Icons.Material.Sharp.Delete" Size="Size.Small" Color="Color.Error" OnClick="() => ConfirmDelete()" />
                <MudMessageBox @ref="mbox" Title="Warning" CancelText="Cancel">
                    <MessageContent>
                        Are you sure to delete this module? It can't be undone!
                    </MessageContent>
                    <YesButton>
                        <MudButton Variant="Variant.Filled" Color="Color.Error" Class="ml-2 mb-2 mr-3" StartIcon="@Icons.Material.Filled.DeleteForever">Delete</MudButton>
                    </YesButton>
                </MudMessageBox>
            </AuthorizeView>
        </div>
    </TitleContent>
    <ChildContent>
        <MudContainer Style="font-size: 1.3em">
            @((MarkupString)Widget.HtmlContent.ToHtmlString())
        </MudContainer>
        <MudChipSet T="Tag">
            @foreach (var tag in Widget.Tags ?? [])
            {
                <MudChip Value="@tag" Style="@("background:" + tag.ColorCode ?? "")" Class="text-white">@tag.Name</MudChip>
            }
        </MudChipSet>
    </ChildContent>
</MudExpansionPanel>

@code {

    [Parameter]
    public Widget Widget { get; set; } = new();

    [Parameter]
    public EventCallback<Widget> DeleteCallBack { get; set; }

    public string EditUrl => $"/edit-widget/{Widget.Id}";
    bool isOpen = true;
    MudMessageBox mbox { get; set; } = null!;

    private async Task ConfirmDelete()
    {
        bool? result = await mbox.ShowAsync();
        if (result == null)
            return;

        await DeleteCallBack.InvokeAsync(Widget);
    }
}
