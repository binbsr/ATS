@page "/attendance"

@attribute [Authorize(Roles = Role.Admins)]

@inject ApplicationDbContext Db

<PageTitle>Timesheet Details</PageTitle>

<MudDataGrid T="Attendance"
             MultiSelection="true"
             Items="@attendances"
             SortMode="SortMode.Multiple"
             Filterable="true"
             Hover="true"
             Groupable="true"
             QuickFilter="@_quickFilter"
             Loading="loadingData"
             Hideable="true"
             Dense="true">

    <ToolBarContent>
        <MudText Typo="Typo.h6">Attendances</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <Columns>
        <TemplateColumn Title="#">
            <CellTemplate>
                @(attendances.IndexOf(context.Item) + 1)
            </CellTemplate>
        </TemplateColumn>
        <PropertyColumn Property="x => x.Date" Grouping />
        <PropertyColumn Property="x => x.PunchIn.ToNepalTime(x.Date)" />
        <PropertyColumn Property="x => x.PunchOut.ToNepalTime(x.Date)" />
        <TemplateColumn Title="Hours">
            <CellTemplate>
                @{
                    var punchoutEmpty = context.Item.PunchOut == null
                    || context.Item.PunchOut.ToNepalTime(context.Item.Date) == TimeOnly.MinValue;
                }
                @(punchoutEmpty ? "No punch out" : (context.Item!.PunchOut - context.Item!.PunchIn)!.Value.Humanize(2))
            </CellTemplate>
        </TemplateColumn>
        <PropertyColumn Property="x => x.WorkLog" Title="Task" />
        <PropertyColumn Property="x => x.Student.Name" Title="Name" />
        <TemplateColumn Title="Team">
            <CellTemplate>
                @(context.Item.Student?.Team?.Name ?? "Not Assigned")
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="Attendance" PageSizeOptions="[20, 50, 100, 200]" />
    </PagerContent>
</MudDataGrid>


@code {

    List<Attendance> attendances = [];
    private string _searchString = string.Empty;
    private bool loadingData = false;

    protected override async Task OnInitializedAsync()
    {
        loadingData = true;

        attendances = await Db.Attendances
            .Include(x => x.Student)
            .ThenInclude(x => x.Team)
            .OrderByDescending(x => x.Date)
            .ToListAsync();

        loadingData = false;
    }

    private Func<Attendance, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.Student.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Date.ToString().Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };
}
