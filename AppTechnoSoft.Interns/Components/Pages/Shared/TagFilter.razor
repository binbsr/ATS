@inject IDbContextFactory<ApplicationDbContext> DbFactory

@if (tags is null || tags.Count == 0)
{
    <MudProgressLinear Indeterminate />
}
else
{
    <MudPaper Class="border border-solid mud-border-tertiary pa-2" Elevation="5">
        @if(showFilterInfo)
        {
            <MudAlert Dense Severity="Severity.Info"
                      Style="font-size:1.2rem"
                      ContentAlignment="HorizontalAlignment.Center"
                      ShowCloseIcon="true"
                      CloseIconClicked="(() => showFilterInfo = false)">
                @FilterHelpText
            </MudAlert>
        }
        
        <MudChipSet Filter MultiSelection SelectedChipsChanged="FilterChanged">
            @foreach (var tag in tags)
            {
                <MudChip Text="@tag.Name" Style="@("background:" + tag.ColorCode ?? "")" Class="text-white"></MudChip>
            }
        </MudChipSet>
    </MudPaper>
}

@code {

    [Parameter]
    public required string TagDescription { get; set; }

    [Parameter]
    public EventCallback<List<string>> FilterTriggered { get; set; }

    [Parameter]
    public string FilterHelpText { get; set; } = "";

    public List<Tag> tags = [];
    private bool showFilterInfo = true;

    protected override async Task OnInitializedAsync()
    {
        if (TagDescription is null or "")
            return;

        using var Db = DbFactory.CreateDbContext();
        tags = await Db.Tags.Where(x => x.Description!.Contains(TagDescription)).ToListAsync();
    }

    private async Task FilterChanged(MudChip[] chips)
    {
        var filters = chips.Select(x => x.Text).ToList() ?? [];
        await FilterTriggered.InvokeAsync(filters);
    }
}
