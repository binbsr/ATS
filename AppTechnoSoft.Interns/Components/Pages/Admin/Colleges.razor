@page "/colleges"
@attribute [Authorize(Roles = Role.Admin)]
@inject ApplicationDbContext db
@inject ISnackbar SnackBar

<PageTitle>Colleges</PageTitle>

<MudTable Items="@CollegeList"
          Hover="true"
          Loading="loadingData"
          Dense="true">

    <ToolBarContent>
        <MudFab Href="/add-college" StartIcon="@Icons.Material.Filled.Add" Title="Add New College" Size="Size.Small" Color="Color.Tertiary"></MudFab>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Search by college name and location" Adornment="Adornment.Start" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>#</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Location</MudTh>
        <MudTh>Created</MudTh>
        <MudTh>Created By</MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="#">@(CollegeList.IndexOf(context) + 1)</MudTd>
        <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Location">@context.Location</MudTd>
            <MudTd DataLabel="Created By">
                <MudTooltip Text="@($"On {context.Created}")">
                    @context.CreatedBy
            </MudTooltip>
        </MudTd>
        <MudTd DataLabel="LastUpdated By">
            <MudTooltip Text="@($"On {context.LastUpdated}")">
                @context.LastUpdatedBy
            </MudTooltip>
        </MudTd>

        <MudTd>
            <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Small" Color="Color.Warning" Href="@("/edit-college/" + context.Id)" />
            <MudIconButton Icon="@Icons.Material.Sharp.Delete" Size="Size.Small" Color="Color.Error" OnClick="() => ConfirmDelete(context)" />
            <MudMessageBox @ref="mbox" Title="Warning" CancelText="Cancel">
                <MessageContent>
                    Are you sure to delete this college? It can't be undone.
                </MessageContent>
                <YesButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Material.Filled.DeleteForever">Delete!</MudButton>
                </YesButton>
            </MudMessageBox>
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions="[30, 50, 100, 200]" />
    </PagerContent>
</MudTable>

@code {
    private List<College> CollegeList = new List<College>();
    private string _searchString = string.Empty;
    private bool loadingData = false;
    MudMessageBox mbox { get; set; } = null!;

    private Func<College, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Location.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };

    protected override async Task OnInitializedAsync()
    {
        loadingData = true;
        CollegeList = await db.Colleges.ToListAsync();
        loadingData = false;
    }

    private async Task ConfirmDelete(College college)
    {
        bool? result = await mbox.Show();
        if (result == null)
            return;

        db.Colleges.Remove(college);

        var rowsAffected = await db.SaveChangesAsync();

        if (rowsAffected > 0)
        {
            SnackBar.Add("College Deleted successfully", Severity.Success);
            CollegeList.Remove(college);
        }
        else
        {
            SnackBar.Add("College Delete failed", Severity.Error);
        }
    }
}