@page "/"

@inject ApplicationDbContext db

<PageTitle>Home</PageTitle>

@if (homeItems is null || homeItems.Count == 0)
{
    <MudProgressCircular Indeterminate Color="Color.Tertiary" />
}
else
{
    var homeTitle = homeItems.FirstOrDefault(x => x.Title == nameof(WidgetFilter.HomeTitle));
    if (homeTitle is not null)
    {
        <MudText Typo="Typo.h4" Align="Align.Center">
            @homeTitle.Description
            <br />
            <MudIcon Icon="@Icons.Material.Sharp.Handshake" Style="height:50px;width:50px;" Color="Color.Tertiary" />
            <AuthorizeView Roles="@Role.Admins">
                <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Warning" Size="Size.Small" Class="ml-auto" Href="@("/edit-widget/" + homeTitle.Id)" />
            </AuthorizeView>
        </MudText>
        @((MarkupString)homeTitle.HtmlContent.ToHtmlString())        
    }
    <MudPaper Elevation="3" Class="mb-3">
        <MudCarousel Class="border border-solid mud-border-tertiary"
                     Style="height:500px;"
                     ShowArrows="@false"
                     ShowBullets="@true"
                     EnableSwipeGesture="@true"
                     TData="object">
            <BulletTemplate Context="selected">
                <div Class="mud-button-root mud-icon-button mud-icon-button-color-inherit mud-ripple mud-ripple-icon">
                    <span class="mud-icon-button-label">
                        <MudIcon Icon="@(selected ? Icons.Material.Filled.CheckCircle : Icons.Material.Filled.Circle)" Color="@Color.Tertiary" />
                    </span>
                </div>
            </BulletTemplate>
            <ChildContent>
                @foreach (var item in homeItems.Where(x => x.Title == nameof(WidgetFilter.CarouselItem)))
                {
                    <MudCarouselItem Transition="Transition.Slide" Class="d-flex align-center px-10">
                        @((MarkupString)item.HtmlContent.ToHtmlString())
                        <AuthorizeView Roles="@Role.Admins">
                            <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Warning" Size="Size.Small" Class="ml-auto" Href="@("/edit-widget/" + item.Id)" />
                        </AuthorizeView>
                    </MudCarouselItem>
                }
            </ChildContent>
        </MudCarousel>
    </MudPaper>

    <MudContainer Class="pa-5 my-4">
        <MudText Align="Align.Center">
            @for (var i = 0; i < 6; i++)
            {
                @if (i <= 2)
                {
                    <MudIcon Icon="@Icons.Material.Sharp.Girl" Style="font-size:3rem" />

                }
                else
                {
                    <MudIcon Icon="@Icons.Material.Sharp.Boy" Style="font-size:3rem" />
                }
            }
        </MudText>
        <MudText Typo="Typo.h4" Align="Align.Center" Color="Color.Warning">
            LET'S LEARN & CODE TOGETHER
        </MudText>
    </MudContainer>
    <MudGrid Spacing="1">
        @foreach (var item in homeItems.Where(x => x.Title == nameof(WidgetFilter.HomeIntro)))
        {
            var titleParts = item.Description.Split(["(", ")"], StringSplitOptions.RemoveEmptyEntries);

            <MudItem md="12">
                <MudPaper Elevation="3" Class="border border-solid mud-border-info">
                    <MudToolBar>
                        <MudAvatar Color="Color.Tertiary">@titleParts[0][0]</MudAvatar>
                        <span class="ml-3">
                            <MudText Typo="Typo.h6">@titleParts[0]</MudText>
                            @if (titleParts.Length > 1)
                            {
                                <MudText Typo="Typo.subtitle2">@titleParts[1]</MudText>
                            }
                        </span>
                        <MudSpacer />
                        <MudButton Href="/apply" Color="Color.Tertiary" StartIcon="@Icons.Material.Sharp.PersonAddAlt1">Apply Internship</MudButton>
                        <MudButton Href="/modules" Color="Color.Tertiary" StartIcon="@Icons.Material.Sharp.ViewModule">Training Modules</MudButton>
                        <AuthorizeView Roles="@Role.Admins">
                            <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Warning" Size="Size.Small" Class="ml-auto" Href="@("/edit-widget/" + item.Id)" />
                        </AuthorizeView>
                    </MudToolBar>
                    <div style="text-align:justify">
                        @((MarkupString)item.HtmlContent.ToHtmlString())
                    </div>
                </MudPaper>
            </MudItem>
        }
    </MudGrid>
}

<AuthorizeView Roles="@($"{Role.Admin},{Role.SuperAdmin}")">
    <MudText Typo="Typo.h6" Class="mt-6">Home Page Image References (Shown just to admins)</MudText>
    @foreach (var image in images)
    {
        <MudImage Src="@image" Alt="@image" Class="rounded-lg" Height="100" /> @image
    }
</AuthorizeView>


@code {
    private List<Widget> homeItems = [];
    private string[] images = [];

    [CascadingParameter]
    private Task<AuthenticationState> AuthTask { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        homeItems = await db.Widgets.Where(x => x.Title == nameof(WidgetFilter.CarouselItem) || x.Title == nameof(WidgetFilter.HomeIntro) || x.Title == nameof(WidgetFilter.HomeTitle)).ToListAsync();

        // Get all home images for reference
        var state = await AuthTask;
        if (state.User.IsInRole(Role.Admin) || state.User.IsInRole(Role.SuperAdmin))
        {
            var relativeAssetPath = $"homeitems";
            var currentAppPath = Environment.CurrentDirectory;
            var path = Path.Combine(currentAppPath, "wwwroot", relativeAssetPath);
            images = Directory.GetFiles(path).Select(x => relativeAssetPath + "/" + Path.GetFileName(x)).ToArray();
        }
    }
}
