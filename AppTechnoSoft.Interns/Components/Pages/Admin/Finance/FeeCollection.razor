@page "/feecollection"

@using System.Globalization
@attribute [Authorize(Roles = Role.SuperAdmin)]
@inject ApplicationDbContext db
@inject ISnackbar SnackBar

<PageTitle>Fee Accounts</PageTitle>

<MudDataGrid T="StudentFeeViewModel"
             MultiSelection="true"
             Items="@StudentFees"
             SortMode="SortMode.Multiple"
             Hover="true"
             QuickFilter="@_quickFilter"
             Loading="loadingData"
             Groupable="true"
             Hideable="true"
             ReadOnly="false"
             Dense="true"
             EditMode="DataGridEditMode.Form"
             EditTrigger="DataGridEditTrigger.Manual"
             CommittedItemChanges="@CommittedItemChanges">
    <ToolBarContent>
        <MudFab Href="/feecollection/add" StartIcon="@Icons.Material.Filled.Add" title="Add New Fee Account" Size="Size.Small" Color="Color.Tertiary"></MudFab>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <Columns>
        <TemplateColumn Editable="false" Sortable="false" Filterable="false" Groupable="false">
            <CellTemplate>
                <MudAvatar>
                    @if (context.Item.ProfileImagePath is null or "")
                    {
                        <MudIcon Icon="@Icons.Material.Outlined.Person2" />
                    }
                    else
                    {
                        <MudImage Src="@context.Item.ProfileImagePath"></MudImage>
                    }
                </MudAvatar>
            </CellTemplate>
        </TemplateColumn>
        <PropertyColumn Property="x => x.Name" Editable="false" Groupable="false" />
        <PropertyColumn Property="x => x.Batch" Editable="false" Title="Batch" Grouping="true">
            <FooterTemplate>Total</FooterTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.FeeAmount" Title="Fee" Format="C2" Culture="@(new CultureInfo("ne-NP"))" AggregateDefinition="FeeAggregation" />
        <TemplateColumn AggregateDefinition="DiscountAggregation" Title="Discount">
            <CellTemplate>
                @($"{context.Item.DiscountAmount?.AsCurrency()}({context.Item.Discount?.ToString("n2")}%)")
            </CellTemplate>
            <EditTemplate>
                <MudNumericField Variant="Variant.Outlined" @bind-Value="@context.Item.Discount" Label="Discount" />
            </EditTemplate>
        </TemplateColumn>
        <PropertyColumn Property="x => x.TotalAmount" Title="Total" Format="C2" Culture="@(new CultureInfo("ne-NP"))" Editable="false" AggregateDefinition="TotalFeeToPayAggregation" />
        <PropertyColumn Property="x => x.PaidAmount" Title="Paid" Format="C2" Culture="@(new CultureInfo("ne-NP"))" AggregateDefinition="TotalFeePaidAggregation" />
        <TemplateColumn Title="Remaining" Editable="false" AggregateDefinition="TotalRemainingAggregation">
            <CellTemplate>
                @((context.Item.TotalAmount - context.Item.PaidAmount)?.AsCurrency())
            </CellTemplate>
        </TemplateColumn>
        <PropertyColumn Property="x => x.AddedBy" Title="Added By" Editable="false" />
        <TemplateColumn Title="Account Status">
            <CellTemplate>
                @(context.Item.Enabled ? "Enabled" : "Disabled")
            </CellTemplate>
            <EditTemplate>
                <MudRadioGroup T="bool" @bind-Value="@context.Item.Enabled">
                    <MudRadio Value="@true" Color="Color.Secondary">Enabled</MudRadio>
                    <MudRadio Value="@false" Color="Color.Secondary">Disabled</MudRadio>
                </MudRadioGroup>
            </EditTemplate>
        </TemplateColumn>
        <TemplateColumn CellClass="d-flex justify-end">
            <CellTemplate>
                <MudIconButton Icon="@Icons.Material.Outlined.Edit" OnClick="@context.Actions.StartEditingItemAsync" />
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="StudentFeeViewModel" PageSizeOptions="[100, 200, 500]" />
    </PagerContent>
</MudDataGrid>

@code {

    [CascadingParameter]
    private Task<AuthenticationState> AuthTask { get; set; } = null!;

    private List<StudentFeeViewModel> StudentFees = [];
    private string _searchString = string.Empty;
    private bool loadingData = false;

    AggregateDefinition<StudentFeeViewModel> FeeAggregation = new()
        {
            Type = AggregateType.Custom,
            CustomAggregate = x =>
            {
                var totalFee = x.Sum(y => y.FeeAmount);
                return $"{totalFee?.AsCurrency()}";
            }
        };

    AggregateDefinition<StudentFeeViewModel> DiscountAggregation = new()
        {
            Type = AggregateType.Custom,
            CustomAggregate = x =>
            {
                var totalDiscountAmount = x.Sum(y => y.FeeAmount * y.Discount / 100);
                return $"{totalDiscountAmount?.AsCurrency()}";
            }
        };

    AggregateDefinition<StudentFeeViewModel> TotalFeeToPayAggregation = new()
        {
            Type = AggregateType.Custom,
            CustomAggregate = x =>
            {
                var totalTotalFeeToPayAmount = x.Sum(y => y.TotalAmount);
                return $"{totalTotalFeeToPayAmount?.AsCurrency()}";
            }
        };

    AggregateDefinition<StudentFeeViewModel> TotalFeePaidAggregation = new()
        {
            Type = AggregateType.Custom,
            CustomAggregate = x =>
            {
                var totalTotalFeePaidAmount = x.Sum(y => y.PaidAmount);
                return $"{totalTotalFeePaidAmount?.AsCurrency()}";
            }
        };

    AggregateDefinition<StudentFeeViewModel> TotalRemainingAggregation = new()
        {
            Type = AggregateType.Custom,
            CustomAggregate = x =>
            {
                var totalRemainingAmount = x.Sum(y => y.RemainingAmount);
                return $"{totalRemainingAmount?.AsCurrency()}";
            }
        };

    private Func<StudentFeeViewModel, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Email.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Phone.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };

    protected override async Task OnInitializedAsync()
    {
        loadingData = true;

        StudentFees = await db.FinAccounts
            .Include(s => s.Student)
            .ThenInclude(b => b.Batch)
            .AsNoTracking()
            .Select(x => x.ToViewModel()).ToListAsync();

        loadingData = false;
    }

    async Task CommittedItemChanges(StudentFeeViewModel item)
    {
        if (item is null)
            return;

        var state = await AuthTask;
        var userName = state.User.Identity?.Name;

        var account = item.ToModel();

        account.AddLastUpdatedStamps(userName);

        db.FinAccounts.Update(account);
        var rowsAffected = await db.SaveChangesAsync();

        if (rowsAffected > 0)
        {
            SnackBar.Add("Fee Account Saved Successfully", Severity.Success);
        }
        else
        {
            SnackBar.Add("Fee Account Save Failed", Severity.Error);
        }
    }
}
