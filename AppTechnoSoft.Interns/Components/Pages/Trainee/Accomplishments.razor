@page "/accomplishments"

@inject ApplicationDbContext Db

<PageTitle>Accomplishments</PageTitle>
@if (loading)
{
    <Loading />
}
else if (trainee is null)
{
    <ApplicationAlert Text="You have not yet applied for AppSoft traineeship." Navigation="/join" />
}
else
{
    <div class="mx-5">
        <MudText Align="Align.Center">
            <MudLink Href="@($"/profile/trainee/{trainee.Id}")" Target="_blank" Style="font-size:1.5rem">Share Profile <MudIcon Icon="@Icons.Material.Sharp.OpenInNew" /></MudLink>
        </MudText>
        <TraineeProgress Status="@trainee.Status" />
        <Accomplishment TraineeId="@trainee.Id" Batch="@trainee.BatchId" />
    </div>
}

@code {

    [CascadingParameter]
    private Task<AuthenticationState> AuthTask { get; set; } = null!;

    private TraineeViewModel trainee = null!;
    private IEnumerable<TraineeViewModel> trainees = [];
    bool loading;

    protected override async Task OnInitializedAsync()
    {
        loading = true;
        var state = await AuthTask;
        var loggedInUserId = state.User.GetUserId();

        var student = await Db.Students
            .Where(y => y.ApplicationUserId == loggedInUserId)
            .Select(x => new
            {
                Id = x.Id,
                Name = x.Name,
                Status = x.Status,
                AvatarPath = x.ProfileImagePath,
                BatchId = x.BatchId,
                Program = $"{x.TechProgram!.Name} ({x.TechProgram.Affliation})",
                College = $"{x.College!.Name}, {x.College.Location}"
            })
            .FirstOrDefaultAsync();

        if (student is null)
        {
            loading = false;
            return;
        }

        trainee = new TraineeViewModel(student.Id, student.Name, student.BatchId, student.Status, student.AvatarPath ?? "/person.png", student.Program, student.College);
        loading = false;
    }
}
