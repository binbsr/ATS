@page "/"

@inject ApplicationDbContext db

<PageTitle>Home</PageTitle>

@if (homeItems is null || homeItems.Count == 0)
{
    <MudProgressCircular />
}
else
{
    <MudPaper Elevation="3" Class="mb-3">
        <MudCarousel Class="border border-solid mud-border-tertiary"
                     Style="height:500px;"
                     ShowArrows="@false"
                     ShowBullets="@true"
                     EnableSwipeGesture="@true"
                     TData="object">
            <BulletTemplate Context="selected">
                <div Class="mud-button-root mud-icon-button mud-icon-button-color-inherit mud-ripple mud-ripple-icon">
                    <span class="mud-icon-button-label">
                        <MudIcon Icon="@(selected ? Icons.Material.Filled.CheckCircle : Icons.Material.Filled.Circle)" Color="@Color.Tertiary" />
                    </span>
                </div>
            </BulletTemplate>
            <ChildContent>
                @foreach (var item in homeItems.Where(x => x.Title == nameof(WidgetFilter.CarouselItem)))
                {
                    <MudCarouselItem Transition="Transition.Slide" Class="d-flex align-center px-10">
                        @((MarkupString)item.HtmlContent.ToHtmlString())
                        <AuthorizeView Roles="@Role.Admins">
                            <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Warning" Size="Size.Small" Class="ml-auto" Href="@("/edit-widget/" + item.Id)" />
                        </AuthorizeView>
                    </MudCarouselItem>
                }
            </ChildContent>
        </MudCarousel>
    </MudPaper>

    <MudGrid>
        @foreach (var item in homeItems.Where(x => x.Title == nameof(WidgetFilter.HomeIntro)))
        {
            var titleParts = item.Description.Split(["(", ")"], StringSplitOptions.RemoveEmptyEntries);

            <MudItem md="4" sm="12">
                <MudCard Elevation="3" Class="border border-solid mud-border-tertiary">
                    <MudCardHeader>
                        <CardHeaderAvatar>
                            <MudAvatar Color="Color.Error">@titleParts[0][0]</MudAvatar>
                            </CardHeaderAvatar>
                            <CardHeaderContent>
                                <MudText Typo="Typo.h6">@titleParts[0]</MudText>
                                @if (titleParts.Length > 1)
                            {
                                <MudText Typo="Typo.subtitle2">@titleParts[1]</MudText>
                            }
                        </CardHeaderContent>
                        <CardHeaderActions>
                            <AuthorizeView Roles="@($"{Role.Admin},{Role.SuperAdmin}")">
                                <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Warning" Size="Size.Small" Class="ml-auto" Href="@("/edit-widget/" + item.Id)" />
                            </AuthorizeView>
                        </CardHeaderActions>
                    </MudCardHeader>
                    <MudCardContent Style="text-align:center" Class="border-y border-solid mud-border-tertiary pa-4">
                        @((MarkupString)item.HtmlContent.ToHtmlString())
                    </MudCardContent>
                    <MudCardActions Class="d-flex justify-end">
                        <MudButton Href="/apply" Color="Color.Tertiary" StartIcon="@Icons.Material.Sharp.PersonAddAlt1">Apply Internship</MudButton>
                        <MudButton Href="/modules" Color="Color.Tertiary" StartIcon="@Icons.Material.Sharp.ViewModule">Training Modules</MudButton>
                    </MudCardActions>
                </MudCard>
            </MudItem>
        }
    </MudGrid>
}

<AuthorizeView Roles="@($"{Role.Admin},{Role.SuperAdmin}")">
    <MudText Typo="Typo.h6" Class="mt-6">Home Page Image References (Shown just to admins)</MudText>
    @foreach (var image in images)
    {
        <MudImage Src="@image" Alt="@image" Class="rounded-lg" Height="100" /> @image
    }
</AuthorizeView>


@code {
    private List<Widget> homeItems = [];
    private string[] images = [];

    [CascadingParameter]
    private Task<AuthenticationState> AuthTask { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        homeItems = await db.Widgets.Where(x => x.Title == nameof(WidgetFilter.CarouselItem) || x.Title == nameof(WidgetFilter.HomeIntro)).ToListAsync();

        // Get all home images for reference
        var state = await AuthTask;
        if (state.User.IsInRole(Role.Admin) || state.User.IsInRole(Role.SuperAdmin))
        {
            var relativeAssetPath = $"homeitems";
            var currentAppPath = Environment.CurrentDirectory;
            var path = Path.Combine(currentAppPath, "wwwroot", relativeAssetPath);
            images = Directory.GetFiles(path).Select(x => relativeAssetPath + "/" + Path.GetFileName(x)).ToArray();
        }
    }
}
