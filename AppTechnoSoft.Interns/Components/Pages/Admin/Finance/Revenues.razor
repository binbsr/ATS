@page "/revenues"

@using System.Globalization
@attribute [Authorize(Roles = Role.SuperAdmin)]
@inject ApplicationDbContext db
@inject ISnackbar SnackBar

<PageTitle>Revenues</PageTitle>

<MudDataGrid T="Revenue"
             MultiSelection="true"
             Items="@revenues"
             SortMode="SortMode.Multiple"
             Hover="true"
             QuickFilter="@_quickFilter"
             Loading="loadingData"
             ReadOnly="false"
             Dense="true"
             EditMode="DataGridEditMode.Form"
             EditTrigger="DataGridEditTrigger.Manual"
             CommittedItemChanges="@CommittedItemChanges">
    <ToolBarContent>
        <MudFab Href="/revenue/add"
                StartIcon="@Icons.Material.Filled.Add"
                title="New Revenue Item"
                Size="Size.Small"
                Color="Color.Tertiary">
        </MudFab>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString"
                      Placeholder="Search"
                      Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search"
                      IconSize="Size.Medium"
                      Class="mt-0">
        </MudTextField>
    </ToolBarContent>
    <Columns>
        <PropertyColumn Property="x => x.Particulars" />

        <TemplateColumn Title="Source">
            <CellTemplate>
                @context.Item.Source
            </CellTemplate>
            <EditTemplate>
                <MudSelect Variant="Variant.Outlined"
                           @bind-Value="context.Item.Source"
                           Label="Source"
                           AnchorOrigin="Origin.BottomCenter"
                           Class="mt-4">
                    @foreach (var item in Enum.GetValues<RevenueSource>())
                    {
                        <MudSelectItem Value="@item">@item</MudSelectItem>
                    }
                </MudSelect>
            </EditTemplate>
        </TemplateColumn>

        <TemplateColumn Title="Amount" AggregateDefinition="AmountAggregation">
            <CellTemplate>
                @context.Item.Amount.AsCurrency()
            </CellTemplate>
            <EditTemplate>
                <MudTextField Label="Amount" Variant="Variant.Outlined" T="float" @bind-Value="@context.Item.Amount" />
            </EditTemplate>
        </TemplateColumn>

        <TemplateColumn Title="Date">
            <CellTemplate>
                @context.Item.Date?.ToString("D")
            </CellTemplate>
            <EditTemplate>
                <MudDatePicker Label="Date"
                               Variant="Variant.Outlined"                               
                               @bind-Date="@context.Item.Date" />
            </EditTemplate>
        </TemplateColumn>

        <TemplateColumn CellClass="d-flex justify-end">
            <CellTemplate>
                <MudIconButton Icon="@Icons.Material.Outlined.Edit" OnClick="@context.Actions.StartEditingItemAsync" />
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="Revenue" PageSizeOptions="[30, 50, 100, 200]" />
    </PagerContent>
</MudDataGrid>

@code {

    [CascadingParameter]
    private Task<AuthenticationState> AuthTask { get; set; } = null!;

    private List<Revenue> revenues = [];
    private string _searchString = string.Empty;
    private bool loadingData = false;

    AggregateDefinition<Revenue> AmountAggregation = new()
        {
            Type = AggregateType.Custom,
            CustomAggregate = x =>
            {
                var totalExpense = x.Sum(y => y.Amount);
                return $"{totalExpense.AsCurrency()}";
            }
        };

    private Func<Revenue, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.Particulars.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Amount.ToString().Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Source.ToString().Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };

    protected override async Task OnInitializedAsync()
    {
        loadingData = true;

        revenues = await db.Revenues
            .AsNoTracking()
            .ToListAsync();

        loadingData = false;
    }

    async Task CommittedItemChanges(Revenue item)
    {
        if (item is null)
            return;

        var state = await AuthTask;
        var userName = state.User.Identity?.Name;

        item.AddLastUpdatedStamps(userName);

        var rowsAffected = db.Revenues
            .Where(x => x.Id == item.Id)
            .ExecuteUpdate(x => x
                .SetProperty(y => y.Particulars, item.Particulars)
                .SetProperty(y => y.Source, item.Source)
                .SetProperty(y => y.Amount, item.Amount)
                .SetProperty(y => y.LastUpdated, item.LastUpdated)
                .SetProperty(y => y.LastUpdatedBy, item.LastUpdatedBy)
            );

        _ = rowsAffected > 0 ?
            SnackBar.Add("Revenue source updated successfully", Severity.Success) :
            SnackBar.Add("Revenue update failed", Severity.Error);
    }
}
