@page "/students"
@attribute [StreamRendering]

@inject ApplicationDbContext db

<MudDataGrid T="Student"
             MultiSelection="true"
             Items="@studentList"
             SortMode="SortMode.Multiple"
             Filterable="true"
             Hover="true"
             QuickFilter="@_quickFilter"
             Loading="loadingData"
             Hideable="true">

    <ToolBarContent>
        <MudText Typo="Typo.h6">All Tech Students</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <Columns>
        <PropertyColumn Property="x => studentList.IndexOf(x) + 1" Title="#" Filterable="false" />
        <PropertyColumn Property="x => x.Name" Filterable="false"/>
        <PropertyColumn Property="x => x.Phone" Filterable="false" />
        <PropertyColumn Property="x => x.Email" Filterable="false" />
        <PropertyColumn Property="x => x.WebExperience" Title="Web Exposure"/>
        <PropertyColumn Property="x => x.DbExperience" Title="Db Exposure" />
        <PropertyColumn Property="x => x.Status" />
        <PropertyColumn Property="x => x.College.Name" Title="College" />
        <PropertyColumn Property="x => x.TechProgram.Name" Title="Program"/>
        <PropertyColumn Property="x => x.FormSubmitted"  />
    </Columns>
    <PagerContent>
        <MudDataGridPager T="Student" PageSizeOptions="[15, 30, 50, 100, 200]" />
    </PagerContent>
</MudDataGrid>

@code {
    private List<Student> studentList = new();
    private string _searchString;
    private bool _sortNameByLength;
    private bool loadingData = false;    

    private Func<Student, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Email.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Status.ToString().Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        
        if (x.Phone.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };

    protected override async Task OnInitializedAsync()
    {
        loadingData = true;
        studentList = await db.Students.Include(s => s.College).Include(t => t.TechProgram).ToListAsync();
        loadingData = false;
    }
}