@page "/assignments"

@attribute [Authorize(Roles = Role.AdminsAndInstructor)]
@inject ApplicationDbContext Db
@inject ISnackbar SnackBar

<PageTitle>Assignments</PageTitle>

<MudTable Items="@assignments"
          Hover="true"
          Outlined
          Loading="@loadingData"
          Filter="new Func<AssignmentViewModel,bool>(FilterFunc1)">
    <ToolBarContent>
        <MudButton Variant="Variant.Outlined" Class="rounded" StartIcon="@Icons.Material.Outlined.Create" Href="/assignments/add" Color="Color.Tertiary">New Assignment</MudButton>

        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search assignments by title, module and created by..."
                      Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search"
                      Class="mt-0">
        </MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>#</MudTh>
        <MudTh>Title</MudTh>
        <MudTh>Module</MudTh>
        <MudTh>Added</MudTh>
        <MudTh>AddedBy</MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="#">@(assignments.IndexOf(context) + 1)</MudTd>
        <MudTd DataLabel="Title">@context.Title</MudTd>
        <MudTd DataLabel="Module">@context.ModuleName</MudTd>
        <MudTd DataLabel="Created">@context.Created</MudTd>
        <MudTd DataLabel="CreatedBy">@context.CreatedBy</MudTd>
        <MudTd>
            <MudButton Variant="Variant.Outlined" Size="Size.Small"
                       Color="@(context.ShowDetails ? Color.Warning : Color.Success)"
                       StartIcon="@Icons.Material.Sharp.RemoveRedEye"
                       OnClick="@(() => ShowBtnPress(context))">
                @((context.ShowDetails == true) ? "Hide" : "Show") Assignment
            </MudButton>
        </MudTd>
        <MudTd>
            <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Small" Color="Color.Warning" Href="@("/assignments/edit/" + context.Id)" />
            <MudIconButton Icon="@Icons.Material.Sharp.Delete" Size="Size.Small" Color="Color.Error" OnClick="() => ConfirmDelete(context)" />
            <MudMessageBox @ref="mbox" Title="Warning" CancelText="Cancel">
                <MessageContent>
                    Are you sure to delete this assignment? It can't be undone!
                </MessageContent>
                <YesButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Error" Class="ml-2 mb-2 mr-3" StartIcon="@Icons.Material.Filled.DeleteForever">Delete</MudButton>
                </YesButton>
            </MudMessageBox>
        </MudTd>
    </RowTemplate>
    <ChildRowContent>
        @if (context.ShowDetails)
        {
            <td colspan="7">
                <MudTabs ApplyEffectsToContainer="true" PanelClass="pa-6" Outlined SliderColor="Color.Tertiary">
                    <MudTabPanel Text="Assignmet Ask">
                        @((MarkupString)(context.Details?.ToHtmlString() ?? ""))
                    </MudTabPanel>
                    <MudTabPanel Text="Turn in this assignment">
                        <AssignmentTurnIn Assignment="@context" />
                    </MudTabPanel>
                </MudTabs>
            </td>
        }
    </ChildRowContent>
    <PagerContent>
        <MudTablePager PageSizeOptions="[15, 30, 50, 100, 200]" />
    </PagerContent>
</MudTable>


@code {

    private List<Assignment> assignmentModels = new();
    private List<AssignmentViewModel> assignments = new();

    private bool loadingData = false;
    private string searchString = string.Empty;
    private MudMessageBox mbox { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        loadingData = true;
        assignmentModels = await Db.Assignments
            .Include(x => x.Module)
            .ToListAsync();

        assignments = assignmentModels.ToViewModel();
        loadingData = false;
    }

    private void ShowBtnPress(AssignmentViewModel assignmentViewModel)
    {
        assignmentViewModel.ShowDetails = !assignmentViewModel.ShowDetails;
    }

    private async Task ConfirmDelete(AssignmentViewModel assignment)
    {
        bool? result = await mbox.ShowAsync();
        if (result == null)
            return;

        var model = assignmentModels.Find(x => x.Id == assignment.Id);
        if (model is null)
            return;

        Db.Assignments.Remove(model);
        var rowsAffected = await Db.SaveChangesAsync();

        if (rowsAffected > 0)
        {
            SnackBar.Add("Assignment deleted successfully", Severity.Success);
            assignments.Remove(assignment);
        }
        else
        {
            SnackBar.Add("Assignment deletion failed", Severity.Error);
        }
    }

    private bool FilterFunc1(AssignmentViewModel assignment) => FilterFunc(assignment, searchString);

    private bool FilterFunc(AssignmentViewModel assignment, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (assignment.Title!.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (assignment.ModuleName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (assignment.CreatedBy!.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }
}
