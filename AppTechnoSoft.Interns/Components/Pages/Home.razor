@page "/"

@inject ApplicationDbContext db

<PageTitle>Home</PageTitle>

@if (homeItems is null || homeItems.Count == 0)
{
    <MudProgressCircular Indeterminate Color="Color.Tertiary" />
}
else
{
    var homeTitle = homeItems.FirstOrDefault(x => x.Title == nameof(WidgetFilter.HomeTitle));
    if (homeTitle is not null)
    {
        <MudText Typo="Typo.h3" Align="Align.Center">
            @homeTitle.Description
            <AuthorizeView Roles="@Role.Admins">
                <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Warning" Size="Size.Small" Class="ml-auto" Href="@("/edit-widget/" + homeTitle.Id)" />
            </AuthorizeView>
        </MudText>
        @((MarkupString)homeTitle.HtmlContent.ToHtmlString())
    }

    <MudText Align="Align.Center" Typo="Typo.h3" Class="my-16">Our Products</MudText>
    <MudGrid Justify="Justify.SpaceEvenly" Class="pb-16">
        @foreach (var item in homeItems.Where(x => x.Title == WidgetFilter.Product))
        {
            <MudItem xs="12" sm="6" md="6" lg="4">
                <MudPaper Class="p-3" Style="text-align:center" Elevation="10">
                    <AuthorizeView Roles="@Role.Admins">
                        <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Warning" Size="Size.Small" Class="ml-auto" Href="@("/edit-widget/" + item.Id)" />
                    </AuthorizeView>
                    <MudText Typo="Typo.h4" Class="my-10">@item.Description</MudText>
                    @((MarkupString)item.HtmlContent.ToHtmlString())
                </MudPaper>
            </MudItem>
        }
    </MudGrid>

    <MudText Align="Align.Center" Typo="Typo.h3" Class="my-16">Tech Stacks and Tools</MudText>
    <MudGrid Justify="Justify.SpaceEvenly" Class="pb-16">
        @foreach (var item in homeItems.Where(x => x.Title == nameof(WidgetFilter.CarouselItem)))
        {
            <MudItem xs="12" sm="6" md="6" lg="4">
                <MudPaper Class="p-3" Style="text-align:center" Elevation="10">
                    <AuthorizeView Roles="@Role.Admins">
                        <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Warning" Size="Size.Small" Class="ml-auto" Href="@("/edit-widget/" + item.Id)" />
                    </AuthorizeView>
                    <MudText Typo="Typo.h4" Class="my-10">@item.Description</MudText>
                    @((MarkupString)item.HtmlContent.ToHtmlString())
                </MudPaper>
            </MudItem>
        }
    </MudGrid>

    <MudText Align="Align.Center" Typo="Typo.h3" Class="my-16">Our Ambitions</MudText>
    <MudGrid Justify="Justify.SpaceEvenly">
        @foreach (var item in homeItems.Where(x => x.Title == WidgetFilter.Ambition))
        {
            <MudItem xs="12" sm="6" md="6" lg="4">
                <MudPaper Class="p-3" Style="text-align:center" Elevation="10">
                    <AuthorizeView Roles="@Role.Admins">
                        <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Warning" Size="Size.Small" Class="ml-auto" Href="@("/edit-widget/" + item.Id)" />
                    </AuthorizeView>
                    <MudText Typo="Typo.h4" Class="my-10">@item.Description</MudText>
                    @((MarkupString)item.HtmlContent.ToHtmlString())
                </MudPaper>
            </MudItem>
        }
    </MudGrid>
}

<AuthorizeView Roles="@($"{Role.Admin},{Role.SuperAdmin}")">
    <MudText Typo="Typo.h6" Class="mt-6">Home Page Image References (Shown just to admins)</MudText>
    @foreach (var image in images)
    {
        <MudImage Src="@image" Alt="@image" Class="rounded-lg" Height="100" /> @image
    }
</AuthorizeView>


@code {
    private List<Widget> homeItems = [];
    private string[] images = [];

    [CascadingParameter]
    private Task<AuthenticationState> AuthTask { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        homeItems = await db.Widgets.Where(x => x.Title == nameof(WidgetFilter.CarouselItem)
        || x.Title == WidgetFilter.Product
        || x.Title == WidgetFilter.Ambition
        || x.Title == nameof(WidgetFilter.HomeTitle)).ToListAsync();

        // Get all home images for reference
        var state = await AuthTask;
        if (state.User.IsInRole(Role.Admin) || state.User.IsInRole(Role.SuperAdmin))
        {
            var relativeAssetPath = $"homeitems";
            var currentAppPath = Environment.CurrentDirectory;
            var path = Path.Combine(currentAppPath, "wwwroot", relativeAssetPath);
            images = Directory.GetFiles(path).Select(x => relativeAssetPath + "/" + Path.GetFileName(x)).ToArray();
        }
    }
}
