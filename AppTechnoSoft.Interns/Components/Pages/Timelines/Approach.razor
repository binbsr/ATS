@page "/timeline"

@inject ApplicationDbContext Db

<PageTitle>Our Approach</PageTitle>

<MudText Typo="Typo.h5" Align="Align.Center" Class="my-5">Trainee Timeline</MudText>

@if (!traineeTimeLines.Any())
{
    <MudProgressCircular />
}
else
{
    <MudTimeline Class="px-16">
        @foreach (var group in traineeTimeLines.GroupBy(x => x.Stage))
        {
            foreach(var timeline in group)
            {
                var color = group.Key switch
                {
                    "Batching" => Color.Success,
                    "Training" => Color.Primary,
                    "Project" => Color.Tertiary,
                    _ => Color.Secondary
                };
                <MudTimelineItem Size="Size.Large" Variant="Variant.Outlined" Elevation="10" Color="@color">
                    <ItemDot>
                        <MudIcon Size="Size.Large" Icon="@Icons.Material.Sharp.Abc" />
                    </ItemDot>
                    <ItemOpposite>
                        <MudText Color="Color.Warning" Typo="Typo.h5">@timeline.Date</MudText>
                    </ItemOpposite>
                    <ItemContent>
                        <MudCard Outlined="true">
                            <MudCardContent>
                                <MudText Color="Color.Info" Typo=" Typo.h6" GutterBottom="true">@timeline.Title</MudText>
                                <MudText Typo="Typo.body1">@timeline.Details</MudText>
                            </MudCardContent>
                        </MudCard>
                    </ItemContent>
                </MudTimelineItem>
            }            
        }
    </MudTimeline>
}

@code {

    TraineeTimeline[] traineeTimeLines = [];
    // [
    //     new("Batching", "<Day0", "Registration", "Student applies for traineeship."),
    // new("Batching", "<Day0", "Grouping", "Student is assigned to appropriate batch depending on his/her knowledge selections levels."),
    // new("Batching", "Day0", "Getting System Ready", "Students are required to install all the coding tools needed."),
    // new("Training", "Day1", "Common Modules Started", "Formal classes starts day1 with common training modules as shown on 'Modules' page."),
    // new("Training", "≈Day5", "Re-Batching (Optional)", "Regrouping of a whole batch for different tracks like .NET, Java etc."),
    // new("Training", "Day6", "SDK and Language", "Training on particular"),
    // ];

    protected override async Task OnInitializedAsync()
    {
        traineeTimeLines = await Db.TraineeTimelines.ToArrayAsync();
    }
}