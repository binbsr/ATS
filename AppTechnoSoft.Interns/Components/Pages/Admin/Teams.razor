@page "/teams"

@attribute [Authorize(Roles = Role.Admins)]
@inject ApplicationDbContext Db
@inject ISnackbar SnackBar

<PageTitle>All project teams</PageTitle>

<MudGrid>

    @foreach (var team in teams)
    {
        <MudItem md="3" sm="4" xs="12">
            <MudCard>
                <MudCardHeader>
                    <CardHeaderAvatar>
                        <MudAvatar Size="Size.Large">
                            <MudImage Src="@team.Avatar" />
                        </MudAvatar>
                    </CardHeaderAvatar>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h5">@team.Name</MudText>
                    </CardHeaderContent>
                    <CardHeaderActions>
                        <MudIconButton Class="mt-5" Icon="@Icons.Material.Filled.Edit" Size="Size.Small" Color="Color.Warning" Href="@("/edit-team/" + team.Id)" />
                        <MudIconButton Class="mt-5" Icon="@Icons.Material.Sharp.Delete" Size="Size.Small" Color="Color.Error" OnClick="() => ConfirmDelete(team)" />
                        <MudMessageBox @ref="mbox" Title="Warning" CancelText="Cancel">
                            <MessageContent>
                                Are you sure to delete this team? It can't be undone!
                            </MessageContent>
                            <YesButton>
                                <MudButton Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Material.Filled.DeleteForever">Delete!</MudButton>
                            </YesButton>
                        </MudMessageBox>
                    </CardHeaderActions>
                </MudCardHeader>                
                <MudCardContent>
                    <MudAvatarGroup Max="5" Spacing="2" MaxColor="Color.Primary" MaxSize="Size.Large" Outlined>
                        @foreach (var student in team.Students)
                        {
                            <MudAvatar Size="Size.Large">
                                <MudImage Src="@student.ProfileImagePath" title="@student.Name" />
                            </MudAvatar>
                        }
                    </MudAvatarGroup>
                </MudCardContent>
                <MudCardActions>
                    <MudText Typo="Typo.body1" title="@team.Created">Added @team.Created.Humanize()</MudText>
                </MudCardActions>
            </MudCard>
        </MudItem>
    }
</MudGrid>

@code {

    private List<Team> teams = new();
    private Team selectedTeam = new();
    private bool loadingData;
    private string searchString = "";
    MudMessageBox mbox { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        loadingData = true;
        teams = await Db.Teams.Include(x => x.Batch).Include(t => t.Project).OrderByDescending(x => x.Batch).ToListAsync();
        loadingData = false;
    }

    private bool FilterFunc1(Team team) => FilterFunc(team, searchString);

    private bool FilterFunc(Team team, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (team.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private async Task ConfirmDelete(Team team)
    {
        bool? result = await mbox.Show();
        if (result == null)
            return;

        Db.Teams.Remove(team);

        var rowsAffected = await Db.SaveChangesAsync();

        if (rowsAffected > 0)
        {
            SnackBar.Add("Team Deleted successfully", Severity.Success);
            teams.Remove(team);
        }
        else
        {
            SnackBar.Add("Team Delete failed", Severity.Error);
        }
    }
}
