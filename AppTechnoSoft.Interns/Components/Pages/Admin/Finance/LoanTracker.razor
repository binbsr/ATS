@page "/loan"

@using System.Globalization

@attribute [Authorize(Roles = Role.SuperAdmin)]
@inject ApplicationDbContext db
@inject ISnackbar SnackBar

<PageTitle>Loans</PageTitle>

<MudDataGrid T="LoanViewModel"
             MultiSelection="true"
             Items="@loansView"
             SortMode="SortMode.Multiple"
             Hover="true"
             Loading="loadingData"
             ReadOnly="false"
             Dense="true"
             EditMode="DataGridEditMode.Form"
             EditTrigger="DataGridEditTrigger.Manual"
             CommittedItemChanges="@CommittedItemChanges">
    <ToolBarContent>
        <MudFab Href="/loan/add" StartIcon="@Icons.Material.Filled.Add" title="Add loan" Size="Size.Small" Color="Color.Tertiary"></MudFab>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <Columns>
        <PropertyColumn Property="x => x.Borrower" Title="Borrower" />
        <PropertyColumn Property="x => x.Lender" Title="Lender" />
        <TemplateColumn Title="Principal" AggregateDefinition="AmountAggregation">
            <CellTemplate>
                @context.Item.Principal.AsCurrency()
            </CellTemplate>
            <EditTemplate>
                <MudTextField Label="Principal" Variant="Variant.Outlined" T="float" @bind-Value="@context.Item.Principal" />
            </EditTemplate>
        </TemplateColumn>
        <TemplateColumn Title="Intrest Rate">
            <CellTemplate>
                @((context.Item.InterestRate / 100).ToString("P"))
            </CellTemplate>
            <EditTemplate>
                <MudTextField Label="Interest Rate" Variant="Variant.Outlined" T="float" @bind-Value="@context.Item.InterestRate" />
            </EditTemplate>
        </TemplateColumn>
        <TemplateColumn Title="IssueDate">
            <CellTemplate>
                @context.Item.IssueDate?.ToLongDateString()
            </CellTemplate>
            <EditTemplate>
                <MudDatePicker Variant="Variant.Outlined" 
                               Color="Color.Secondary"
                               Label="Issue Date"
                               @bind-Date="context.Item.IssueDate"
                               PickerVariant="PickerVariant.Dialog" />
            </EditTemplate>
        </TemplateColumn>
        <TemplateColumn Title="Due">
            <CellTemplate>
                <MudTooltip Text="@context.Item.RepaymentDate?.ToLongDateString()">
                    @context.Item.RepaymentDate?.Humanize()
                </MudTooltip>
            </CellTemplate>
            <EditTemplate>
                <MudDatePicker Variant="Variant.Outlined"
                               Color="Color.Secondary"
                               Label="Repayment Date"
                               @bind-Date="context.Item.RepaymentDate"
                               PickerVariant="PickerVariant.Dialog"/>
            </EditTemplate>
        </TemplateColumn>

        <TemplateColumn Title="Elapsed" >
            <CellTemplate>
                @context.Item.DaysElapsed.ToString("F2") Days
            </CellTemplate>

        </TemplateColumn>
        
        <TemplateColumn Title="Intrest" AggregateDefinition="InterestAggregation">
            <CellTemplate>
                @context.Item.InterestAccumulated.AsCurrency()
            </CellTemplate>
           
        </TemplateColumn>
        <TemplateColumn Title="Grand Total" AggregateDefinition="GrandTotalAggregation">
            <CellTemplate>
                @context.Item.GrandTotal.AsCurrency()
            </CellTemplate>

        </TemplateColumn>        
        
        <TemplateColumn CellClass="d-flex justify-end">
            <CellTemplate>
                <MudIconButton Icon="@Icons.Material.Outlined.Edit" OnClick="@context.Actions.StartEditingItemAsync" />
            </CellTemplate>
        </TemplateColumn>

    </Columns>
    <PagerContent>
        <MudDataGridPager T="LoanViewModel" PageSizeOptions="[30, 50, 100, 200]" />
    </PagerContent>
</MudDataGrid>

@code {

    [CascadingParameter]
    private Task<AuthenticationState> AuthTask { get; set; } = null!;

    private List<Loan> loans = [];
    private List<LoanViewModel> loansView = [];

    private string _searchString = string.Empty;
    private bool loadingData = false;

    AggregateDefinition<LoanViewModel> InterestAggregation = new()
        {
            Type = AggregateType.Custom,
            CustomAggregate = x =>
            {
                var totalInterest = x.Sum(y => y.InterestAccumulated);
                return $"{totalInterest.AsCurrency()}";
            }
        };

    AggregateDefinition<LoanViewModel> AmountAggregation = new()
        {
            Type = AggregateType.Custom,
            CustomAggregate = x =>
            {
                var totalExpense = (float)x.Sum(y => y.Principal);
                return $"{totalExpense.AsCurrency()}";
            }
        };
    AggregateDefinition<LoanViewModel> GrandTotalAggregation = new()
        {
            Type = AggregateType.Custom,
            CustomAggregate = x =>
            {
                var totalGrandTotal = x.Sum(y => y.GrandTotal);
                return $"{totalGrandTotal.AsCurrency()}";
            }
        };

    private Func<Loan, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.Borrower.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Lender.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };

    protected override async Task OnInitializedAsync()
    {
        loadingData = true;

        loans = await db.Loans
            .AsNoTracking()
            .ToListAsync();

        loansView = loans.ToViewModel();
        

        loadingData = false;
    }

    async Task CommittedItemChanges(LoanViewModel item)
    {
        if (item is null)
            return;
            var model = item.ToModel();
        var state = await AuthTask;
        var userName = state.User.Identity?.Name;

        model.AddLastUpdatedStamps(userName);

        var rowsAffected = db.Loans
            .Where(x => x.Id == model.Id)
            .ExecuteUpdate(x => x
                .SetProperty(y => y.Borrower, model.Borrower)
                .SetProperty(y => y.Lender, model.Lender)
                .SetProperty(y => y.IssueDate, model.IssueDate)
                .SetProperty(y => y.Principal, model.Principal)
                .SetProperty(y => y.InterestRate, model.InterestRate)
                .SetProperty(y => y.RepaymentDate, model.RepaymentDate)
                .SetProperty(y => y.LastUpdated, model.LastUpdated)
                .SetProperty(y => y.LastUpdatedBy, model.LastUpdatedBy)
            );

        if (rowsAffected > 0)
        {
            SnackBar.Add("Loan updated successfully", Severity.Success);
        }
        else
        {
            SnackBar.Add("Loan update failed", Severity.Error);
        }
    }
   
}


