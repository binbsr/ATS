@page "/add-college"
@page "/edit-college/{Id:int}"

@inject ApplicationDbContext Db
@inject ISnackbar SnackBar
@inject NavigationManager Navigation

<PageTitle>@pageTitle</PageTitle>

    <EditForm Model="@model"
              OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator />
        <MudTextField Label="Title" @bind-Value="model.Name" For="@(() => model.Name)" />
        <MudTextField Label="Location" Class="mt-3" @bind-Value="model.Location" For="@(() => model.Location)" />

        <MudButton ButtonType="ButtonType.Submit"
                   Variant="Variant.Filled"
                   Color="Color.Primary"
                   Class="mt-3"
                   StartIcon="@Icons.Material.Filled.Save">
            Save College
        </MudButton>
    </EditForm>

    @code {

    [Parameter]
    public int? Id { get; set; }

    College model = new();
    string pageTitle = string.Empty;
    bool IsAdd => Id is null or 0;

    protected override async Task OnInitializedAsync()
    {
        if (IsAdd)
        {
            pageTitle = "Add College";
        }
        else
        {
            pageTitle = "Edit College";
            model = await Db.Colleges.FindAsync(Id) ?? new();
        }
    }

    private async Task OnValidSubmit(EditContext context)
    {
        if (IsAdd)
        {
            Db.Colleges.Add(model);
        }
        else
        {
            model.Id = Id!.Value;
            Db.Colleges.Update(model);
        }

        var rowsAffected = await Db.SaveChangesAsync();

        if (rowsAffected > 0)
        {
            SnackBar.Add("College saved successfully", Severity.Success);
        }
        else
        {
            SnackBar.Add("College save failed", Severity.Error);
        }

        Navigation.NavigateTo("/colleges");
    }
}
