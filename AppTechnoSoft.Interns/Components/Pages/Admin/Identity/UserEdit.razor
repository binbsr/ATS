@page "/edit-user/{Id}"

@inject UserManager<ApplicationUser> UserManager
@inject RoleManager<IdentityRole> RoleManager
@inject ISnackbar SnackBar
@inject NavigationManager Navigation

<PageTitle>User Management</PageTitle>

<MudContainer>
    <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
        <MudTextField Label="Title" @bind-Value="model.UserName" Disabled />
         <MudTextField Label="Email" @bind-Value="model.Email" Disabled />
         <MudTextField Label="EmailConfirmed" @bind-Value="model.EmailConfirmed" Disabled />
         <MudTextField Label="TwoFactorEnabled" @bind-Value="model.TwoFactorEnabled" Disabled />
         <MudTextField Label="AccessFailedCount" @bind-Value="model.AccessFailedCount" Disabled />
         <MudSelect T="string"
                    Dense="true"
                    Label="Roles assigned"
                    MultiSelection="true"
                    @bind-SelectedValues="@selectedRoles"
                    Class="my-3"
                    AnchorOrigin="Origin.BottomCenter">
             @foreach (var role in roles)
            {
                <MudSelectItem Value="@role" />
            }
        </MudSelect>

        <MudButton ButtonType="ButtonType.Submit"
                   Variant="Variant.Filled"
                   Color="Color.Primary"
                   Class="mt-3"
                   StartIcon="@Icons.Material.Filled.Save">
            Save User
        </MudButton>
    </EditForm>
</MudContainer>
@code {

    [Parameter]
    public required string Id { get; set; }

    ApplicationUser model = new();
    List<string?> roles = [];
    IEnumerable<string> selectedRoles = [];
    IEnumerable<string> userRoles = [];

    protected override async Task OnInitializedAsync()
    {
        model = await UserManager.FindByIdAsync(Id) ?? new();
        roles = await RoleManager.Roles.Select(x => x.Name).ToListAsync() ?? [];
        userRoles = await UserManager.GetRolesAsync(model);
        selectedRoles = userRoles;
    }

    private async Task OnValidSubmit(EditContext context)
    {
        var rolesTobeAdded = selectedRoles.Except(userRoles);
        var rolesTobeDeleted = userRoles.Except(selectedRoles);

        if (rolesTobeAdded.Any())
        {
            var resultAdd = await UserManager.AddToRolesAsync(model, rolesTobeAdded);
            _ = resultAdd.Succeeded ?
            SnackBar.Add("User saved successfully", Severity.Success) :
            SnackBar.Add($"User save failed. {string.Join("\n\r", resultAdd.Errors.Select(x => x.Description))}", Severity.Error);
        }

        if (rolesTobeDeleted.Any())
        {
            var resultDelete = await UserManager.RemoveFromRolesAsync(model, rolesTobeDeleted);

            _ = resultDelete.Succeeded ?
                SnackBar.Add("User saved successfully", Severity.Success) :
                SnackBar.Add($"User save failed. {string.Join("\n\r", resultDelete.Errors.Select(x => x.Description))}", Severity.Error);
        }

        Navigation.NavigateTo("/identity/users");
    }
}
