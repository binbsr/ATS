@page "/batches"
@attribute [Authorize(Roles = Role.Admins)]
@inject ApplicationDbContext Db
@inject ISnackbar SnackBar

<PageTitle>Training Batches</PageTitle>

<MudButton Href="/add-batch" StartIcon="@Icons.Material.Filled.Add" Color="Color.Tertiary" Variant="Variant.Filled" Size="Size.Large" Class="mb-4">New Batch</MudButton>

<MudGrid>
    @foreach (var batch in batches)
    {
        <MudItem md="12">
            <MudCard Elevation="10">
                <MudCardHeader>
                    <CardHeaderAvatar>
                        <MudAvatar Color="Color.Secondary" Size="Size.Large">B</MudAvatar>
                    </CardHeaderAvatar>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h5">@batch.Name</MudText>
                        <MudText Typo="Typo.body1" title="@batch.Created">Added @batch.Created.Humanize()</MudText>
                    </CardHeaderContent>
                    <CardHeaderActions>
                        <MudIconButton Class="mt-5" Icon="@Icons.Material.Filled.Edit" Size="Size.Small" Color="Color.Warning" Href="@("/edit-batch/" + batch.Id)" />
                        <MudIconButton Class="mt-5" Icon="@Icons.Material.Sharp.Delete" Size="Size.Small" Color="Color.Error" OnClick="() => ConfirmDelete(batch)" />
                        <MudMessageBox @ref="mbox" Title="Warning" CancelText="Cancel">
                            <MessageContent>
                                Are you sure to delete this batch? It can't be undone.
                            </MessageContent>
                            <YesButton>
                                <MudButton Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Material.Filled.DeleteForever">Delete</MudButton>
                            </YesButton>
                        </MudMessageBox>
                    </CardHeaderActions>
                </MudCardHeader>
                <MudCardContent>
                    <MudStack Row>
                        <MudAvatarGroup Max="10" Spacing="2" MaxColor="Color.Primary" MaxSize="Size.Large" Outlined>
                            @foreach (var student in batch.Students ?? [])
                            {
                                <MudAvatar Size="Size.Large">
                                    <MudImage Src="@student.ProfileImagePath" title="@student.Name" />
                                </MudAvatar>
                            }
                        </MudAvatarGroup>
                        <MudSpacer />
                        <MudText Typo="Typo.h6" Inline>@("agile team".ToQuantity(batch.Teams?.Count ?? 0)) formed</MudText>
                    </MudStack>

                    <MudGrid Class="mt-3">
                        @foreach (var team in batch.Teams ?? [])
                        {
                            <MudItem md="3" sm="4" xs="12">
                                <MudCard Elevation="0" Class="border-1 border-solid">
                                    <MudCardHeader>
                                        <CardHeaderAvatar>
                                            <MudAvatar Size="Size.Large">
                                                <MudImage Src="@team.Avatar" />
                                            </MudAvatar>
                                        </CardHeaderAvatar>
                                        <CardHeaderContent>
                                            <MudText Typo="Typo.h6">Team @team.Name</MudText>
                                        </CardHeaderContent>
                                        <CardHeaderActions>
                                            <MudIconButton Class="mt-5" Icon="@Icons.Material.Filled.Edit" Size="Size.Small" Color="Color.Warning" Href="@("/edit-team/" + team.Id)" />
                                            <MudIconButton Class="mt-5" Icon="@Icons.Material.Sharp.Delete" Size="Size.Small" Color="Color.Error" OnClick="() => ConfirmDeleteTeam(team, batch)" />
                                            <MudMessageBox @ref="mbox" Title="Warning" CancelText="Cancel">
                                                <MessageContent>
                                                    Are you sure to delete this team? It can't be undone!
                                                </MessageContent>
                                                <YesButton>
                                                    <MudButton Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Material.Filled.DeleteForever">Delete!</MudButton>
                                                </YesButton>
                                            </MudMessageBox>
                                        </CardHeaderActions>
                                    </MudCardHeader>
                                    <MudCardContent Class="py-0">
                                        <MudAvatarGroup Max="5" Spacing="2" MaxColor="Color.Primary" MaxSize="Size.Large" Outlined>
                                            @foreach (var student in team.Students ?? [])
                                            {
                                                <MudAvatar Size="Size.Large">
                                                    <MudImage Src="@student.ProfileImagePath" title="@student.Name" />
                                                </MudAvatar>
                                            }
                                        </MudAvatarGroup>
                                        <MudPaper Class="mt-4 p-2" Style="text-align:center" Elevation="0">
                                            <MudChip T="string" Label="true">Project</MudChip>
                                            <MudLink Href="@($"/projects?highlight={@team.Project?.Id}")" Class="d-block">@(team.Project?.Title ?? "None")</MudLink>
                                            <MudDivider Class="my-1" />
                                            <MudChip T="string" Label="true">Repository</MudChip>
                                            <MudLink Href="@team.Project?.RepoUrl" Target="_blank" Class="d-block">@(team.Project?.RepoUrl ?? "None")</MudLink>
                                            <MudDivider Class="my-1" />
                                            <MudChip T="string" Label="true">Project Board</MudChip>
                                            <MudLink Href="@team.Project?.BoardUrl" Target="_blank" Class="d-block">@(team.Project?.BoardUrl ?? "None")</MudLink>
                                        </MudPaper>
                                    </MudCardContent>
                                    <MudCardActions Class="mx-2">
                                        <MudText Class="ml-auto" Typo="Typo.body1" title="@team.Created">Added @team.Created.Humanize()</MudText>
                                    </MudCardActions>
                                </MudCard>
                            </MudItem>
                        }
                        <MudItem>
                            <MudButton Href="@($"/add-team?batchId={@batch.Id}")" StartIcon="@Icons.Material.Filled.Add" Color="Color.Tertiary" Variant="Variant.Filled" Size="Size.Large">New Team</MudButton>
                        </MudItem>
                    </MudGrid>
                </MudCardContent>
            </MudCard>
        </MudItem>
    }
</MudGrid>

@code {

    private List<Batch> batches = new();
    private Batch selectedBatch = new();
    private bool loadingData;
    private string searchString = "";
    MudMessageBox mbox { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        loadingData = true;

        batches = await Db.Batches
            .Include(x => x.Students)
            .Include(z => z.Teams)
            .ThenInclude(y => y.Students)
            .Include(z => z.Teams)
            .ThenInclude(y => y.Project)
            .ToListAsync();

        loadingData = false;
    }

    private bool FilterFunc1(Batch batch) => FilterFunc(batch, searchString);

    private bool FilterFunc(Batch batch, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (batch.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private async Task ConfirmDelete(Batch batch)
    {
        bool? result = await mbox.ShowAsync();
        if (result == null)
            return;

        Db.Batches.Remove(batch);

        var rowsAffected = await Db.SaveChangesAsync();

        if (rowsAffected > 0)
        {
            SnackBar.Add("Batch Deleted successfully", Severity.Success);
            batches.Remove(batch);
        }
        else
        {
            SnackBar.Add("Batch Delete failed", Severity.Error);
        }
    }

    private async Task ConfirmDeleteTeam(Team team, Batch batch)
    {
        bool? result = await mbox.ShowAsync();
        if (result == null)
            return;

        Db.Teams.Remove(team);

        var rowsAffected = await Db.SaveChangesAsync();

        if (rowsAffected > 0)
        {
            SnackBar.Add("Team Deleted successfully", Severity.Success);
            batch.Teams?.Remove(team);
        }
        else
        {
            SnackBar.Add("Team Delete failed", Severity.Error);
        }
    }
}
