@page "/"

@inject ApplicationDbContext db

<PageTitle>Home</PageTitle>

<MudGrid>
    <MudItem md="12" xs="12">
        <MudCarousel Class="mud-width-full"
                     Style="height:400px;"
                     ShowArrows="@true"
                     ShowBullets="@true"
                     EnableSwipeGesture="@true"
                     AutoCycle="@true" TData="object">
            @foreach (var content in contents)
            {
                <MudCarouselItem Transition="Transition.Slide" Color="@content.Value" Class="pt-5">
                    <MudText Typo="Typo.h3" Align="Align.Center">@((MarkupString)content.Key)</MudText>
                </MudCarouselItem>
            }
        </MudCarousel>
    </MudItem>
</MudGrid>
<MudPaper Class="pa-3 mb-3" Elevation="5">
    <MudText Typo="Typo.h5" Align="Align.Center">Training + Internship Combo</MudText>
    <MudText Typo="Typo.subtitle2" Class="mb-4">
        Depending on our use case, we may want to add some styling to the Toolbar or Editor.
        We can also place the Toolbar below the Editor by setting the BottomToolbar property to ‘true’ in the
        BlazoredTextEditor component
    </MudText>
</MudPaper>


@code {
    private Dictionary<string, Color> contents = new();
    
    protected override async Task OnInitializedAsync()
    {
        var carouselItems = await db.Widgets.Where(x => x.Title == "CarouselItem").ToListAsync();
        Color[] colors = [Color.Secondary, Color.Success, Color.Tertiary, Color.Warning, Color.Primary, Color.Error];
        Random rnd = new();

        foreach(var item in carouselItems)
        {
            contents.Add(item.HtmlContent, colors[rnd.Next(0, colors.Length)]);
        }
    }
}
