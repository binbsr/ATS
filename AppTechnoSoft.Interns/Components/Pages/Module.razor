<MudExpansionPanel @bind-IsExpanded="isOpen" HideIcon="true" Class="border-double border-3 mud-border-info">
    <TitleContent>
        <div class="d-flex">
            <MudIcon Icon="@(isOpen ? Icons.Material.Sharp.HorizontalRule : Icons.Material.Sharp.Add)" Class="mr-2 mt-1"></MudIcon>
            <MudText Typo="Typo.h6">@Widget.Description</MudText>
                <MudText Class="ml-auto mt-2" Typo="Typo.body2">Updated @((Widget.LastUpdated ?? Widget.Created).Humanize())</MudText>
                <AuthorizeView Roles="Admin,SuperAdmin">
                    <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Warning" Size="Size.Small" Href="@EditUrl" />
                    <MudIconButton Icon="@Icons.Material.Sharp.Delete" Size="Size.Small" Color="Color.Error" OnClick="() => ConfirmDelete()" />
                    <MudMessageBox @ref="mbox" Title="Warning" CancelText="Cancel">
                        <MessageContent>
                            Are you sure to delete this module? It can't be undone!
                        </MessageContent>
                        <YesButton>
                            <MudButton Variant="Variant.Filled" Color="Color.Error" Class="ml-2 mb-2 mr-3" StartIcon="@Icons.Material.Filled.DeleteForever">Delete</MudButton>
                        </YesButton>
                    </MudMessageBox>
                </AuthorizeView>
            </div>
        </TitleContent>
        <ChildContent>
            <MudContainer Style="font-size: 1.3em">
                @((MarkupString)Widget.HtmlContent)
            </MudContainer>
            <MudChipSet>
                @foreach (var tag in Widget.Tags ?? [])
            {
                <MudChip Style="@("background:" + tag.ColorCode ?? "")" Class="text-white">@tag.Name</MudChip>
            }
        </MudChipSet>
    </ChildContent>
</MudExpansionPanel>

@code {

    [Parameter]
    public Widget Widget { get; set; } = new();

    [Parameter]
    public EventCallback<Widget> DeleteCallBack { get; set; }

    public string EditUrl => $"/edit-widget/{Widget.Id}";
    bool isOpen;
    MudMessageBox mbox { get; set; } = null!;

    private async Task ConfirmDelete()
    {
        bool? result = await mbox.Show();
        if (result == null)
            return;

        await DeleteCallBack.InvokeAsync(Widget);
    }
}
