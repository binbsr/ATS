@page "/ats/feedback/{Id}"

@inject ApplicationDbContext Db

<PageTitle>@review.Title</PageTitle>

<MudContainer>
    @if (expired)
    {
        <MudAlert Square="true" Severity="Severity.Error" Style="text-align:center" NoIcon Class="border-2">
            <MudText Typo="Typo.h4" Color="Color.Error">@expiredMessage</MudText>
        </MudAlert>
    }
    else if (submitted)
    {
        <MudAlert Square="true" Severity="Severity.Success" Style="text-align:center" NoIcon Class="border-2">
            <MudText Typo="Typo.h4" Color="Color.Tertiary">@message</MudText>
        </MudAlert>
    }
    <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
        <MudGrid Spacing="8">
            <MudItem md="12" Class="mt-3">
                <MudText Typo="Typo.h3" Align="Align.Center">Consultant Feedback Form</MudText>
                <MudText Typo="Typo.h4" Align="Align.Center">@review.Title</MudText>
            </MudItem>
            <MudItem md="12">
                <MudSwitch T="bool"
                           Class="d-flex align-end"
                           Color="Color.Success"
                           UncheckedColor="Color.Dark"
                           Label="Send Anonymously?"
                           ValueChanged="ToggleAnonymous" />
                <MudTextField AutoFocus="true"
                              Immediate="true"
                              Variant="Variant.Outlined"
                              Label="Your Name"
                              @bind-Value="model.Reviewer" />
            </MudItem>

            <MudItem md="6" Class="mt-3">
                <MudText Align="Align.Right" Typo="Typo.h4">Course Content</MudText>
            </MudItem>
            <MudItem md="6" Class="d-flex justify-start pl-16 mt-3">
                <MudRating @bind-SelectedValue="courseContentScore"
                           FullIcon="@Icons.Material.Filled.Favorite"
                           EmptyIcon="@Icons.Material.Filled.FavoriteBorder"
                           Color="Color.Secondary"
                           RatingItemsStyle="width:3rem"
                           HoveredValueChanged="HandleHoveredValueChanged1"
                           Size="Size.Large" />
                <MudText Typo="Typo.h5">@LabelText1</MudText>
            </MudItem>
            <MudItem md="6" Class="mt-3">
                <MudText Align="Align.Right" Typo="Typo.h4">Time Management</MudText>
            </MudItem>
            <MudItem md="6" Class="d-flex justify-start pl-16 mt-3">
                <MudRating @bind-SelectedValue="timeManagementScore"
                           FullIcon="@Icons.Material.Filled.Favorite"
                           EmptyIcon="@Icons.Material.Filled.FavoriteBorder"
                           Color="Color.Secondary"
                           RatingItemsStyle="width:3rem"
                           HoveredValueChanged="HandleHoveredValueChanged2"
                           Size="Size.Large" />
                <MudText Typo="Typo.h5">@LabelText2</MudText>
            </MudItem>

            <MudItem md="6" Class="mt-3">
                <MudText Align="Align.Right" Typo="Typo.h4">Guiding Approach</MudText>
            </MudItem>
            <MudItem md="6" Class="d-flex justify-start pl-16 mt-3">
                <MudRating @bind-SelectedValue="guidingApproachScore"
                           FullIcon="@Icons.Material.Filled.Favorite"
                           EmptyIcon="@Icons.Material.Filled.FavoriteBorder"
                           Color="Color.Secondary"
                           RatingItemsStyle="width:3rem"
                           HoveredValueChanged="HandleHoveredValueChanged3"
                           Size="Size.Large" />
                <MudText Typo="Typo.h5">@LabelText3</MudText>
            </MudItem>

            <MudItem md="6" Class="mt-3">
                <MudText Align="Align.Right" Typo="Typo.h4">Assignments Quality</MudText>
            </MudItem>
            <MudItem md="6" Class="d-flex justify-start pl-16 mt-3">
                <MudRating @bind-SelectedValue="assignmentsQualityScore"
                           FullIcon="@Icons.Material.Filled.Favorite"
                           EmptyIcon="@Icons.Material.Filled.FavoriteBorder"
                           Color="Color.Secondary"
                           RatingItemsStyle="width:3rem"
                           HoveredValueChanged="HandleHoveredValueChanged4"
                           Size="Size.Large" />
                <MudText Typo="Typo.h5">@LabelText4</MudText>
            </MudItem>

            <MudItem md="6" Class="mt-3">
                <MudText Align="Align.Right" Typo="Typo.h4">Recommend To Others</MudText>
            </MudItem>
            <MudItem md="6" Class="d-flex justify-start pl-16 mt-2">
                <MudRadioGroup @bind-Value="model.RecommendToOthers">
                    <MudRadio Value="true" Color="Color.Success" Size="Size.Large"><MudText Typo="Typo.h5">Yes</MudText></MudRadio>
                    <MudRadio Value="false" Color="Color.Error" Size="Size.Large"><MudText Typo="Typo.h5">No</MudText></MudRadio>
                </MudRadioGroup>
            </MudItem>
        </MudGrid>
        <MudTextField Lines="2" Variant="Variant.Outlined" Label="Any Comments" @bind-Value="model.Comments" Class="mt-8" Immediate="true" />
        <MudButton ButtonType="ButtonType.Submit"
                   Variant="Variant.Filled"
                   Color="Color.Tertiary"
                   Class="mt-5"
                   StartIcon="@Icons.Material.Filled.Save"
                   Disabled="(submitted || ValidationError || expired || string.IsNullOrEmpty(model.Comments))"
                   FullWidth>
            Submit
        </MudButton>
    </EditForm>
</MudContainer>

@code {

    [Parameter]
    public string Id { get; set; }

    public ReviewForm review = new();
    ConsultantRating model = new();
    public bool expired = false;
    public bool submitted = false;
    public string message = string.Empty;
    public string expiredMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        review = await Db.Reviews.FindAsync(Id) ?? new();

        expired = DateTime.UtcNow > review.Expiration;
        expiredMessage = expired ?
            $"Feedback form already expired on {review.Expiration?.ToLongDateString()}. Thanks for your interest on giving us valuable feedbacks." :
            string.Empty;
    }

    private async Task OnValidSubmit(EditContext context)
    {
        model.CourseContentScore = (byte)courseContentScore;
        model.TimeManagementScore = (byte)timeManagementScore;
        model.GuidingApproachScore = (byte)guidingApproachScore;
        model.AssignmentsQualityScore = (byte)assignmentsQualityScore;
        model.ReviewFormId = Id;
        Db.ConsultantRatings.Add(model);
        var rowsAffected = await Db.SaveChangesAsync();

        if (rowsAffected > 0)
        {
            submitted = true;
            message = "Thanks for taking time for feedback. We will keep on improving ourselves for better professional results.";
        }
        else
        {
            submitted = false;
            message = string.Empty;
        }
    }

    private int courseContentScore = 0;
    private int timeManagementScore = 0;
    private int guidingApproachScore = 0;
    private int assignmentsQualityScore = 0;
    private int? activeVal1;
    private int? activeVal2;
    private int? activeVal3;
    private int? activeVal4;

    public bool ValidationError => courseContentScore == 0 ||
        timeManagementScore == 0 ||
        guidingApproachScore == 0 ||
        assignmentsQualityScore == 0 ||
        model.Reviewer == "";

    private void HandleHoveredValueChanged1(int? val1) => activeVal1 = val1;
    private void HandleHoveredValueChanged2(int? val2) => activeVal2 = val2;
    private void HandleHoveredValueChanged3(int? val3) => activeVal3 = val3;
    private void HandleHoveredValueChanged4(int? val4) => activeVal4 = val4;

    private string LabelText1 => (activeVal1 ?? courseContentScore) switch
    {
        1 => "Ugly",
        2 => "Bad",
        3 => "Sufficient",
        4 => "Good",
        5 => "Amazing",
        _ => ""
    };

    private string LabelText2 => (activeVal2 ?? timeManagementScore) switch
    {
        1 => "Very Poor",
        2 => "Poor",
        3 => "Average",
        4 => "Good",
        5 => "Best",
        _ => ""
    };

    private string LabelText3 => (activeVal3 ?? guidingApproachScore) switch
    {
        1 => "Very Poor",
        2 => "Poor",
        3 => "Average",
        4 => "Good",
        5 => "Amazing",
        _ => ""
    };

    private string LabelText4 => (activeVal4 ?? assignmentsQualityScore) switch
    {
        1 => "Bad",
        2 => "Low",
        3 => "Average",
        4 => "Relevent",
        5 => "Educating",
        _ => ""
    };

    private void ToggleAnonymous(bool value)
    {
        model.IsAnonymous = value;
        model.Reviewer = value ? "Anonymous User" : "";
    }
}
