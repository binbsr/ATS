@page "/modules"

<PageTitle>Training Modules</PageTitle>

@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject ISnackbar SnackBar

<TagFilter TagDescription="module" RootFilterTriggered="RootFilterChanged" FilterTriggered="FilterTagsChanged" />
@if (loadingData)
{
        <MudGrid>
            <MudItem>
                <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="100px" Class="mb-3" />
                <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="100px" Class="mb-3" />
                <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="100px" Class="mb-3" />
            </MudItem>
            <MudItem>
                <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="100px" Class="mb-3" />
                    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="100px" Class="mb-3" />
                    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="100px" Class="mb-3" />
            </MudItem>
        </MudGrid>

}
else
{
        <ModulesSection SectionTitle="Use Case Assessments" Widgets="useCaseWidgets" />
        <ModulesSection SectionTitle="Common Tech Patterns" Widgets="commonTechWidgets" />
        <ModulesSection SectionTitle="Language and SDKs" Widgets="sdkAndLangWidgets" />
        <ModulesSection SectionTitle="Database Access" Widgets="dataAccessWidgets" />
        <ModulesSection SectionTitle="Web Development" Widgets="webWidgets" />
        <ModulesSection SectionTitle="Security" Widgets="securityWidgets" />
        <ModulesSection SectionTitle="DevOps" Widgets="devOpsgWidgets" />
        <ModulesSection SectionTitle="Networking" Widgets="networkingWidgets" />
        <ModulesSection SectionTitle="Machine Learning" Widgets="mlWidgets" />
        <ModulesSection SectionTitle="Data Science" Widgets="dataScienceWidgets" />
        <ModulesSection SectionTitle="Interns Special" Widgets="projectWorkeWidgets" />
        <ModulesSection SectionTitle="Other Modules" Widgets="OtherWidgets" />
}

@code {

    List<Widget> widgets = [];
    List<Widget> widgetFiltered = [];
    IEnumerable<Widget> commonTechWidgets => widgetFiltered.Where(x => x.Tags!.Any(y => y.Name == ModuleSection.Common));
    IEnumerable<Widget> sdkAndLangWidgets => widgetFiltered.Where(x => x.Tags!.Any(y => y.Name == ModuleSection.Sdk));
    IEnumerable<Widget> dataAccessWidgets => widgetFiltered.Where(x => x.Tags!.Any(y => y.Name == ModuleSection.DataAccess));
    IEnumerable<Widget> webWidgets => widgetFiltered.Where(x => x.Tags!.Any(y => y.Name == ModuleSection.Web));
    IEnumerable<Widget> securityWidgets => widgetFiltered.Where(x => x.Tags!.Any(y => y.Name == ModuleSection.Security));
    IEnumerable<Widget> networkingWidgets => widgetFiltered.Where(x => x.Tags!.Any(y => y.Name == ModuleSection.Networking));
    IEnumerable<Widget> devOpsgWidgets => widgetFiltered.Where(x => x.Tags!.Any(y => y.Name == ModuleSection.Devops));
    IEnumerable<Widget> mlWidgets => widgetFiltered.Where(x => x.Tags!.Any(y => y.Name == ModuleSection.Ml));
    IEnumerable<Widget> dataScienceWidgets => widgetFiltered.Where(x => x.Tags!.Any(y => y.Name == ModuleSection.DataScience));
    IEnumerable<Widget> useCaseWidgets => widgetFiltered.Where(x => x.Tags!.Any(y => y.Name == ModuleSection.UseCase));
    IEnumerable<Widget> projectWorkeWidgets => widgetFiltered.Where(x => x.Tags!.Any(y => y.Name == ModuleSection.ProjectWork));

    IEnumerable<Widget> OtherWidgets => widgetFiltered
        .Except(commonTechWidgets)
        .Except(sdkAndLangWidgets)
        .Except(dataAccessWidgets)
        .Except(webWidgets)
        .Except(securityWidgets)
        .Except(networkingWidgets)
        .Except(devOpsgWidgets)
        .Except(mlWidgets)
        .Except(dataScienceWidgets)
        .Except(useCaseWidgets)
        .Except(projectWorkeWidgets);

    private List<Tag> tags = [];
    private string selectedRootFilter = RootFilter.Internship;
    private List<string> selectedSecondaryFilters = [];
    bool loadingData;

    protected override async Task OnInitializedAsync()
    {
        loadingData = true;

        using var Db = DbFactory.CreateDbContext();
        widgets = await Db.Widgets.Where(x => x.Title == "Module").Include(x => x.Tags).OrderBy(x => x.Description).ToListAsync();

        if (widgets is null || widgets.Count == 0)
            return;

        GetFilteredModules(RootFilter.Internship, []);

        loadingData = false;
    }

    private void RootFilterChanged(string filterText)
    {
        selectedRootFilter = filterText;
        GetFilteredModules(filterText, selectedSecondaryFilters);
    }

    private void FilterTagsChanged(List<string> filterTexts)
    {
        selectedSecondaryFilters = filterTexts;
        GetFilteredModules(selectedRootFilter, filterTexts);        
    }

    private void GetFilteredModules(string rootFilter, List<string> secondaryTags)
    {
        if (rootFilter != RootFilter.All)
            widgetFiltered = widgets.Where(x => x.Tags!.Any(y => y.Name == selectedRootFilter)).ToList();
        else
            widgetFiltered = widgets;

        if (secondaryTags.Any())
        {            
            widgetFiltered = widgetFiltered.Where(x => x.Tags!.Any(y => secondaryTags.Contains(y.Name))).ToList();            
        }
    }

    private async Task DeleteInitiated(Widget widget)
    {
        using var Db = DbFactory.CreateDbContext();
        Db.Widgets.Remove(widget);

        var rowsAffected = await Db.SaveChangesAsync();

        if (rowsAffected > 0)
        {
            SnackBar.Add("Module Deleted successfully", Severity.Success);
            widgetFiltered.Remove(widget);
        }
        else
        {
            SnackBar.Add("Module Delete failed", Severity.Error);
        }
    }
}
