@if (Widgets.Any())
{
    <div class="border-b-2 border-solid mud-border-default mt-4 mb-2 py-1 d-flex">
        <MudAvatar Rounded>
            <MudIcon Icon="@Icon" Color="Color.Dark" />
        </MudAvatar>
        <MudText Typo="Typo.h6" Class="ml-2 mt-1">@SectionTitle</MudText>
        @if (techSelectionSections.Any(x => x == SectionTagFilter))
        {
            <MudSpacer />
            <MudToggleGroup T="string" CheckMark Color="Color.Dark" FixedContent>
                @foreach(var tech in backendTechs)
                {
                    <MudToggleItem Value="@tech" Text="@tech" />
                }
            </MudToggleGroup>
        }
    </div>
    <MudExpansionPanels Elevation="5" MultiExpansion="true" DisableBorders>
        <MudGrid Spacing="1">
            @foreach (var widget in Widgets)
            {
                <MudItem md="6" xs="12">
                    <Module Widget="@widget" DeleteCallBack="DeleteInitiated" />
                </MudItem>
            }
        </MudGrid>
    </MudExpansionPanels>
}

@code {

    [Parameter]
    public string SectionTitle { get; set; } = "Section";

    [Parameter]
    public string SectionTagFilter { get; set; } = "";

    [Parameter]
    public string Icon { get; set; } = Icons.Material.Sharp.Pattern;

    [Parameter]
    public IEnumerable<Widget> Widgets { get; set; } = [];

    [Parameter]
    public EventCallback<Widget> DeleteCallBack { get; set; }

    private string[] techSelectionSections = [ModuleSection.Sdk, ModuleSection.DataAccess, ModuleSection.Web];
    private string[] backendTechs = [BackendTech.NET, BackendTech.Java, BackendTech.Python, BackendTech.Node];

    private async Task DeleteInitiated(Widget widget)
    {
        await DeleteCallBack.InvokeAsync(widget);
    }
}