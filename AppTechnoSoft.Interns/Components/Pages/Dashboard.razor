@page "/dashboard"
@using AppTechnoSoft.Interns.Components.Account
@using Microsoft.AspNetCore.Identity

@attribute [Authorize]
@inject ApplicationDbContext Db

<PageTitle>Your dashboard</PageTitle>

@if (student is null)
{
    <MudText Typo="Typo.h5">
        Please complete your internship registration proces first.
        <MudLink Typo="Typo.h5" Href="/apply">Click Here</MudLink>
    </MudText>
}
else
{
    if (student.TeamId == null)
    {
        <MudText Typo="Typo.h5">You are not yet assigned to any team, please contact your admin/instructor.</MudText>
    }
    else
    {
        <MudText Typo="Typo.h6" Class="my-2">@((MarkupString)$"Your Study Batch: <strong>{loggedInUserBatchName}</strong> ({batchMembers.Count} Members)")</MudText>
        <MudPaper Class="p-4" Elevation="3">
            <MudAvatarGroup Max="8" Spacing="10" MaxColor="Color.Primary">
                @foreach (var member in batchMembers)
                {
                    <MudTooltip Text="@(loggedInUserId == member.UserId ? $"{member.Name} (You)" : member.Name)">
                        <MudAvatar Style="height:70px; width:70px; font-size:2rem;">
                            <MudImage Src="@member.ProfilePath" />
                        </MudAvatar>

                    </MudTooltip>
                }
            </MudAvatarGroup>
        </MudPaper>

        <MudText Typo="Typo.h6" Class="my-2 mt-5">@((MarkupString)$"Your Project Team: <strong>{loggedInUserTeamName}</strong> ({teamMembers.Count} Members)")</MudText>
        <MudPaper Class="p-4" Elevation="3">
            <MudAvatarGroup Max="8" Spacing="10" MaxColor="Color.Primary">
                @foreach (var member in teamMembers)
                {
                    <MudTooltip Text="@(loggedInUserId == member.UserId ? $"{member.Name} (You)" : member.Name)">
                        <MudAvatar Style="height:70px; width:70px; font-size:2rem;" Image="@member.ProfilePath" />

                    </MudTooltip>
                }
            </MudAvatarGroup>
        </MudPaper>
    }
}

@code {

    bool loadingData;
    string loggedInUserId;
    Student? student;
    string loggedInUserTeamName = string.Empty;
    string loggedInUserBatchName = string.Empty;
    List<StudentViewModel> teamMembers = new();
    List<StudentViewModel> batchMembers = new();
    record StudentViewModel(string Name, string UserId, string ProfilePath, string TeamName, string BatchName);

    [CascadingParameter]
    private Task<AuthenticationState> AuthTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        loadingData = true;
        var userTask = await AuthTask;
        var loggedInUser = userTask.User;
        loggedInUserId = loggedInUser.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;

        if (loggedInUserId is null)
            return;

        student = await Db.Students.Where(x => x.ApplicationUserId == loggedInUserId).Include(t => t.Team).ThenInclude(b => b.Batch).FirstOrDefaultAsync();

        if (student is null || student.TeamId is null)
            return;

        var batchId = student?.Team?.Batch?.Id;       

        if (batchId is null)
            return;

        loggedInUserTeamName = student.Team.Name;
        loggedInUserBatchName = student.Team.Batch.Name;

        batchMembers = await Db.Students.Where(x => x.Team.Batch.Id == batchId).Include(x => x.Team).ThenInclude(b => b.Batch).Select(x => new StudentViewModel(x.Name, x.ApplicationUserId, x.ProfileImagePath, x.Team.Name, x.Team.Batch.Name)).ToListAsync();
        teamMembers = batchMembers.Where(x => x.TeamName == loggedInUserTeamName).ToList();
        loadingData = false;
    }
}
