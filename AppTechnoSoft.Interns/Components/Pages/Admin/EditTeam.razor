@page "/add-team"
@page "/edit-team/{Id:int}"

@inject ApplicationDbContext Db
@inject ISnackbar SnackBar
@inject NavigationManager Navigation

<PageTitle>@pageTitle</PageTitle>

    <EditForm Model="@model"
              OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator />
        <MudTextField Label="Title" @bind-Value="model.Name" For="@(() => model.Name)" />
        <MudTextField Label="Description" Class="mt-3" @bind-Value="model.Description" For="@(() => model.Description)" />

        @if (!IsAdd)
        {
            <MudSelect T="string"
                       Dense="true"
                       Label="Members of this team"
                       MultiSelection="true"
                       @bind-SelectedValues="@studentsSelected"
                       Class="my-3"
                       MultiSelectionTextFunc="@(new Func<List<string>, string>(GetMultiSelectionText))"
                       AnchorOrigin="Origin.BottomCenter">
                @foreach (var student in students)
                {
                    <MudSelectItem Value="@student.Id">@student.Name</MudSelectItem>
                }
            </MudSelect>
        }

    <MudButton ButtonType="ButtonType.Submit"
               Variant="Variant.Filled"
               Color="Color.Primary"
               Class="mt-3"
               StartIcon="@Icons.Material.Filled.Save">
        Save Team
    </MudButton>
</EditForm>

@code {

    [Parameter]
    public int? Id { get; set; }

    Team model = new();
    bool success;
    string pageTitle;
    bool IsAdd => Id is null or 0;
    IEnumerable<string> studentsSelected;
    List<ListItem> students = new();
    record ListItem(string Id, string Name, int? TeamId);

    protected override async Task OnInitializedAsync()
    {
        students = await Db.Students.Select(x => new ListItem(x.Id, $"{x.Name} ({x.Email})", x.TeamId)).ToListAsync();
        studentsSelected = students.Where(x => x.TeamId == Id).Select(x => x.Id);

        if (IsAdd)
        {
            pageTitle = "Add Team";
        }
        else
        {
            pageTitle = "Edit Team";
            model = await Db.Teams.FindAsync(Id);
        }
    }

    private async Task OnValidSubmit(EditContext context)
    {
        if (IsAdd)
        {
            Db.Teams.Add(model);
        }
        else
        {
            model.Id = Id.Value;

            // Update student table
            Db.Students.Where(s => studentsSelected.Contains(s.Id)).ExecuteUpdate(x => x.SetProperty(y => y.TeamId, model.Id));
            Db.Teams.Update(model);
        }

        var rowsAffected = await Db.SaveChangesAsync();

        if (rowsAffected > 0)
        {
            SnackBar.Add("Team saved successfully", Severity.Success);
        }
        else
        {
            SnackBar.Add("Team save failed", Severity.Error);
        }

        Navigation.NavigateTo("/teams");
    }

    private string GetMultiSelectionText(List<string> selectedValues)
    {
        return $"{selectedValues.Count} student{(selectedValues.Count > 1 ? "s have" : " has")} been selected";
    }
}
