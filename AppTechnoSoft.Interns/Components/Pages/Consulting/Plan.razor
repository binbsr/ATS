@page "/consulting/plans/{Hash:guid}"
@rendermode @(new InteractiveServerRenderMode(false))

<PageTitle>@($"{model.Organization?.Name ?? ""} - {model.Title}")</PageTitle>

@inject ApplicationDbContext Db

@if (loading)
{
    <Loading />
}
else
{
    <MudGrid Class="px-8">
        <MudItem xs="12" Style="text-align:center" Class="my-4">
            <MudChip T="string" Class="p-4" Label="true">
                <MudText Typo="Typo.h4" Align="Align.Center">@model.Title</MudText>
            </MudChip>
        </MudItem>
        <MudItem xs="12" md="6">
            <MudText Typo="Typo.button" Style="font-size:1.1rem;" Align="Align.Center">Training Summary</MudText>
            <MudPaper Class="border p-4" Elevation="0" Square>
                <MudGrid>
                    <MudItem md="6" xs="12">
                        <MudStack>
                            <MudText Typo="Typo.h6">
                                Course Code
                                <MudText Typo="Typo.subtitle1">@(model?.CourseQuote?.Code ?? "N/A")</MudText>
                            </MudText>
                            <MudText Typo="Typo.h6">
                                Course Description
                                <MudText Typo="Typo.subtitle1">@(model?.CourseQuote?.Description ?? "N/A")</MudText>
                            </MudText>
                            <MudText Typo="Typo.h6">
                                Coaching Duration
                                <MudText Typo="Typo.subtitle1">@("Hour".ToQuantity(model.DurationHours))</MudText>
                            </MudText>
                            <MudText Typo="Typo.h6">
                                Coaching Status
                                @{
                                    var color = model.Status switch
                                    {
                                        TrainingStatus.Drafted => Color.Error,
                                        TrainingStatus.InProgress => Color.Warning,
                                        TrainingStatus.Completed => Color.Success,
                                        _ => Color.Info
                                    };
                                }
                                <MudText>
                                    <MudChip Value="@model.Status" Color="@color" Label="true" Class="ml-0" />
                                </MudText>
                            </MudText>
                        </MudStack>
                    </MudItem>
                    <MudItem md="6" xs="12">
                        <MudStack>
                            <MudText Typo="Typo.h6">
                                Beneficiary
                                <MudText Typo="Typo.subtitle1">@(model?.Organization?.Name ?? "N/A")</MudText>
                            </MudText>
                            <MudText Typo="Typo.h6">
                                Covered Resources
                                <MudText>
                                    <strong>@((model?.CourseQuote?.Modules?.Count) ?? 0)</strong> Module(s)
                                    <strong>@((model?.Assignments?.Count) ?? 0)</strong> Assignment(s)
                                    <strong>@((model?.Projects?.Count) ?? 0)</strong> Project(s)
                                </MudText>
                            </MudText>
                            <MudText Typo="Typo.h6">
                                Attendees
                                <MudText>
                                    <MudTooltip Text="@(string.Join(", " , employeeProfiles.Select(x => x.Name)))" Arrow="true">
                                        @employeeProfiles.Count() Pax
                                    </MudTooltip>
                                </MudText>

                            </MudText>
                            <MudText Typo="Typo.h6">
                                Training Drafted
                                <MudText Typo="Typo.subtitle1">@(model?.Created?.ToLongDateString() ?? "N/A")</MudText>
                            </MudText>
                        </MudStack>
                    </MudItem>
                </MudGrid>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" md="6">
            <MudText Typo="Typo.button" Style="font-size:1.1rem;" Align="Align.Center">Consultant Details</MudText>
            <MudPaper Class="border p-4" Elevation="0" Square>
                <MudGrid Class="d-flex align-center">
                    <MudItem xs="12">
                        <MudStack>
                            <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.Center" Wrap="Wrap.Wrap">
                                <MudText Typo="Typo.h6">
                                    @(model.Instructor?.Name ?? "N/A")
                                    <MudText Typo="Typo.body2">@model.Instructor?.Email</MudText>
                                </MudText>
                                <MudAvatar Variant="Variant.Outlined" Style="height:120px; width:120px; font-size:2rem;">
                                    <MudImage Src="@model.Instructor?.ProfilePath" />
                                </MudAvatar>
                                <MudText Typo="Typo.h6">
                                    @(model.Instructor?.Role ?? "N/A")
                                    <MudText Typo="Typo.body2">@model.Instructor?.Organization</MudText>
                                </MudText>
                            </MudStack>
                            <MudStack Row Wrap="Wrap.Wrap" Spacing="0" Justify="Justify.Center">
                                @foreach (var tag in model.Instructor?.Tags ?? [])
                                {
                                    <MudChip Label="true" Value="@tag.Name" Style="@($"background:{tag.ColorCode}")" />
                                }
                            </MudStack>
                        </MudStack>
                    </MudItem>
                    <MudItem xs="12">
                        <MudText Typo="Typo.subtitle1" Align="Align.Justify">
                            @model.Instructor?.Resume
                        </MudText>
                    </MudItem>
                </MudGrid>
            </MudPaper>
        </MudItem>
        <MudItem xs="12">
            <MudText Typo="Typo.button" Style="font-size:1.1rem;">Course Module Details</MudText>
            <MudPaper Elevation="0" Class="py-8 border" Square>
                <MudGrid Class="px-8">
                    @foreach (var module in model?.CourseQuote?.Modules?.OrderBy(x => x.Description).ToArray() ?? [])
                    {
                        <MudItem xs="12" md="6">
                            <ModuleReadOnly Widget="module" />
                        </MudItem>
                    }
                </MudGrid>
            </MudPaper>
        </MudItem>
        <MudItem xs="12">
            @if (model?.Assignments?.Any() ?? false)
            {
                <MudText Typo="Typo.button" Style="font-size:1.1rem;">Assignment Details</MudText>
                <MudPaper Elevation="0" Class="p-4 border" Square>
                    <MudStack Row Wrap="Wrap.Wrap" Spacing="5">
                        @foreach (var assignment in model?.Assignments?.OrderBy(x => x.Title).ToArray() ?? [])
                        {
                            <MudPaper Elevation="0" Class="p-4 border" Square Style="text-align:center;">
                                <MudChip T="string" Label="true" Size="Size.Large" Class="mb-2">
                                    <MudText Typo="Typo.h6">Assignment</MudText>
                                </MudChip>
                                <MudText Typo="Typo.h6">
                                    @assignment.Title
                                    <MudText Typo="Typo.body2">On <b>@assignment?.Module?.Description</b> Module</MudText>
                                </MudText>
                            </MudPaper>
                        }
                    </MudStack>
                </MudPaper>
            }
        </MudItem>
        <MudItem xs="12">
            @if (model?.Projects?.Any() ?? false)
            {
                <MudText Typo="Typo.button" Style="font-size:1.1rem;">Project Details</MudText>
                <MudPaper Elevation="0" Class="p-4 border" Square>
                    <MudStack Row Wrap="Wrap.Wrap" Spacing="5">
                        @foreach (var project in model?.Projects?.OrderBy(x => x.Title).ToArray() ?? [])
                        {
                            <MudPaper Elevation="0" Class="p-4 border" Square Style="text-align:center">
                                <MudChip T="string" Label="true" Size="Size.Large" Class="mb-2">
                                    <MudText Typo="Typo.h6">Project</MudText>
                                </MudChip>
                                <MudText Typo="Typo.h6">
                                    @project.Title
                                    <MudText Typo="Typo.body2">@project.RepoUrl</MudText>
                                </MudText>
                            </MudPaper>
                        }
                    </MudStack>
                </MudPaper>
            }
        </MudItem>
        @if (model.Status == TrainingStatus.Completed)
        {
            <MudItem xs="12">
                <MudText Typo="Typo.button" Style="font-size:1.1rem;">Attendees Performance</MudText>
                <MudTable Items="@employeeProfiles" Hover="true" Class="p-4 border" Elevation="0" Dense="true">
                    <HeaderContent>
                        <MudTh></MudTh>
                        <MudTh>Public Profile</MudTh>
                        @if (employeeProfiles?.Any() ?? false)
                        {
                            var length = employeeProfiles.Select(x => x.Assignments?.Length)?.Max() ?? 0;
                            for (byte j = 1; j <= length; j++)
                            {
                                var index = j;
                                <MudTh>Assignment @index</MudTh>
                            }
                        }
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Name">
                            <MudStack Row AlignItems="AlignItems.Center">                                
                                <UserProfile AvatarPath="@context.AvatarPath" Name="@context.Name" Horizontal="true" />
                            </MudStack>
                        </MudTd>
                        <MudTd DataLabel="Profile">
                            <MudLink Href="@($"/profile/professional/{context.Id}")" Target="_blank">
                                <MudIcon Icon="@Icons.Material.Sharp.OpenInNew" />
                                @context.Id
                            </MudLink>
                        </MudTd>
                        @{
                            byte i = 1;
                        }
                        @foreach (var assignment in context.Assignments ?? [])
                        {
                            var assignmentLabel = $"Assignment {i++}";
                            <MudTd DataLabel="@assignmentLabel">
                                <ProblemSolverLabel Score="assignment.Evaluation" />
                                <br />
                                <StatusIndicator Assignment="@(new ("", "", assignment.ReturnDate, assignment.Deadline, assignment.Evaluation, assignment.Status))" />
                            </MudTd>
                        }
                    </RowTemplate>
                </MudTable>
            </MudItem>
        }
        <MudItem></MudItem>
    </MudGrid>
}

@code {

    [Parameter]
    public Guid? Hash { get; set; }

    Training model = new();
    List<Student> batchStudents = [];
    IEnumerable<ProfessionalViewModel> employeeProfiles = [];
    bool loading = false;

    protected override async Task OnInitializedAsync()
    {
        if (Hash is null)
            return;

        loading = true;
        model = await Db.Training
            .Include(x => x.Organization)
            .Include(x => x.Assignments)
            .Include(x => x.Projects)
            .Include(x => x.Instructor)
            .ThenInclude(x => x.Tags)
            .Include(x => x.CourseQuote)
            .ThenInclude(y => y.Modules)
            .FirstOrDefaultAsync(x => x.Hash == Hash.ToString()) ?? new();

        if (model.Status == TrainingStatus.Completed)
        {
            var students = await Db.Students
                .Where(x => x.TrainingId == model.Id)
                .Select(x => new
                {
                    Id = x.Id,
                    Name = x.Name,
                    Avatar = x.ProfileImagePath
                })
                .ToArrayAsync();

            var studentAssignments = await Db.StudentAssignments
                .Where(y => students.Select(x => x.Id).Contains(y.StudentId))
                .OrderBy(y => y.TurnInDate)
                .GroupBy(y => y.StudentId)
                .ToArrayAsync();

            employeeProfiles = from student in students
                               join studentAssignment in studentAssignments on student.Id equals studentAssignment.Key
                               select new ProfessionalViewModel(
                                   student.Id,
                                   student.Name,
                                   student.Avatar,
                                   Assignments: studentAssignment.OrderBy(x => x.TurnInDate).ToArray()
                               );
        }

        loading = false;
    }
}
