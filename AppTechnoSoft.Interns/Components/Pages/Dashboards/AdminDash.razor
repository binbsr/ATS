@page "/dashboard/admin"

@using ApexCharts

@attribute [Authorize(Roles = Role.Admins)]
@inject IDbContextFactory<ApplicationDbContext> DbFactory

<PageTitle>Admin Dashboard</PageTitle>

@if (loadingData)
{
    <MudText Align="MudBlazor.Align.Center">
        <MudProgressCircular Indeterminate Color="MudBlazor.Color.Tertiary" Size="MudBlazor.Size.Medium" />
    </MudText>
}
else
{
    <MudGrid Class="mt-3">
        <MudItem md="4">
            <MudPaper Elevation="5" Class="pa-5">
                <ApexChart TItem="StudentByProgramAggregate"
                           Title="Trainees by programs"
                           Options="options">

                    <ApexPointSeries TItem="StudentByProgramAggregate"
                                     Items="studentsByPrograms"
                                     SeriesType="SeriesType.Donut"
                                     Name="Tech Program"
                                     XValue="@(e => e.Program)"
                                     YAggregate="@(e => e.Sum(d => d.Students.Count))"
                                     OrderByDescending="e=>e.Y" />
                </ApexChart>
            </MudPaper>
        </MudItem>

        <MudItem md="4">
            <MudPaper Elevation="5" Class="pa-5">
                <ApexChart TItem="StudentByStatusAggregate"
                           Title="Trainees by status"
                           Options="optionsStatus">

                    <ApexPointSeries TItem="StudentByStatusAggregate"
                                     Items="studentsByStatus"
                                     SeriesType="SeriesType.Donut"
                                     Name="Student Status"
                                     XValue="@(e => e.Status)"
                                     YAggregate="@(e => e.Sum(d => d.Students.Count))"
                                     OrderByDescending="e=>e.Y" />
                </ApexChart>
            </MudPaper>
        </MudItem>

        <MudItem md="4">
            <MudPaper Elevation="5" Class="pa-5">
                <ApexChart TItem="StudentByBatchAggregate"
                           Title="Trainees by Batch"
                           Options="optionsBatch">

                    <ApexPointSeries TItem="StudentByBatchAggregate"
                                     Items="studentsByBatch"
                                     SeriesType="SeriesType.Donut"
                                     Name="Student Batch"
                                     XValue="@(e => e.Batch)"
                                     YAggregate="@(e => e.Sum(d => d.Students.Count))"
                                     OrderByDescending="e=>e.Y" />
                </ApexChart>
            </MudPaper>
        </MudItem>

        <MudItem md="12">
            <MudPaper Elevation="5" Class="pa-5">
                <MudStack Row AlignItems="AlignItems.Baseline">
                    <MudText Typo="Typo.h6" Align="MudBlazor.Align.Center" Class="mb-5">Applied students list by their competency levels</MudText>
                    <MudSelect T="Status" 
                        MultiSelection
                        SelectAll
                        @bind-SelectedValues="traineeStatuses" 
                        Label="Trainee status to include on results"
                        AnchorOrigin="Origin.BottomCenter">
                        @foreach (var status in Enum.GetValues<Status>())
                        {
                            <MudSelectItem T="Status" Value="@status">@status</MudSelectItem>
                        }
                    </MudSelect>
                </MudStack>
                <MudExpansionPanels MultiExpansion>
                    @foreach (var group in filteredStudentsByCompentencies)
                    {
                        <MudExpansionPanel Style="font-weight:bold;"
                                           Text="@($"{group.Competency} - {group.Students.Count} applicants")">
                            <MudList>
                                @foreach (var student in group.Students)
                                {
                                    <MudListItem Dense="true">
                                        <MudImage Src="@(student.ProfileImagePath is null or "" ? "favicon.png" : student.ProfileImagePath)" Class="mr-3 rounded" Height="36" />
                                        @($"{student.Name} ({student.Phone}, {student.TechProgram!.Name}, {student.College!.Name})")
                                    </MudListItem>
                                }
                            </MudList>
                        </MudExpansionPanel>
                    }
                </MudExpansionPanels>
            </MudPaper>
        </MudItem>
    </MudGrid>
}

@code {

    bool loadingData = false;

    private record StudentByProgramAggregate(string Program, List<Student> Students);
    private record StudentByStatusAggregate(string Status, List<Student> Students);
    private record StudentByBatchAggregate(string Batch, List<Student> Students);
    private record StudentByCompetencyAggregate(string Competency, List<Student> Students);

    private IEnumerable<Status> traineeStatuses = [Status.Applied];
    private IEnumerable<StudentByProgramAggregate> studentsByPrograms = [];
    private IEnumerable<StudentByStatusAggregate> studentsByStatus = [];
    private IEnumerable<StudentByBatchAggregate> studentsByBatch = [];
    private ApexChartOptions<StudentByProgramAggregate> options { get; set; } = new();
    private ApexChartOptions<StudentByStatusAggregate> optionsStatus { get; set; } = new();
    private ApexChartOptions<StudentByBatchAggregate> optionsBatch { get; set; } = new();

    private IEnumerable<StudentByCompetencyAggregate> appliedStudentsByCompentencies = [];
    private IEnumerable<StudentByCompetencyAggregate> filteredStudentsByCompentencies => 
        appliedStudentsByCompentencies.Where(x => x.Students.Any(y => traineeStatuses.Contains(y.Status)));

    protected override async Task OnInitializedAsync()
    {
        loadingData = true;
        var plotOptions = new PlotOptions
            {
                Pie = new PlotOptionsPie
                {
                    Donut = new PlotOptionsDonut
                    {
                        Labels = new DonutLabels
                        {
                            Total = new DonutLabelTotal { FontSize = "24px", Color = "#D807B8", Formatter = @"function (w) {return w.globals.seriesTotals.reduce((a, b) => { return (a + b) }, 0)}" }
                        }
                    }
                }
            };

        options.PlotOptions = plotOptions;
        optionsStatus.PlotOptions = plotOptions;
        optionsBatch.PlotOptions = plotOptions;
        optionsBatch.Legend = new Legend { Position = LegendPosition.Bottom };

        using var Db = DbFactory.CreateDbContext();
        var allStudents = await Db.Students.Include(x => x.TechProgram).Include(y => y.College).Include(z => z.Batch).ToListAsync();

        if (allStudents is null || !allStudents.Any())
        {
            loadingData = false;
            return;
        }

        // Group by programs
        studentsByPrograms = allStudents
           .GroupBy(x => new { x.TechProgram!.Name, x.TechProgram.Affliation })
           .Select(y => new StudentByProgramAggregate($"{y.Key.Name}({y.Key.Affliation})", y.ToList()));

        // Group students by stage
        studentsByStatus = allStudents
            .GroupBy(x => x.Status)
            .Select(y => new StudentByStatusAggregate(y.Key.ToString(), y.ToList()));

        // Group by batch
        studentsByBatch = allStudents
           .GroupBy(x => x.Batch?.Name ?? "Not Batched")
           .Select(y => new StudentByBatchAggregate(y.Key, y.ToList()));

        // Group by compentences
        var appliedGroups = allStudents
            .GroupBy(x => new { x.GeneralProgramming, x.WebExperience, x.DbExperience });

        appliedStudentsByCompentencies = appliedGroups
            .Select(x => new StudentByCompetencyAggregate($"{x.Key.GeneralProgramming}, {x.Key.WebExperience}, {x.Key.DbExperience}", x.ToList()));

        loadingData = false;
    }
}
