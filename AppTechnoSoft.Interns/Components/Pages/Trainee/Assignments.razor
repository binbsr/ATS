@page "/assignments/me"

<ApplicationAlert Text="No new assignments" />

@attribute [Authorize(Roles = Role.Trainee)]
@inject ApplicationDbContext Db
@inject ISnackbar SnackBar

<PageTitle>My Assignments</PageTitle>

<MudTable Items="@assignments"
          Hover="true"
          Outlined
          Loading="@loadingData">    
    <HeaderContent>
        <MudTh>#</MudTh>
        <MudTh>Title</MudTh>
        <MudTh>Deadline</MudTh>
        <MudTh>Instructor</MudTh>
        <MudTh>Status</MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="#">@(assignments.IndexOf(context) + 1)</MudTd>
        <MudTd DataLabel="Title">@context.AssignmentTitle</MudTd>
        <MudTd DataLabel="Deadline">@context.Deadline</MudTd>
        <MudTd DataLabel="Instructor">@context.InstructorName</MudTd>
        <MudTd DataLabel="Status">@context.Status</MudTd>
        <MudTd>
            <MudButton Variant="Variant.Outlined" Size="Size.Small"
                       Color="@(context.ShowDetails ? Color.Warning : Color.Success)"
                       StartIcon="@Icons.Material.Sharp.RemoveRedEye"
                       OnClick="@(() => ShowBtnPress(context))">
                @((context.ShowDetails == true) ? "Hide" : "Show") Assignment
            </MudButton>
        </MudTd>
        <MudTd>
            <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Small" Color="Color.Warning" Href="@("/assignments/edit/" + context.Id)" />            
        </MudTd>
    </RowTemplate>
    <ChildRowContent>
        @if (context.ShowDetails)
        {
            <td colspan="7">
                <MudTabs ApplyEffectsToContainer="true" PanelClass="pa-6" Outlined SliderColor="Color.Tertiary">
                    <MudTabPanel Text="Assignmet Ask">
                        @((MarkupString)(context.AssignmentBody?.ToHtmlString() ?? ""))
                    </MudTabPanel>
                    <MudTabPanel Text="Solution Details">
                    </MudTabPanel>
                </MudTabs>
            </td>
        }
    </ChildRowContent>
    <PagerContent>
        <MudTablePager PageSizeOptions="[15, 30, 50, 100, 200]" />
    </PagerContent>
</MudTable>


@code {
    [CascadingParameter]
    private Task<AuthenticationState> AuthTask { get; set; } = null!;

    private List<StudentAssignmentViewModel> assignments = new();

    private bool loadingData = false;
    private string searchString = string.Empty;
    private MudMessageBox mbox { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        loadingData = true;

        var userTask = await AuthTask;
        var loggedInUser = userTask.User;
        var loggedInUserId = loggedInUser.GetUserId();

        var assignmentModels = await Db.StudentAssignments
            .Include(x => x.Assignment)
            .Include(x => x.Instructor)
            .Where(x => x.Student!.ApplicationUserId == loggedInUserId)
        .ToListAsync();

        assignments = assignmentModels.ToViewModel();

        loadingData = false;
    }

    private void ShowBtnPress(StudentAssignmentViewModel studentAssignmentViewModel)
    {
        studentAssignmentViewModel.ShowDetails = !studentAssignmentViewModel.ShowDetails;
    }
}
