@page "/dashboard/instructor"

@attribute [Authorize(Roles = Role.AdminsAndInstructor)]

@inject IDbContextFactory<ApplicationDbContext> DbFactory

<PageTitle>Instrutor Dashboard</PageTitle>

@if (loadingData)
{
    <MudProgressCircular Indeterminate Color="Color.Tertiary" />
}
else if (instructor is null)
{
    <ApplicationAlert Text="We couldn't find you on instructors pool, please contact AppSoft admin." />
}
else
{
    <MudPaper Class="p-2 mb-2" Elevation="10">
        <MudChipSet Filter SelectedChipChanged="BatchChanged" Mandatory>
            @foreach (var group in classesByBatch)
            {
                <MudChip Variant="Variant.Outlined"
                         Color="Color.Tertiary"
                         Value="group.Key"
                         Label
                         Class="p-4"
                         Style="font-size:1.3rem;">
                    @group.Key!.Name
                </MudChip>
            }
        </MudChipSet>
    </MudPaper>

    @if (loadingAttendaceData)
    {
        <MudProgressCircular Indeterminate Color="Color.Tertiary" />
    }
    else
    {
        <MudSimpleTable Style="overflow-x: auto;" Dense Outlined>
            <thead>
                <tr>
                    <th style="position:sticky;left:0;background:#4DB6AC;font-size:1.3rem;text-align:center;">Trainees</th>
                    @foreach (var h in headings)
                    {
                        <th style="@(!h.IsOfficeDay() ? $"background: {Colors.DeepOrange.Lighten2}" : $"background: {Colors.Teal.Lighten2}")">@h.ToString("dddd, MMM d")</th>
                    }
                </tr>
            </thead>
            <tbody>
                @foreach (var row in studentAttendances)
                {
                    <tr>
                        <td style="position:sticky;left:0;background:#4DB6AC;z-index:10;">
                            <MudStack Row>
                                <MudAvatar>
                                    <MudImage Src="@row.Key.Profile" />
                                </MudAvatar>
                                <MudText>@row.Key.Name</MudText>
                            </MudStack>

                        </td>
                        @foreach (var date in headings)
                        {
                            var hasClassSchdeule = classesByBatch
                            .FirstOrDefault(x => x.Key == selectedBatch)
                            ?.Any(y => y.ClassStart.Date == date.Date) ?? false;


                            if (!date.IsOfficeDay())
                            {
                                <td style="@($"background: {Colors.DeepOrange.Lighten2}")" title="Weekend"></td>
                            }
                            else if (date > DateTime.Today)
                            {
                                <td style="@($"background: {Colors.Grey.Lighten1}")" title="Upcoming classes"></td>
                            }
                            else if (!hasClassSchdeule)
                            {
                                <td style="@($"background: {Colors.DeepOrange.Lighten3}")" title="No classes"></td>
                            }
                            else
                            {
                                var attendance = row.Value.FirstOrDefault(x => x.Date.ToShortDateString() == date.ToShortDateString());

                                <td style="text-align:center">
                                    @if (attendance is null)
                                    {
                                        <MudAvatar Color="Color.Error">A</MudAvatar>
                                    }
                                    else
                                    {
                                        if (attendance.PunchOut == null || attendance.PunchOut == TimeOnly.MinValue)
                                        {
                                            <MudBadge Color="Color.Error" Icon="@Icons.Material.Sharp.CallMissed" Overlap Bordered>
                                                <MudTooltip Text="@($"Punchin - {attendance.PunchIn} Punchout - Missed")">
                                                    <MudAvatar Color="Color.Tertiary">P</MudAvatar>
                                                </MudTooltip>
                                            </MudBadge>
                                        }
                                        else
                                        {
                                            <MudTooltip Text="@($"Punchin - {attendance.PunchIn} Punchout - {attendance.PunchOut}")">
                                                <MudAvatar Color="Color.Tertiary">P</MudAvatar>
                                            </MudTooltip>
                                        }
                                    }
                                </td>
                            }
                        }
                    </tr>
                }
            </tbody>
        </MudSimpleTable>
    }
}

@code {

    [CascadingParameter]
    private Task<AuthenticationState> AuthTask { get; set; } = null!;

    private record StudentAttedance(DateOnly Date, TimeOnly? PunchIn, TimeOnly? PunchOut);

    Dictionary<(string Name, string? Profile), IEnumerable<StudentAttedance>> studentAttendances = [];
    bool loadingData = false;
    bool loadingAttendaceData = false;
    Instructor? instructor = null;
    DateTime[] headings = [];
    IEnumerable<IGrouping<Batch?, ClassSchedule>> classesByBatch = [];
    Batch selectedBatch = null!;

    protected override async Task OnInitializedAsync()
    {
        loadingData = true;

        var userTask = await AuthTask;
        var loggedInUser = userTask.User;
        var loggedInUserId = loggedInUser.GetUserId();

        if (loggedInUserId == string.Empty)
            return;

        using (var Db = DbFactory.CreateDbContext())
        {
            instructor = await Db.Instructors.FirstOrDefaultAsync(x => x.ApplicationUserId == loggedInUserId);

            if (instructor is null)
            {
                loadingData = false;
                return;
            }

            var classes = await Db.ClassSchedules.Include(y => y.Batch).Where(x => x.InstructorId == instructor.Id).ToListAsync();

            classesByBatch = classes.GroupBy(x => x.Batch);
        }

        loadingData = false;
    }

    private async Task BatchChanged(MudChip chip)
    {
        //fetch students and attendances for this batch selection
        var batch = (Batch)chip.Value;
        if (batch is null)
            return;

        selectedBatch = batch;
        var batchId = batch.Id;
        headings = batch.Start.Until(batch.End);

        loadingAttendaceData = true;
        using var Db = DbFactory.CreateDbContext();

        var attendances = await Db.Attendances
            .Where(x => x.Student.BatchId == batchId)
            .Select(x => new
            {
                Name = x.Student.Name,
                Profile = x.Student.ProfileImagePath,
                Date = x.Date,
                PunchIn = x.PunchIn,
                PunchOut = x.PunchOut
            })
            .GroupBy(y => new { y.Name, y.Profile })
            .ToListAsync();

        attendances.ForEach(x => studentAttendances.Add((x.Key.Name, x.Key.Profile), x.Select(y => new StudentAttedance(y.Date, y.PunchIn, y.PunchOut))));
        loadingAttendaceData = false;
    }
}
