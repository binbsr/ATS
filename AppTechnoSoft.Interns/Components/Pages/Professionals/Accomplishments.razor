@page "/my/accomplishments"

@inject ApplicationDbContext Db

<PageTitle>Professional Training Accomplishments</PageTitle>

@if (employee is null)
{
    <ApplicationAlert Text="You are not yet enrolled or part of any batch." Navigation="/join" />
}
else
{
    <MudText Align="Align.Center" Class="mt-2 mb-0">
        <MudLink Href="@($"/profile/professional/{employee.Id}")" Target="_blank" Style="font-size:1.5rem">Public Profile <MudIcon Icon="@Icons.Material.Sharp.OpenInNew" /></MudLink>
    </MudText>

    <Accomplishment TraineeId="@employee.Id" Batch="@batchId" />
}

@code {

    [CascadingParameter]
    private Task<AuthenticationState> AuthTask { get; set; }

    private ProfessionalViewModel employee = null!;
    private List<TraineeTask> tasks = [];
    private int? batchId;

    protected override async Task OnInitializedAsync()
    {
        var state = await AuthTask;
        var loggedInUserId = state.User.GetUserId();

        var student = await Db.Students
            .Where(y => y.ApplicationUserId == loggedInUserId)
            .Select(x => new
            {
                Id = x.Id,
                BatchId = x.BatchId,
                Name = x.Name,
                Status = x.Status,
                AvatarPath = x.ProfileImagePath,
                Training = x.Training.Title ?? "None",
                Organization = x.Training.Organization.Name ?? "None"
            })
            .FirstOrDefaultAsync();

        if (student is null)
            return;

        batchId = student.BatchId;

        employee = new ProfessionalViewModel(
            student.Id,
            student.Name,
            student.AvatarPath ?? "/person.png",
            student.Status,
            student.Training,
            student.Organization);
    }
}
