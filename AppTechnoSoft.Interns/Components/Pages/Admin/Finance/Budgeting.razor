@page "/budgeting"

@using ApexCharts

@inject ApplicationDbContext Db

<PageTitle>Batch Budgeting</PageTitle>

@if (!batchBudgets?.Any() ?? true)
{
    <Loading />
}
else
{
    <MudGrid>
        <MudItem md="12">
            <MudFab Href="/budgeting/adjust"
                    Class="mt-2"
                    StartIcon="@Icons.Material.Filled.Add"
                    title="Adjust Batch Budgets"
                    Size="MudBlazor.Size.Small"
                    Color="MudBlazor.Color.Tertiary">
            </MudFab>
        </MudItem>
        @foreach (var batchBudget in batchBudgets)
        {
            <MudItem md="4">
                <MudPaper Elevation="5" Class="pa-5">
                    <ApexChart TItem="BatchBudget"
                               Title="@batchBudget.Key"
                               Options="options">

                        <ApexPointSeries TItem="BatchBudget"
                                         Items="batchBudget"
                                         SeriesType="SeriesType.Donut"
                                         Name="Type"
                                         XValue="@(e => e.BudgetType)"
                                         YAggregate="@(e => (decimal)e.Sum(d => d.Amount))"
                                         OrderByDescending="e=>e.Y" />
                    </ApexChart>
                </MudPaper>
            </MudItem>
        }

    </MudGrid>
}

@code {

    private record BatchBudgetRoot(string Batch, float? Revenue)
    {
        public IEnumerable<BatchBudget>? Budgets { get; set; }
    }

    private string _searchString = string.Empty;
    private List<IGrouping<string, BatchBudget>> batchBudgets = [];

    private ApexChartOptions<BatchBudget> options => new ApexChartOptions<BatchBudget>
        {
            Title = new() { Align = ApexCharts.Align.Center },
            Legend = new() { Position = LegendPosition.Bottom },
            PlotOptions = new()
            {
                Pie = new()
                {
                    Donut = new()
                    {
                        Labels = new()
                        {
                            Total = new()
                            {
                                FontSize = "20px",
                                Color = "#D807B8",
                                Formatter = @"function (w) {return w.globals.seriesTotals.reduce((a, b) => { return (a + b) }, 0)}"
                            }
                        }
                    }
                }
            }
        };

    protected override async Task OnInitializedAsync()
    {
        batchBudgets = await Db.BatchBudgets
            .Include(x => x.Batch)
            .GroupBy(x => x.Batch.Name)
            .ToListAsync();
    }
}
