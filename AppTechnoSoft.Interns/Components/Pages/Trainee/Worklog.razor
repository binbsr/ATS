@page "/logwork"

@inject ApplicationDbContext Db
@inject NavigationManager Navigation
@inject ISnackbar SnackBar

<PageTitle>Worklog</PageTitle>

@if (studentModel is null)
{
    <ApplicationAlert />
}
else
{
    <EditForm Model="@viewModel" OnValidSubmit="OnValidSubmit">
        <MudCard Class="p-2">
            <MudCardContent>
                <MudGrid>
                    <MudItem md="4" xs="12">
                        <MudText Align="Align.Center" Typo="Typo.h6" Class="mb-2">Log Date</MudText>
                        <MudDatePicker Label="Date" @bind-Date="viewModel.Date" PickerVariant="PickerVariant.Static" Color="Color.Secondary"
                                       IsDateDisabledFunc="@((DateTime dt)=>(dt > DateTime.Today) || (DateTime.Now.Date >= dt.AddDays(3).Date) || (int)dt.DayOfWeek == 0 || (int)dt.DayOfWeek == 6)"
                                       AdditionalDateClassesFunc="@((DateTime dt)=>((int)dt.DayOfWeek == 0 ? "red-text text-accent-4" : ""))" />
                    </MudItem>
                    <MudItem md="4" sm="12">
                        <MudText Align="Align.Center" Typo="Typo.h6" Class="mb-2">Punchin Time</MudText>
                        <MudTimePicker AmPm @bind-Time="viewModel.PunchIn" PickerVariant="PickerVariant.Static" Color="Color.Secondary" />
                     </MudItem>
                     <MudItem md="4" sm="12">
                         <MudText Align="Align.Center" Typo="Typo.h6" Class="mb-2">Punchout Time</MudText>
                         <MudTimePicker AmPm @bind-Time="viewModel.PunchOut" PickerVariant="PickerVariant.Static" Color="Color.Secondary" />
                     </MudItem>
                 </MudGrid>
                 <MudTextField Variant="Variant.Outlined" Label="Your task(s)" Lines="5" Class="mt-3" @bind-Value="viewModel.Task" />
             </MudCardContent>
             <MudCardActions>
                 <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" StartIcon="@Icons.Material.Sharp.Save">
                     Save Log
                 </MudButton>
             </MudCardActions>
         </MudCard>
     </EditForm>
}

@code {

    private AttendanceViewModel viewModel = null!;
    private Student studentModel = null!;

    [CascadingParameter]
    private Task<AuthenticationState> AuthTask { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        var userTask = await AuthTask;
        var loggedInUser = userTask.User;
        var loggedInUserId = loggedInUser?.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value ?? "";

        if (loggedInUserId is null or "")
        {
            Navigation.NavigateTo("/Account/Login");
        }

        studentModel = await Db.Students.FirstOrDefaultAsync(x => x.ApplicationUserId == loggedInUserId) ?? new();

        viewModel = new()
            {
                StudentId = studentModel!.Id,
                Date = DateTime.Today
            };
    }

    private async Task OnValidSubmit(EditContext context)
    {
        if (viewModel.StudentId is null || viewModel.Date == default)
            return;

        var model = viewModel.ToModel();

        Db.Attendances.Add(model);

        var rowsAffected = await Db.SaveChangesAsync();

        if (rowsAffected > 0)
        {
            SnackBar.Add($"Your worklog added for {model.Date}", Severity.Success);
        }
        else
        {
            SnackBar.Add("Couldn't add your worlog!", Severity.Error);
        }
    }
}
