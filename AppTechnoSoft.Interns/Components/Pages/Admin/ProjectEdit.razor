@page "/add-project"
@page "/edit-project/{Id:int}"

@attribute [Authorize(Roles = Role.Admins)]

@inject ApplicationDbContext Db
@inject ISnackbar SnackBar
@inject NavigationManager Navigation

<PageTitle>@pageTitle</PageTitle>

    <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
        <MudTextField Label="Title" @bind-Value="model.Title" />
        <MudTextField Label="RepoUrl" Class="mt-3" @bind-Value="model.RepoUrl" />
        <MudTextField Label="BoardUrl" Class="mt-3 mb-5" @bind-Value="model.BoardUrl" />
        <MudText Class="mb-1" Typo="Typo.body1">Project Requirements</MudText>
        <RichTextEditor MarkdownValue="@model.Requirements" EditorValueChanged="OnMarkdownValueChanged" PlaceHolder="Very detailed description of project"/>

        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="mt-3" StartIcon="@Icons.Material.Filled.Save">
            Save Project
        </MudButton>
    </EditForm>
    @code {

    [Parameter]
    public int? Id { get; set; }

    Project model = new();
    string pageTitle = string.Empty;
    bool IsAdd => Id is null or 0;

    protected override async Task OnInitializedAsync()
    {
        if (IsAdd)
        {
            pageTitle = "Add Project";
        }
        else
        {
            pageTitle = "Edit Project";
            model = await Db.Projects.FirstAsync(x => x.Id == Id);
        }
    }

    private async Task OnValidSubmit(EditContext context)
    {
        if (model.Requirements is null or "")
        {
            return;
        }

        if (IsAdd)
        {
            Db.Projects.Add(model);
        }
        else
        {
            model.Id = Id!.Value;
            Db.Projects.Update(model);
        }

        var rowsAffected = await Db.SaveChangesAsync();

        if (rowsAffected > 0)
        {
            SnackBar.Add("Project saved successfully", Severity.Success);
            Navigation.NavigateTo("/projects");
        }
        else
        {
            SnackBar.Add("Project save failed", Severity.Error);
        }
    }

    void OnMarkdownValueChanged(string value)
    {
        model.Requirements = value;
    }
}
