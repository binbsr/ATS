@page "/add-instructor"
@page "/edit-instructor/{Id:int}"

@attribute [Authorize(Roles=Role.Admins)]

@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject ISnackbar SnackBar

<PageTitle>@pageTitle</PageTitle>
<MudContainer>
    <EditForm Model="@model" OnValidSubmit="OnValidSubmit" Context="formContext">
        <MudTextField Label="Name" @bind-Value="model.Name" Variant="Variant.Outlined" TextChanged="UserNameChanged" />
        <MudTextField Label="Email" Class="mt-3" @bind-Value="model.Email" Variant="Variant.Outlined" Disabled />
        <MudTextField Label="Phone" Class="mt-3" @bind-Value="model.Phone" Variant="Variant.Outlined" />

        <div class="d-flex mt-2">
            <MudTextField Label="Professional Role" @bind-Value="model.Role" Class="mr-6" Variant="Variant.Outlined" />
            <MudTextField Label="Current Organization" @bind-Value="model.Organization" Variant="Variant.Outlined" />
        </div>

        <MudTextField Label="Resume Summary" Lines="10" Class="my-3" @bind-Value="model.Resume" Variant="Variant.Outlined" />
        <MudTextField Label="Other Details" Lines="2" Class="my-3" @bind-Value="model.OtherDetails" Variant="Variant.Outlined" Placeholder="Bank account details etc."/>
        <ImageUpload ExistingImagePath="@model.ProfilePath" ImageChanged="ProfileChanged" Label="Instructor Profile Image" />
        <MudSelect T="Tag"
                   Label="Tags"
                   MultiSelection="true"
                   @bind-SelectedValues="@tagsSelected"
                   Class="mt-3"
                   MultiSelectionTextFunc="@(new Func<List<string>, string>(GetMultiSelectionText))"
                   AnchorOrigin="Origin.BottomCenter"
                   Variant="Variant.Outlined">
            @foreach (var tag in tags)
            {
                <MudSelectItem Value="@tag">@tag.Name</MudSelectItem>
            }
        </MudSelect>

        <MudField Label="Member Type" Variant="Variant.Text" InnerPadding="false">
            <MudRadioGroup T="MemberType" @bind-Value="@model.MemberType">
                @foreach(var memberType in Enum.GetValues<MemberType>())
                {
                    <MudRadio T="MemberType" Value="memberType">@memberType</MudRadio>
                }
            </MudRadioGroup>
        </MudField>

        <MudSwitch @bind-Value="@model.Publish" Class="mt-3" Color="Color.Success" UncheckedColor="Color.Error" Label="Public Profile" />

        <MudButton Variant="Variant.Outlined" Disabled="model.Email == string.Empty" Color="Color.Warning" Class="my-3" StartIcon="@Icons.Material.Filled.Security" OnClick="Generate">
            Generate Login Details
        </MudButton>

        @if (password != string.Empty)
        {
            <ApplicationAlert>
                Please Keep it Safe (One time only)
                <span class="border-2 border-dashed p-2" style="font-family:Courier New, Courier, monospace">
                    <b>Email:</b> @model.Email
                    <b>Password:</b> @password
                </span>
            </ApplicationAlert>
        }
        <MudDivider />
        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Tertiary" Class="mt-5" StartIcon="@Icons.Material.Filled.Save">Save Instructor</MudButton>
    </EditForm>
</MudContainer>

@code {

    [Parameter]
    public int? Id { get; set; }

    Instructor model = new();
    List<Tag> tags = new();
    IEnumerable<Tag> tagsSelected = [];
    string pageTitle = string.Empty;
    bool IsAdd => Id is null or 0;
    string password = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        using var db = DbFactory.CreateDbContext();
        tags = await db.Tags.ToListAsync();

        if (IsAdd)
        {
            pageTitle = "Add Instructor";
        }
        else
        {
            pageTitle = "Edit Instructor";
            model = await db.Instructors.Include(x => x.Tags).FirstOrDefaultAsync(x => x.Id == Id) ?? new();
            tagsSelected = model?.Tags ?? [];
        }
    }

    private async Task OnValidSubmit(EditContext context)
    {
        // Save instructor profile image first if it's selected
        var (success, message) = await ImageUploader.Upload(model.Profile);
        if (success)
        {
            model.ProfilePath = message;
        }
        else
        {
            Console.WriteLine($"Error: {message}");
        }

        using var db = DbFactory.CreateDbContext();

        model.Tags = tagsSelected.ToList();

        if (IsAdd)
        {
            db.Instructors.Add(model);
        }
        else
        {
            model.Id = Id!.Value;
            db.Instructors.Update(model);
        }

        var rowsAffected = await db.SaveChangesAsync();

        if (rowsAffected > 0)
        {
            SnackBar.Add("Instructor saved successfully", Severity.Success);
        }
        else
        {
            SnackBar.Add("Instructor save failed", Severity.Error);
        }

        if (password == string.Empty)
            return;

        // Create Instructor login and assign role
        var user = Activator.CreateInstance<ApplicationUser>();
        await UserStore.SetUserNameAsync(user, model.Email, CancellationToken.None);
        var emailStore = (IUserEmailStore<ApplicationUser>)UserStore;
        await emailStore.SetEmailAsync(user, model.Email, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, password);
        _ = await UserManager.AddToRoleAsync(user, Role.Instructor);
        if (result.Succeeded)
        {
            SnackBar.Add("And instructor user registered successfully for login details.", Severity.Success);
        }
        else
        {
            SnackBar.Add(string.Join(", ", result.Errors.Select(error => error.Description)), Severity.Error);
        }
    }

    private string GetMultiSelectionText(List<string> selectedValues)
    {
        return $"{selectedValues.Count} tag{(selectedValues.Count > 1 ? "s have" : " has")} been selected";
    }

    private void ProfileChanged(IBrowserFile file)
    {
        model.Profile = file;
    }

    private void UserNameChanged()
    {
        model.Email = model.Name.ToEmail();
    }

    private void Generate()
    {
        password = PwdGenerator.NewPassword(8);
    }
}
