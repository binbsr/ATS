@page "/my/project"

@attribute [Authorize(Roles = Role.Trainee)]

@inject IDbContextFactory<ApplicationDbContext> DbFactory

<PageTitle>Project Contribution</PageTitle>

@{
    var panelClass = "pa-5 mb-5 border border-solid mud-border-tertiary";
}

@if (project.Title == "None")
{
    <ApplicationAlert Text="You are not assigned any project work." />
}
else
{
    <MudPaper Class="@panelClass" Elevation="0">
        <MudStack Row Justify="Justify.Center" AlignItems="AlignItems.Center" Spacing="16" Class="mb-6 pb-3 border-b-2">
            <MudTooltip Text="@($"Team {teamName}")" Placement="Placement.Left">
                <MudAvatar Style="height:128px; width:128px;">
                    <MudImage Src="@teamAvatar" />
                </MudAvatar>
            </MudTooltip>            
            <MudText Typo="Typo.h4" Align="Align.Center">@project.Title</MudText>
            <MudText>
                <MudLink Href="@project.RepoUrl" Target="_blank" Style="font-size:1.5rem">Github repository <MudIcon Icon="@Icons.Material.Sharp.OpenInNew" /></MudLink>
                <MudDivider Class="my-2" />
                <MudLink Href="@project.BoardUrl" Target="_blank" Style="font-size:1.5rem">Github agile board <MudIcon Icon="@Icons.Material.Sharp.OpenInNew" /></MudLink>
            </MudText>
        </MudStack>
        <MudText Typo="Typo.body1" Class="my-4">@((MarkupString)project.Requirements.ToHtmlString())</MudText>
    </MudPaper>
}

@code {

    [CascadingParameter]
    private Task<AuthenticationState> AuthTask { get; set; } = null!;

    string teamName = "";
    string teamAvatar = "";
    ProjectViewModel project = new() { Title = "None" };


    protected override async Task OnInitializedAsync()
    {
        var userTask = await AuthTask;
        var loggedInUser = userTask.User;
        var loggedInUserId = loggedInUser.GetUserId();

        using var Db = DbFactory.CreateDbContext();
        var studentModel = await Db.Students
            .Where(x => x.ApplicationUserId == loggedInUserId)
            .Select(x => new
            {
                Trainee = x.Name,
                TeamName = x.Team.Name,
                TeamAvatar = x.Team.Avatar,
                ProjectName = x.Team.Project.Title,
                ProjectDetails = x.Team.Project.Requirements,
                ProjectBoard = x.Team.Project.BoardUrl,
                ProjectRepo = x.Team.Project.RepoUrl
            })
            .FirstOrDefaultAsync();

        if (studentModel is null || studentModel.TeamName is null or "")
            return;

        project = new ProjectViewModel
            {
                Title = studentModel.ProjectName,
                Requirements = studentModel.ProjectDetails,
                RepoUrl = studentModel.ProjectRepo,
                BoardUrl = studentModel.ProjectBoard
            };

        teamName = studentModel.TeamName;
        teamAvatar = studentModel.TeamAvatar ?? "/person.png";
    }
}
