@page "/"

@inject ApplicationDbContext db

<PageTitle>Home</PageTitle>

@if (homeItems is null || homeItems.Count == 0)
{
    <MudProgressCircular />
}
else
{
    <MudCarousel Class="mud-width-full"
                 Style="height:450px;"
                 ShowArrows="@true"
                 ShowBullets="@true"
                 EnableSwipeGesture="@true"
                 TData="object">
        @foreach (var item in homeItems.Where(x => x.Title == "CarouselItem"))
        {
            var parts = item.HtmlContent.Split(["<p>", "</p>"], StringSplitOptions.RemoveEmptyEntries);

            <MudCarouselItem Transition="Transition.Slide" Class="px-10 d-flex align-center flex-grow-1 gap-6"> 
                <MudHidden Breakpoint="Breakpoint.SmAndDown">
                    @if (parts.Length > 1)
                    {
                        <MudImage Src="@parts[1]" Height="400" />
                    }                    
                </MudHidden>
                <MudText Typo="Typo.h3" Align="Align.Center">@((MarkupString)parts[0])</MudText>
                <AuthorizeView Roles="Admin,SuperAdmin">
                    <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Warning" Size="Size.Small" Class="ml-auto" Href="@("/edit-widget/" + item.Id)" />
                </AuthorizeView>
            </MudCarouselItem>
        }
    </MudCarousel>
    <hr />
    <MudGrid>
        @foreach (var item in homeItems.Where(x => x.Title == "HomeIntro"))
        {
            var parts = item.HtmlContent.Split(["<p>", "</p>"], StringSplitOptions.RemoveEmptyEntries);
            var titleParts = item.Description.Split(["(", ")"], StringSplitOptions.RemoveEmptyEntries);

            <MudItem md="6" xs="12">
                <MudCard Elevation="5" Style="height: 500px">
                    <MudCardHeader>
                        <CardHeaderAvatar>
                            <MudAvatar Color="Color.Primary">@titleParts[0][0]</MudAvatar>
                        </CardHeaderAvatar>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">@titleParts[0]</MudText>
                            <MudText Typo="Typo.subtitle2">@(titleParts.Length > 1 ? titleParts[1] : "We are here for you!")</MudText>
                        </CardHeaderContent>
                        <CardHeaderActions>
                            <AuthorizeView Roles="Admin,SuperAdmin">
                                <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Warning" Size="Size.Small" Class="ml-auto" Href="@("/edit-widget/" + item.Id)" />
                            </AuthorizeView>
                        </CardHeaderActions>
                        </MudCardHeader>
                        <MudCardMedia Image="@((parts.Length > 1) ? parts[1] : "homeitems/learncode.jpg")" Height="250" />
                        <MudCardContent>
                            <MudText Typo="Typo.body2">@((MarkupString)parts[0])</MudText>
                        </MudCardContent>
                        <MudCardActions>
                            <MudButton Href="/apply" Color="Color.Primary" StartIcon="@Icons.Material.Sharp.PersonAddAlt1">Apply For Internship</MudButton>
                            <MudButton Href="/modules" Color="Color.Primary" StartIcon="@Icons.Material.Sharp.ViewModule">Our Training Modules</MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
        }
    </MudGrid>
}

<AuthorizeView Roles="Admin,SuperAdmin">
    <MudText Typo="Typo.h6" Class="mt-6">Home Page Image References (Shown just to admins)</MudText>
    @foreach (var image in images)
    {
        <MudImage Src="@image" Alt="@image" Class="rounded-lg" Height="100" /> @image
    }
</AuthorizeView>


@code {
    private List<Widget> homeItems = new();
    private string[] images = [];

    [CascadingParameter]
    private Task<AuthenticationState> AuthTask { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        homeItems = await db.Widgets.Where(x => x.Title == "CarouselItem" || x.Title == "HomeIntro").ToListAsync();

        // Get all home images for reference
        var state = await AuthTask;
        if (state.User.IsInRole("Admin") || state.User.IsInRole("SuperAdmin"))
        {
            var relativeAssetPath = $"homeitems";
            var currentAppPath = Environment.CurrentDirectory;
            var path = Path.Combine(currentAppPath, "wwwroot", relativeAssetPath);
            images = Directory.GetFiles(path).Select(x => relativeAssetPath + "/" + Path.GetFileName(x)).ToArray();
        }
    }
}
