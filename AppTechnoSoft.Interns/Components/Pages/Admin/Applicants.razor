@page "/applicants"

@attribute [Authorize(Roles = Role.Admins)]
@inject ApplicationDbContext Db
@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject ISnackbar SnackBar

<PageTitle>Applicants</PageTitle>

<MudDataGrid T="StudentViewModel"
             MultiSelection="true"
             Items="@studentFilteredList"
             @bind-SelectedItems="selectedApplicants"
             SortMode="SortMode.Multiple"
             Filterable="true"
             Hover="true"
             QuickFilter="@_quickFilter"
             Loading="loadingData"
             ReadOnly="true"
             Hideable="true"
             RowClassFunc="HighlightRow"
             Dense="true">
    <ToolBarContent>
        <MudToolBar WrapContent="true">
            <MudTooltip Text="Debatch trainees">
                <MudIconButton Disabled="@(!selectedApplicants.Any())"
                               Icon="@Icons.Material.Sharp.BatchPrediction"
                               OnClick="RemoveFromBatch"
                               Variant="Variant.Outlined"
                               Color="Color.Warning" />
            </MudTooltip>

            <MudTooltip Text="Remove applicants">
                <MudIconButton Disabled="@(!selectedApplicants.Any())"
                               Icon="@Icons.Material.Sharp.Delete"
                               Class="ml-1"
                               OnClick="RemoveApplicants"
                               Variant="Variant.Outlined"
                               Color="Color.Error" />
            </MudTooltip>
            <MudInputLabel Class="ml-10">Status</MudInputLabel>
            <MudSelect T="Status"
                       Class="ml-2"
                       Value="selectedStatus"
                       Margin="Margin.Dense"
                       Variant="Variant.Outlined"
                       AnchorOrigin="Origin.BottomCenter"
                       ValueChanged="StatusChanged">
                @foreach (var item in Enum.GetValues<Status>())
                {
                    <MudSelectItem Value="@item">@item</MudSelectItem>
                }
            </MudSelect>

            <MudInputLabel Class="ml-8">Batch</MudInputLabel>
            <MudSelect T="int?"
                       Class="ml-2"
                       Value="selectedBatch"
                       Placeholder="Select batch"
                       Margin="Margin.Dense"
                       Variant="Variant.Outlined"
                       AnchorOrigin="Origin.BottomCenter"
                       ValueChanged="BatchChanged">
                @foreach (var item in batches)
                {
                    <MudSelectItem Value="@item.BatchId">@item.BatchName</MudSelectItem>
                }
            </MudSelect>
        </MudToolBar>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString"
                      Placeholder="@($"Search {studentFilteredList.Count} applicants by name, email, status or phone...")"
                      Adornment="Adornment.Start"
                      Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search"></MudTextField>
    </ToolBarContent>
    <Columns>
        <SelectColumn ShowInFooter="false" ShowInHeader="false" />
        <HierarchyColumn T="StudentViewModel" />
        <TemplateColumn Filterable="false">
            <CellTemplate>
                <MudAvatar>
                    @if (context.Item.ProfileImagePath is null or "")
                    {
                        <MudIcon Icon="@Icons.Material.Outlined.Person2" />
                    }
                    else
                    {
                        <MudImage Src="@context.Item.ProfileImagePath"></MudImage>
                    }
                </MudAvatar>
            </CellTemplate>
        </TemplateColumn>
        <PropertyColumn Property="x => x.Name" Filterable="false" />
        <PropertyColumn Property="x => x.Phone" Filterable="false" />
        <PropertyColumn Property="x => x.ApplicantType" Filterable="false" />
        <PropertyColumn Property="x => x.Status" Filterable="false" />
        <TemplateColumn Title="Applied">
            <CellTemplate>
                @context.Item.FormSubmitted.Humanize()
            </CellTemplate>
        </TemplateColumn>

    </Columns>
    <ChildRowContent>
        <MudGrid Class="px-6 pt-4">
            <MudItem md="12" Class="p-2">
                <MudStack Row>
                    @if (context.Item.UserCreated)
                    {
                        <MudButton Variant="Variant.Outlined"
                                   Disabled="context.Item.Email == string.Empty || loadingData || !string.IsNullOrEmpty(context.Item.Password)"
                                   Color="Color.Warning"
                                   Class="my-3"
                                   StartIcon="@Icons.Material.Filled.Security"
                                   OnClick="() => UpdateUserCreds(context.Item)">
                            Reset Login
                        </MudButton>

                        <MudButton Variant="Variant.Outlined"
                                   Href=@($"/edit-user/{context.Item.ApplicationUserId}")
                                   Color="Color.Info"
                                   Class="my-3"
                                   StartIcon="@Icons.Material.Filled.Settings">
                            Add Roles
                        </MudButton>
                    }
                    else
                    {
                        <MudButton Variant="Variant.Outlined"
                                   Disabled="context.Item.Email == string.Empty || loadingData || !string.IsNullOrEmpty(context.Item.Password)"
                                   Color="Color.Warning"
                                   Class="my-3"
                                   StartIcon="@Icons.Material.Filled.Security"
                                   OnClick="() => GenerateUserCreds(context.Item)">
                            New Login
                        </MudButton>
                    }


                    @if (!string.IsNullOrEmpty(context.Item.Password))
                    {
                        <MudAlert Severity="Severity.Info" Style="font-size:1rem">
                            Please Keep it Safe (One time only)
                            <span class="border-2 border-dashed p-2" style="font-family:Courier New, Courier, monospace">
                                <b>Email:</b> @context.Item.Email
                                <b>Password:</b> @context.Item.Password
                            </span>
                        </MudAlert>
                    }
                </MudStack>
            </MudItem>
            <MudItem lg="2" md="3" sm="4" Class="p-2">
                <b>Name</b><MudText Typo="Typo.body1">@context.Item.Name</MudText>
            </MudItem>
            <MudItem lg="2" md="3" sm="4" Class="p-2">
                <b>Email</b><MudText Typo="Typo.body1">@context.Item.Email</MudText>
            </MudItem>
            <MudItem lg="2" md="3" sm="4" Class="p-2">
                <b>College</b><MudText Typo="Typo.body1">@(context.Item.CollegeName ?? "N/A")</MudText>
            </MudItem>
            <MudItem lg="2" md="3" sm="4" Class="p-2">
                <b>Program</b><MudText Typo="Typo.body1">@(context.Item.ProgramName ?? "N/A")</MudText>
            </MudItem>
            <MudItem lg="2" md="3" sm="4" Class="p-2">
                <b>Team</b><MudText Typo="Typo.body1">@(context.Item.TeamName ?? "N/A")</MudText>
            </MudItem>
            <MudItem lg="2" md="3" sm="4" Class="p-2">
                <b>Training Track</b><MudText Typo="Typo.body1">@context.Item.TrainingTrack</MudText>
            </MudItem>
        </MudGrid>
    </ChildRowContent>
    <PagerContent>
        <MudDataGridPager T="StudentViewModel" PageSizeOptions="[20, 50, 100, 200]" />
    </PagerContent>
</MudDataGrid>

@code {
    [SupplyParameterFromQuery]
    public string? Highlight { get; set; } = "";

    private List<StudentViewModel> studentList = [];
    private List<StudentViewModel> studentFilteredList = [];
    private HashSet<StudentViewModel> selectedApplicants = [];
    private string _searchString = string.Empty;
    private bool loadingData = false;
    private Status selectedStatus = Status.Applied;
    private int? selectedBatch;
    private List<(string BatchName, int? BatchId)> batches = [];
    private Func<StudentViewModel, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Email.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Status.ToString().Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Phone.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };

    protected override void OnInitialized()
    {
        loadingData = true;

        studentList = LoadAllTrainees();

        studentFilteredList = studentList
            .Where(s => s.Status == Status.Applied)
            .ToList();

        batches = studentList
            .Where(x => x.BatchName != "None")
            .Select(x => (x.BatchName, x.BatchId))
            .DistinctBy(x => x.BatchId)
            .ToList();

        loadingData = false;
    }

    private void StatusChanged(Status status)
    {
        loadingData = true;
        selectedStatus = status;

        if (!studentList.Any())
        {
            studentList = LoadAllTrainees();
            studentFilteredList = studentList.Where(s => s.Status == status).ToList();
        }
        else
        {
            studentFilteredList = studentList.Where(s => s.Status == status).ToList();
        }

        loadingData = false;
    }

    private void BatchChanged(int? batchId)
    {
        loadingData = true;
        selectedBatch = batchId;
        selectedStatus = Status.Enrolled;

        if (!studentList.Any())
        {
            studentList = LoadAllTrainees();
            studentFilteredList = studentList.Where(s => s.BatchId == batchId).ToList();
        }
        else
        {
            studentFilteredList = studentList.Where(s => s.BatchId == batchId).ToList();
        }

        loadingData = false;
    }

    private List<StudentViewModel> LoadAllTrainees()
    {
        var studentModels = Db.Students
            .Include(s => s.College)
            .Include(t => t.TechProgram)
            .Include(t => t.Team)
            .Include(b => b.Batch)
            .Include(u => u.User)
            .AsNoTracking()
            .OrderByDescending(x => x.FormSubmitted)
            .ToList() ?? [];

        studentList = studentModels.ToViewModel();
        return studentList;
    }

    private async Task RemoveFromBatch()
    {
        if (selectedApplicants.Any())
        {
            var rowsAffected = await Db.Students
                .Where(s => selectedApplicants.Select(z => z.Id).Contains(s.Id))
                .ExecuteUpdateAsync(x => x
                    .SetProperty(y => y.BatchId, null as int?)
                    .SetProperty(y => y.ApplicationUserId, null as string)
                    .SetProperty(y => y.Status, Status.Applied)
                );

            if (rowsAffected > 0)
            {
                SnackBar.Add("Selected trainees debatched", Severity.Success);
            }
            else
            {
                SnackBar.Add("Debatching failed", Severity.Error);
            }
        }
    }

    private async Task RemoveApplicants()
    {
        if (selectedApplicants.Any())
        {
            var rowsAffected = await Db.Students
                .Where(s => selectedApplicants.Select(z => z.Id).Contains(s.Id))
                .ExecuteDeleteAsync();

            if (rowsAffected > 0)
            {
                SnackBar.Add("Selected trainees removed from system", Severity.Success);
                studentList.RemoveAll(x => selectedApplicants.Select(z => z.Id).Contains(x.Id));
            }
            else
            {
                SnackBar.Add("Removing applicants failed", Severity.Error);
            }
        }
    }

    private async Task UpdateUserCreds(StudentViewModel studentViewModel)
    {
        loadingData = true;

        // Reset password for existing user
        var existingUser = await UserManager.FindByIdAsync(studentViewModel.ApplicationUserId);
        if (existingUser is null)
        {
            loadingData = false;
            return;
        }

        var password = PwdGenerator.NewPassword(8);
        existingUser.PasswordHash = UserManager.PasswordHasher.HashPassword(existingUser, password);
        var resultReset = await UserManager.UpdateAsync(existingUser);

        _ = resultReset.Succeeded ?
            SnackBar.Add($"Password reset for '{studentViewModel.Email}' successfully", Severity.Success) :
            SnackBar.Add(string.Join(", ", resultReset.Errors.Select(error => error.Description)), Severity.Error);

        studentViewModel.Password = password; // For UI
        loadingData = false;
    }

    private async Task GenerateUserCreds(StudentViewModel studentViewModel)
    {
        loadingData = true;

        // Register new user programatically
        var user = Activator.CreateInstance<ApplicationUser>();
        await UserStore.SetUserNameAsync(user, studentViewModel.Email, CancellationToken.None);
        var emailStore = (IUserEmailStore<ApplicationUser>)UserStore;
        await emailStore.SetEmailAsync(user, studentViewModel.Email, CancellationToken.None);
        var password = PwdGenerator.NewPassword(8);
        var result = await UserManager.CreateAsync(user, password);

        _ = await UserManager.AddToRoleAsync(user,
            studentViewModel.ApplicantType == ApplicantType.Professional
            ? Role.Employee
            : Role.Trainee);

        // Save userid to students table
        _ = await Db.Students
               .Where(s => s.Id == studentViewModel.Id)
               .ExecuteUpdateAsync(x => x
                   .SetProperty(y => y.ApplicationUserId, user.Id)
               );

        _ = result.Succeeded ?
            SnackBar.Add($"User '{studentViewModel.Email}' registered successfully", Severity.Success) :
            SnackBar.Add(string.Join(", ", result.Errors.Select(error => error.Description)), Severity.Error);

        studentViewModel.Password = password; // For UI
        loadingData = false;
    }

    public string HighlightRow(StudentViewModel studentViewModel, int index)
    {
        if (Highlight is null or "")
            return "";

        if (Highlight.Contains(","))
        {
            var ids = Highlight.Split(",", StringSplitOptions.RemoveEmptyEntries);
            return ids.Contains(studentViewModel.Id) ? "mud-tertiary" : "";
        }
        return Highlight == studentViewModel.Id ? "mud-tertiary" : "";
    }
}
