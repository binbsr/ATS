@page "/join"

<PageTitle>Joining AppSoft</PageTitle>

@inject ApplicationDbContext Db
@inject ISnackbar SnackBar

<EditForm Model="@model" OnValidSubmit="OnValidSubmit" Context="applicationForm">
    <MudPaper Class="pa-5" Elevation="5">

        @if (alreadyApplied)
        {
            <MudAlert Severity="Severity.Success" Variant="Variant.Outlined">We have received your application, please feel free to update your details or contact us for any queries.</MudAlert>
        }
        else
        {
            <MudAlert Severity="Severity.Warning" Variant="Variant.Outlined">Please enter your details to start professional journey at AppSoft for successful career.</MudAlert>
        }

        <MudField Label="I am" Variant="Variant.Outlined" Class="mt-5">
            <MudRadioGroup @bind-Value="model.ApplicantType">
                <MudRadio Value="ApplicantType.StudentInternship" Color="Color.Tertiary">a student - running</MudRadio>
                <MudRadio Value="ApplicantType.SoftwareEngineeringAspirant" Color="Color.Tertiary">a student - complete or result waiting</MudRadio>
                <MudRadio Value="ApplicantType.Professional" Color="Color.Tertiary">a working professional</MudRadio>
            </MudRadioGroup>
        </MudField>

        <MudTextField @bind-Value="model.Name"
                      Variant="Variant.Outlined"
                      Class="mt-4"
                      Immediate="true"
                      Label="Full Name"
                      TextChanged="UserNameChanged" />

        <MudTextField @bind-Value="model.Email"
                      Variant="Variant.Outlined"
                      Class="mt-4"
                      Immediate="true"
                      Label="Email" Disabled="true" />

        <MudTextField @bind-Value="model.Phone"
                      Variant="Variant.Outlined"
                      Class="mt-4"
                      Immediate="true"
                      Label="Phone"
                      Error="@(alreadyAppliedPhone && !alreadyApplied)"
                      ErrorText="You have already applied at Appsoft with this number, please call us if you have any queries."
                      TextChanged="PhoneChanged" />

        @if (model.ApplicantType == ApplicantType.StudentInternship)
        {
            <MudAutocomplete T="College"
                             Label="Select College"
                             Variant="Variant.Outlined"
                             @bind-Value="model.College"
                             Class="mt-4"
                             SearchFunc="@SearchColleges"
                             ToStringFunc="@(e=> e==null ? null : $"{e.Name} ({e.Location})")"
                             ShowProgressIndicator="true"
                             ProgressIndicatorColor="Color.Default"
                             MaxItems="null" />

            <MudAutocomplete T="TechProgram"
                             Label="Select Program"
                             Variant="Variant.Outlined"
                             Class="mt-4"
                             @bind-Value="model.TechProgram"
                             SearchFunc="@SearchPrograms"
                             ToStringFunc="@(e=> e==null ? null : $"{e.Name} ({e.Affliation})")"
                             ShowProgressIndicator="true"
                             ProgressIndicatorColor="Color.Default"
                             MaxItems="null" />
        }
        else if (model.ApplicantType == ApplicantType.SoftwareEngineeringAspirant)
        {
            <MudSelect T="TrainingTrack" Variant="Variant.Outlined" Label="Track" @bind-Value="model.TrainingTrack" Class="mt-4" AnchorOrigin="Origin.BottomCenter">
                <MudSelectItem T="TrainingTrack" Value="@TrainingTrack.None">No idea, need consulting</MudSelectItem>
                <MudSelectItem T="TrainingTrack" Value="@TrainingTrack.NETWeb">.NET Web Development</MudSelectItem>
                <MudSelectItem T="TrainingTrack" Value="@TrainingTrack.JavaWeb">Java Web Development</MudSelectItem>
                <MudSelectItem T="TrainingTrack" Value="@TrainingTrack.PythonWeb">Python Web Development</MudSelectItem>
                <MudSelectItem T="TrainingTrack" Value="@TrainingTrack.NodeWeb">Node.js Web Development</MudSelectItem>
            </MudSelect>
        }

        <ImageUpload Class="mt-4" ExistingImagePath="@model.ProfileImagePath" ImageChanged="ProfileChanged" Label="Upload Profile Image (<100kb)" />        

        <MudButton ButtonType="ButtonType.Submit"
                   Variant="Variant.Filled"
                   Color="Color.Tertiary"
                   Class="mt-3 d-flex ml-auto"
                   StartIcon="@Icons.Material.Sharp.HowToReg"
                   Disabled="isSaveDisabled">
            @(alreadyApplied ? "Update Details" : "Apply")
        </MudButton>
    </MudPaper>
</EditForm>

@code {

    [CascadingParameter]
    private Task<AuthenticationState> AuthTask { get; set; } = null!;

    private Student model = new();
    bool alreadyApplied = false;
    bool alreadyAppliedPhone = false;
    List<College> colleges = [];
    List<TechProgram> techPrograms = [];
    private bool profileSuccess = false;
    private string message = "";

    private bool isSaveDisabled => model.ApplicantType == ApplicantType.StudentInternship ?
        (model.Name is ""
        || model.Phone is ""
        || model.Email is ""
        || model.College is null
        || model.TechProgram is null) :
        (model.Name is ""
        || model.Phone is ""
        || model.Email is "")
        ;

    protected override async Task OnInitializedAsync()
    {
        var state = await AuthTask;
        var applicationUserId = state.User.GetUserId();

        if (applicationUserId == string.Empty)
            return;

        model = await Db.Students
            .Include(x => x.College)
            .Include(x => x.TechProgram)
            .FirstOrDefaultAsync(x => x.ApplicationUserId == applicationUserId) ?? new();

        alreadyApplied = model is not null;
    }

    private async Task OnValidSubmit(EditContext editContext)
    {
        // Save profile image first if it's uploaded
        (profileSuccess, message) = await ImageUploader.Upload(model.ProfileImage);
        if (profileSuccess)
        {
            model.ProfileImagePath = message;
        }

        var rowsAffected = 0;
        if (alreadyApplied)
        {
            // User updating his/her details
            if (model.ApplicantType == ApplicantType.StudentInternship)
            {
                rowsAffected = await Db.Students
                .Where(x => x.Id == model.Id)
                .ExecuteUpdateAsync(o => o
                    .SetProperty(x => x.Name, model.Name)
                    .SetProperty(x => x.Email, model.Email)
                    .SetProperty(x => x.Phone, model.Phone)
                    .SetProperty(x => x.CollegeId, model.College.Id)
                    .SetProperty(x => x.TechProgramId, model.TechProgram.Id)
                    .SetProperty(x => x.ProfileImagePath, model.ProfileImagePath)
                );
            }
            else if (model.ApplicantType == ApplicantType.SoftwareEngineeringAspirant)
            {
                rowsAffected = await Db.Students
                .Where(x => x.Id == model.Id)
                .ExecuteUpdateAsync(o => o
                    .SetProperty(x => x.Name, model.Name)
                    .SetProperty(x => x.Email, model.Email)
                    .SetProperty(x => x.Phone, model.Phone)
                    .SetProperty(x => x.TrainingTrack, model.TrainingTrack)
                    .SetProperty(x => x.ProfileImagePath, model.ProfileImagePath)
                );
            }
        }
        else
        {
            if (model.ApplicantType == ApplicantType.SoftwareEngineeringAspirant)
            {
                model.College = null;
                model.TechProgram = null;
            }

            Db.Students.Add(model);
            rowsAffected = await Db.SaveChangesAsync();
        }

        if (rowsAffected > 0)
        {
            SnackBar.Add("Applicaion details received successfully", Severity.Success);
            alreadyApplied = true;
        }
        else
        {
            SnackBar.Add("Applicaion process failed", Severity.Error);
        }
    }

    private void ProfileChanged(IBrowserFile file)
    {
        model.ProfileImage = file;
    }

    private async Task<IEnumerable<College>> SearchColleges(string value, CancellationToken token)
    {
        if (!colleges.Any())
        {
            colleges = await Db.Colleges.ToListAsync(token);
        }

        if (value is null or "")
        {
            return colleges;
        }

        return colleges.Where(x => x.Name.Contains(value, StringComparison.OrdinalIgnoreCase));
    }

    private async Task<IEnumerable<TechProgram>> SearchPrograms(string value, CancellationToken token)
    {
        if (!techPrograms.Any())
        {
            techPrograms = await Db.TechPrograms.ToListAsync(token);
        }

        if (value is null or "")
        {
            return techPrograms;
        }

        return techPrograms.Where(x => x.Name.Contains(value, StringComparison.OrdinalIgnoreCase));
    }

    private void UserNameChanged()
    {
        model.Email = CreateEmail(model.Name, model.Phone);
    }

    private async Task PhoneChanged()
    {
        model.Email = CreateEmail(model.Name, model.Phone);
        if (model.Phone.Length == 10)
        {
            alreadyAppliedPhone = await Db.Students.AnyAsync(x => x.Phone == model.Phone);
        }
    }

    private string CreateEmail(string name, string phone) =>
        $"{name} {phone}".ToEmail();

}
