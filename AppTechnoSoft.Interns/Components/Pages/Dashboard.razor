@page "/dashboard"
@using AppTechnoSoft.Interns.Components.Account
@using Microsoft.AspNetCore.Identity

@attribute [Authorize]
@inject ApplicationDbContext Db

<PageTitle>Your dashboard</PageTitle>

@if (student is null)
{
    <MudText Typo="Typo.h5">
        Please complete your registration proces first.
        <MudLink Typo="Typo.h5" Href="/apply">Click Here</MudLink>
    </MudText>
}
else
{
    <MudGrid>
        <MudItem xs="12">
            <MudPaper Class="pa-4" Elevation="5">
                <MudText Typo="Typo.h6" Class="my-2">@((MarkupString)$"Your Training Batch: <strong>{loggedInUserBatchName}</strong>")</MudText>
                <MudContainer Class="d-flex align-start gap-4 ml-0">
                @foreach (var member in batchMembers)
                {
                    var user = loggedInUserId == member.UserId ? $"{member.Name} (You)" : member.Name;
                    <MudStack AlignItems="AlignItems.Center">
                        <MudAvatar Style="height:80px; width:80px; font-size:2rem;">
                            <MudImage Src="@member.ProfilePath" />
                        </MudAvatar>
                        <MudText Typo="Typo.subtitle2">@user</MudText>
                    </MudStack>
                }
                </MudContainer>
            </MudPaper>
        </MudItem>
        <MudItem xs="12">
            <MudPaper Class="pa-4" Elevation="5">
                <MudText Typo="Typo.h6" Class="mb-2">@((MarkupString)$"Your Agile Team: <strong>{loggedInUserTeamName}</strong>")</MudText>
                <MudContainer Class="d-flex align-start gap-4 ml-0">
                    @foreach (var member in teamMembers)
                    {
                        var user = loggedInUserId == member.UserId ? $"{member.Name} (You)" : member.Name;
                        <MudStack AlignItems="AlignItems.Center">
                            <MudAvatar Style="height:80px; width:80px; font-size:2rem;">
                                <MudImage Src="@member.ProfilePath" />
                            </MudAvatar>
                            <MudText Typo="Typo.subtitle2">@user</MudText>
                        </MudStack>
                    }
                </MudContainer>
            </MudPaper>
        </MudItem>
        <MudItem xs="12">
            <MudPaper Class="pa-4" Elevation="5">
                <MudText Typo="Typo.h6" Class="mb-2">Project Title: <strong>@projectTitle</strong></MudText>
                <MudText Typo="Typo.subtitle2" Class="mb-2">@projectDetails</MudText>
            </MudPaper>
        </MudItem>
        <MudItem xs="12">
            <MudPaper Class="pa-4" Elevation="5">
                <MudText Typo="Typo.h6" Class="mb-2"><strong>Your Accomplishments</strong></MudText>
                <MudText Typo="Typo.subtitle2" Class="mb-2">This section shows your module progress, completed assignments and shareable certificate.</MudText>
            </MudPaper>
        </MudItem>
    </MudGrid>
}

@code {

    bool loadingData;
    string loggedInUserId;
    Student? student;
    string loggedInUserTeamName = "Not assigned to any team";
    string loggedInUserBatchName = "Not assigned to any batch";
    string projectTitle = "Project not assigned to your team";
    string projectDetails = string.Empty;
    List<StudentViewModel> teamMembers = new();
    List<StudentViewModel> batchMembers = new();
    record StudentViewModel(string Name, string UserId, string ProfilePath, string TeamName, string BatchName);

    [CascadingParameter]
    private Task<AuthenticationState> AuthTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        loadingData = true;
        var userTask = await AuthTask;
        var loggedInUser = userTask.User;
        loggedInUserId = loggedInUser.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;

        if (loggedInUserId is null)
            return;

        student = await Db.Students.Where(x => x.ApplicationUserId == loggedInUserId).Include(t => t.Team).ThenInclude(b => b.Batch).FirstOrDefaultAsync();

        if (student is null || student.TeamId is null)
            return;

        var batchId = student?.Team?.Batch?.Id;

        if (batchId is null)
            return;

        loggedInUserBatchName = student.Team.Batch.Name;
        loggedInUserTeamName = student.Team.Name;        

        var title = student.Team.ProjectTitle;
        
        if(title is not null or "")
        {
            projectTitle = title;
            projectDetails = student.Team.ProjectDetails ?? "";
        }
       
        batchMembers = await Db.Students.Where(x => x.Team.Batch.Id == batchId).Include(x => x.Team).ThenInclude(b => b.Batch).Select(x => new StudentViewModel(x.Name, x.ApplicationUserId, x.ProfileImagePath, x.Team.Name, x.Team.Batch.Name)).ToListAsync();
        teamMembers = batchMembers.Where(x => x.TeamName == loggedInUserTeamName).ToList();
        loadingData = false;
    }
}
