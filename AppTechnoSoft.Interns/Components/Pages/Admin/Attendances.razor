@page "/attendance/batches/{BatchId:int}"

@attribute [Authorize(Roles = Role.AdminsAndInstructor)]

@inject IDbContextFactory<ApplicationDbContext> DbFactory

<PageTitle>Attendance - @batch?.Name</PageTitle>

@if (loadingData)
{
    <Loading />
}
else if (instructor is null)
{
    <ApplicationAlert Text="We couldn't find you on instructors pool, please contact AppSoft admin." />
}
else
{
    <MudSimpleTable Style="overflow-x: auto;" Dense Outlined>
        <thead>
            <tr>
                <th style="position:sticky;left:0;background:#4DB6AC;font-size:1.3rem;text-align:center;"></th>
                @foreach (var h in headingDates)
                {
                    <th style="@(!h.IsOfficeDay() ? $"background: {Colors.DeepOrange.Lighten2}" : $"background: {Colors.Teal.Lighten2}")">@h.ToString("dddd, MMM d")</th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var row in studentAttendances)
            {
                <tr>
                    <td style="position:sticky;left:0;background:#4DB6AC;z-index:10;">
                        <UserProfile AvatarPath="@row.Key.Profile" Name="@row.Key.Name" Horizontal />
                    </td>
                    @foreach (var date in headingDates)
                    {
                        var hasClassSchdeule = batchCalendarDates.Any(y => y.Date == date.Date);

                        if (!date.IsOfficeDay())
                        {
                            <td style="@($"background: {Colors.DeepOrange.Lighten2}")" title="Weekend"></td>
                        }
                        else if (date > DateTime.Today)
                        {
                            <td style="@($"background: {Colors.Gray.Lighten1}")" title="Upcoming classes"></td>
                        }
                        else if (!hasClassSchdeule)
                        {
                            <td style="@($"background: {Colors.DeepOrange.Lighten3}")" title="No classes"></td>
                        }
                        else
                        {
                            var attendance = row.Value.FirstOrDefault(x => x.Date.ToShortDateString() == date.ToShortDateString());

                            <td style="text-align:center">
                                @if (attendance is null)
                                {
                                    <MudAvatar Color="Color.Error">A</MudAvatar>
                                }
                                else
                                {
                                    if (attendance.PunchOut == null || attendance.PunchOut == TimeOnly.MinValue)
                                    {
                                        <MudBadge Color="Color.Error" Icon="@Icons.Material.Sharp.CallMissed" Overlap Bordered>
                                            <MudTooltip Text="@($"Punchin - {attendance.PunchIn} Punchout - Missed")">
                                                <MudAvatar Color="Color.Tertiary">P</MudAvatar>
                                            </MudTooltip>
                                        </MudBadge>
                                    }
                                    else
                                    {
                                        <MudTooltip Text="@($"Punchin - {attendance.PunchIn} Punchout - {attendance.PunchOut}")">
                                            <MudAvatar Color="Color.Tertiary">P</MudAvatar>
                                        </MudTooltip>
                                    }
                                }
                            </td>
                        }
                    }
                </tr>
            }
        </tbody>
    </MudSimpleTable>
}

@code {

    [CascadingParameter]
    private Task<AuthenticationState> AuthTask { get; set; } = null!;

    [Parameter]
    public int? BatchId { get; set; }

    private record StudentAttedance(DateOnly Date, TimeOnly? PunchIn, TimeOnly? PunchOut);

    Batch? batch;
    Dictionary<(string Name, string? Profile), IEnumerable<StudentAttedance>> studentAttendances = [];
    IEnumerable<DateTime> batchCalendarDates = [];
    bool loadingData = false;
    Instructor? instructor = new();
    DateTime[] headingDates = [];

    protected override async Task OnParametersSetAsync()
    {
        loadingData = true;

        var userTask = await AuthTask;
        var loggedInUser = userTask.User;
        var loggedInUserId = loggedInUser.GetUserId();

        if (loggedInUserId == string.Empty)
            return;

        if (BatchId is null)
            return;

        studentAttendances = [];
                
        using (var db = DbFactory.CreateDbContext())
        {
            if (loggedInUser.IsInRole(Role.Instructor) &&
                !(loggedInUser.IsInRole(Role.Admin) || loggedInUser.IsInRole(Role.SuperAdmin)))
            {
                instructor = await db.Instructors
                    .FirstOrDefaultAsync(x => x.ApplicationUserId == loggedInUserId);

                if (instructor is null)
                {
                    loadingData = false;
                    return;
                }
            }

            batch = await db.Batches
                .FindAsync(BatchId);
            batchCalendarDates = await db.ClassSchedules
                .Where(x => x.BatchId == BatchId)
                .Select(x => x.ClassStart)
                .ToArrayAsync();

            if (batch is null)
                return;

            headingDates = batch.Start.Until(batch.End);

            var attendances = await db.Attendances
                .Where(x => x.Student.BatchId == BatchId)
                .Select(x => new
                {
                    Name = x.Student.Name,
                    Profile = x.Student.ProfileImagePath,
                    Date = x.Date,
                    PunchIn = x.PunchIn,
                    PunchOut = x.PunchOut
                })
                .GroupBy(y => new { y.Name, y.Profile })
                .ToListAsync();

            foreach (var x in attendances)
            {
                var key = (x.Key.Name, x.Key.Profile);
                if (studentAttendances.ContainsKey(key))
                    continue;

                studentAttendances.Add(key, x.Select(y => new StudentAttedance(y.Date, y.PunchIn, y.PunchOut)));
            }
        }

        loadingData = false;

        StateHasChanged();
    }
}
