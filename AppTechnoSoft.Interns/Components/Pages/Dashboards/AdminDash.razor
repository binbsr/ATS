@page "/dashboard/admin"

@using ApexCharts

@attribute [Authorize(Roles = Role.Admins)]
@inject IDbContextFactory<ApplicationDbContext> DbFactory

<PageTitle>Admin Dashboard</PageTitle>

@if (loadingData)
{
    <MudText Align="MudBlazor.Align.Center">
        <MudProgressCircular Indeterminate Color="MudBlazor.Color.Tertiary" Size="MudBlazor.Size.Medium" />
    </MudText>
}
else
{
    <MudGrid>
        <MudItem md="4">
            <MudPaper Elevation="5" Class="pa-5">
                <ApexChart TItem="StudentByApplicationTypeAggregate"
                           Title="Trainees by type"
                           Options="options">

                    <ApexPointSeries TItem="StudentByApplicationTypeAggregate"
                                     Items="studentsByTypes"
                                     SeriesType="SeriesType.Donut"
                                     Name="Type"
                                     XValue="@(e => e.ApplicationType)"
                                     YAggregate="@(e => e.Sum(d => d.Students.Count))"
                                     OrderByDescending="e=>e.Y" />
                </ApexChart>
            </MudPaper>
        </MudItem>

        <MudItem md="4">
            <MudPaper Elevation="5" Class="pa-5">
                <ApexChart TItem="StudentByStatusAggregate"
                           Title="Trainees by status"
                           Options="optionsStatus">

                    <ApexPointSeries TItem="StudentByStatusAggregate"
                                     Items="studentsByStatus"
                                     SeriesType="SeriesType.Donut"
                                     Name="Student Status"
                                     XValue="@(e => e.Status)"
                                     YAggregate="@(e => e.Sum(d => d.Students.Count))"
                                     OrderByDescending="e=>e.Y" />
                </ApexChart>
            </MudPaper>
        </MudItem>

        <MudItem md="4">
            <MudPaper Elevation="5" Class="pa-5">
                <ApexChart TItem="StudentByBatchAggregate"
                           Title="Trainees by batch"
                           Options="optionsBatch">

                    <ApexPointSeries TItem="StudentByBatchAggregate"
                                     Items="studentsByBatch"
                                     SeriesType="SeriesType.Donut"
                                     Name="Student Batch"
                                     XValue="@(e => e.Batch)"
                                     YAggregate="@(e => e.Sum(d => d.Students.Count))"
                                     OrderByDescending="e=>e.Y" />
                </ApexChart>
            </MudPaper>
        </MudItem>

        <MudItem md="4">
            <MudPaper Elevation="5" Class="pa-5">
                <MudStack Row AlignItems="AlignItems.Baseline">
                    <MudText Typo="Typo.body1" Align="MudBlazor.Align.Center" Class="mb-5">Show trainee applications since</MudText>
                    <MudSelect T="int"
                               Value="days"
                               ValueChanged="DaysSelectionChanged"
                               AnchorOrigin="Origin.BottomCenter">
                        <MudSelectItem Value="1">yesterday</MudSelectItem>
                        <MudSelectItem Value="3">Last 3 days</MudSelectItem>
                        <MudSelectItem Value="7">Last week</MudSelectItem>
                        <MudSelectItem Value="30">Last month</MudSelectItem>
                        <MudSelectItem Value="90">Last 3 months</MudSelectItem>
                        <MudSelectItem Value="365">Last year</MudSelectItem>
                    </MudSelect>
                </MudStack>
                <MudPaper Class="p-4">
                    <MudNavLink Href="@($"/applicants?highlight={string.Join(",", lastnDaysIds)}")" Style="font-size:2rem">
                        <MudIcon Color="MudBlazor.Color.Tertiary" Size="MudBlazor.Size.Large" Icon="@Icons.Material.Sharp.People" Class="mr-2" />
                        <MudText Typo="Typo.h5" Inline>@("person".ToQuantity(lastnDaysIds.Count())) applied</MudText>
                    </MudNavLink>
                </MudPaper>
            </MudPaper>
        </MudItem>
    </MudGrid>
}

@code {

    bool loadingData = false;

    private int days = 7;
    private IEnumerable<string> lastnDaysIds = [];
    private record StudentByApplicationTypeAggregate(ApplicantType ApplicationType, List<Student> Students);
    private record StudentByStatusAggregate(string Status, List<Student> Students);
    private record StudentByBatchAggregate(string Batch, List<Student> Students);
    private record StudentByCompetencyAggregate(string Competency, List<Student> Students);

    private List<Student> allStudents = [];
    private IEnumerable<StudentByApplicationTypeAggregate> studentsByTypes = [];
    private IEnumerable<StudentByStatusAggregate> studentsByStatus = [];
    private IEnumerable<StudentByBatchAggregate> studentsByBatch = [];
    private ApexChartOptions<StudentByApplicationTypeAggregate> options { get; set; } = new();
    private ApexChartOptions<StudentByStatusAggregate> optionsStatus { get; set; } = new();
    private ApexChartOptions<StudentByBatchAggregate> optionsBatch { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        loadingData = true;
        var plotOptions = new PlotOptions
            {
                Pie = new PlotOptionsPie
                {
                    Donut = new PlotOptionsDonut
                    {
                        Labels = new DonutLabels
                        {
                            Total = new DonutLabelTotal { FontSize = "24px", Color = "#D807B8", Formatter = @"function (w) {return w.globals.seriesTotals.reduce((a, b) => { return (a + b) }, 0)}" }
                        }
                    }
                }
            };

        options.PlotOptions = plotOptions;
        optionsStatus.PlotOptions = plotOptions;
        optionsBatch.PlotOptions = plotOptions;
        options.Legend = new Legend { Position = LegendPosition.Bottom };
        optionsStatus.Legend = new Legend { Position = LegendPosition.Bottom };
        optionsBatch.Legend = new Legend { Position = LegendPosition.Bottom };

        using var Db = DbFactory.CreateDbContext();
        allStudents = await Db.Students.Include(x => x.TechProgram).Include(y => y.College).Include(z => z.Batch).ToListAsync();

        if (allStudents is null || !allStudents.Any())
        {
            loadingData = false;
            return;
        }

        // Group by application type
        studentsByTypes = allStudents
           .GroupBy(x => x.ApplicantType)
           .Select(y => new StudentByApplicationTypeAggregate(y.Key, y.ToList()));

        // Group students by stage
        studentsByStatus = allStudents
            .GroupBy(x => x.Status)
            .Select(y => new StudentByStatusAggregate(y.Key.ToString(), y.ToList()));

        // Group by batch
        studentsByBatch = allStudents
           .GroupBy(x => x.Batch?.Name ?? "Not Batched")
           .Select(y => new StudentByBatchAggregate(y.Key, y.ToList()));

        lastnDaysIds = GetLastNDaysStudnets(days);

        loadingData = false;
    }

    private void DaysSelectionChanged(int daysSelected)
    {
        days = daysSelected;
        lastnDaysIds = GetLastNDaysStudnets(days);
    }

    private IEnumerable<string> GetLastNDaysStudnets(int daysCount) =>
        allStudents.Where(x => x.FormSubmitted > DateTime.Now.AddDays(-daysCount)).Select(y => y.Id);
}
