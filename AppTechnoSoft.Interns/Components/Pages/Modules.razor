@page "/modules"

<PageTitle>Training Modules</PageTitle>

@inject IDbContextFactory<ApplicationDbContext> DbFactory

<TagFilter TagDescription="module" FilterTriggered="FilterChanged" />
@if (loadingData)
{
    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="100px" Class="mb-3" />
    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="100px" Class="mb-3" />
}
else
{
    <MudExpansionPanels Elevation="5" MultiExpansion="true" Class="mt-3">
        <MudGrid>
            @foreach (var widget in widgetFiltered)
            {
                <MudItem md="6" xs="12">
                    <Module Widget="@widget" />
                </MudItem>
            }
        </MudGrid>
    </MudExpansionPanels>
}

@code {
    Widget[] widgets = [];
    IEnumerable<Widget> widgetFiltered = [];
    private List<Tag> tags = [];

    bool loadingData;
   
    protected override async Task OnInitializedAsync()
    {
        loadingData = true;        
        
        using var Db = DbFactory.CreateDbContext();
        widgets = await Db.Widgets.Where(x => x.Title == "Module").Include(x => x.Tags).OrderBy(x => x.Description).ToArrayAsync();
        
        if (widgets is null || widgets.Length == 0)
            return;

        widgetFiltered = widgets;

        loadingData = false;
    }

    private void FilterChanged(string filterText)
    {
        if (filterText is null or "")
        {
            widgetFiltered = widgets;
        }
        else
        {
            widgetFiltered = widgets.Where(x => x.Tags!.Any(y => y.Name == filterText)).ToList();
        }
    }
}
