@inject IDbContextFactory<ApplicationDbContext> DbFactory

@if (loadingData)
{
    <MudText Align="Align.Center">
        <MudProgressCircular Indeterminate Color="Color.Tertiary" Size="Size.Medium" />
    </MudText>
}
else
{
    <MudText Align="Align.Center" Typo="Typo.h6" Class="border-double border-b-4 mud-border-tertiary my-3 mb-5">Admin Profile</MudText>
    <MudGrid>
        <MudItem md="6">
            <MudPaper Elevation="5" Class="py-3">
                <MudChart ChartType="ChartType.Donut" Width="100%" Height="350px"
                          InputData="@studentsByProgramsData"
                          InputLabels="@studentsByProgramsLabels"
                          LegendPosition="Position.Bottom">
                    <CustomGraphics>
                        <text class="donut-inner-text" x="49%" y="42%" dominant-baseline="middle" text-anchor="middle" fill="black" font-family="Helvetica" font-size="2">Total</text>
                        <text class="donut-inner-text" x="47%" y="55%" dominant-baseline="middle" text-anchor="middle" fill="black" font-family="Helvetica" font-size="5">@studentsByProgramsData.Sum().ToString()</text>
                    </CustomGraphics>
                </MudChart>
                <MudText Class="my-3" Typo="Typo.h6" Align="Align.Center">Total students by programs</MudText>
            </MudPaper>
        </MudItem>

        <MudItem md="6">
            <MudPaper Elevation="5" Class="py-3">
                <MudChart ChartType="ChartType.Donut"
                          InputLabels="@studentStatuses"
                          InputData="@studentStatusesData"
                          Width="100%" Height="350px"
                          LegendPosition="Position.Bottom">
                    <CustomGraphics>
                        <text class="donut-inner-text" x="49%" y="42%" dominant-baseline="middle" text-anchor="middle" fill="black" font-family="Helvetica" font-size="2">Total</text>
                        <text class="donut-inner-text" x="47%" y="55%" dominant-baseline="middle" text-anchor="middle" fill="black" font-family="Helvetica" font-size="5">@studentStatusesData.Sum().ToString()</text>
                    </CustomGraphics>
                </MudChart>
                <MudText Class="my-3" Typo="Typo.h6" Align="Align.Center">Total students by their status</MudText>
            </MudPaper>
        </MudItem>

        <MudItem md="12">
            <MudPaper Elevation="5" Class="p-4">
                <MudList Clickable>
                    <MudListSubheader>
                        <MudText Typo="Typo.h6">Applied students list by their competency</MudText>
                    </MudListSubheader>
                    @foreach (var group in appliedStudentsGroups)
                    {
                        var groupName = $"{group.GroupName} - {group.Students.Length} people";
                        <MudListItem Text="@groupName">
                            <NestedList>
                                @foreach (var student in group.Students)
                                {
                                    <MudListItem>
                                        <MudImage Src="@(student.ImgPath is null or "" ? "favicon.png" : student.ImgPath)" Class="mr-3 rounded" Height="36" />
                                        @student.Name
                                    </MudListItem>
                                }
                            </NestedList>
                        </MudListItem>
                    }
                </MudList>
            </MudPaper>
        </MudItem>
    </MudGrid>
}

@code {

    bool loadingData = false;

    public double[] studentsByProgramsData = [];
    public string[] studentsByProgramsLabels = [];
    public List<(string GroupName, (string Name, string ImgPath)[] Students)> appliedStudentsGroups = [];

    public double[] studentStatusesData = [];
    public string[] studentStatuses = [];

    protected override async Task OnInitializedAsync()
    {
        using var Db = DbFactory.CreateDbContext();
        var allStudents = await Db.Students.Include(x => x.TechProgram).Include(y => y.College).ToListAsync();

        if (allStudents is null || !allStudents.Any())
            return;

        // Group by programs
        var studentsByPrograms = allStudents.GroupBy(x => new { x.TechProgram!.Name, x.TechProgram.Affliation });
        studentsByProgramsData = studentsByPrograms.Select(x => (double)x.Count()).ToArray();
        studentsByProgramsLabels = studentsByPrograms.Select(x => $"{x.Key.Name} ({x.Key.Affliation})").ToArray();

        // Group by compentences
        var appliedGroups = allStudents
            .GroupBy(x => new { x.GeneralProgramming, x.WebExperience, x.DbExperience });
        foreach (var group in appliedGroups)
        {
            appliedStudentsGroups.Add(
                (
                    $"{group.Key.GeneralProgramming}, {group.Key.WebExperience}, {group.Key.DbExperience}",
                    group.Select(y => ($"{y.Name} ({y.TechProgram!.Name}, {y.College!.Name})", y.ProfileImagePath)).ToArray()
                ));
        }

        // Group students by stage
        var studentsByStage = allStudents.GroupBy(x => x.Status).OrderBy(x => x.Key);
        studentStatuses = studentsByStage.Select(x => x.Key.ToString()).ToArray();
        studentStatusesData = studentsByStage.Select(x => (double)x.Count()).ToArray();
    }
}
