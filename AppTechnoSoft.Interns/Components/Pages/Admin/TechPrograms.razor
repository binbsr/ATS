@page "/programs"
@attribute [Authorize(Roles = Role.Admins)]
@inject ApplicationDbContext Db
@inject ISnackbar SnackBar

<PageTitle>Tech Programs</PageTitle>

<MudTable Items="@programs" Hover="true" Loading="loadingData" Filter="_quickFilter">

    <ToolBarContent>
        <MudFab Href="/add-program" StartIcon="@Icons.Material.Filled.Add" title="Add New Tech Program" Size="Size.Small" Color="Color.Tertiary"></MudFab>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>#</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Affliation</MudTh>
        <MudTh>Created By</MudTh>
        <MudTh>Last Updated By</MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="#">@(programs.IndexOf(context) + 1)</MudTd>
        <MudTd DataLabel="Program">@context.Name</MudTd>
            <MudTd DataLabel="Affliation">@context.Affliation</MudTd>
            <MudTd DataLabel="Created By">
                <MudTooltip Text="@($"On {context.Created?.ToNepalTime()}")">
                    @context.CreatedBy
                </MudTooltip>
            </MudTd>
        <MudTd DataLabel="LastUpdated By">
            <MudTooltip Text="@($"On {context.LastUpdated}")">
                @context.LastUpdatedBy
            </MudTooltip>
        </MudTd>
            <MudTd>
                <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Small" Color="Color.Warning" Href="@("/edit-program/" + context.Id)" />
                <MudIconButton Icon="@Icons.Material.Sharp.Delete" Size="Size.Small" Color="Color.Error" OnClick="() => ConfirmDelete(context)" />
                <MudMessageBox @ref="mbox" Title="Warning" CancelText="Cancel">
                    <MessageContent>
                        Are you sure to delete this program? It can't be undone.
                    </MessageContent>
                    <YesButton>
                        <MudButton Variant="Variant.Filled" Color="Color.Error" Class="ml-2 mb-2 mr-3" StartIcon="@Icons.Material.Filled.DeleteForever">Delete</MudButton>
                    </YesButton>
                </MudMessageBox>
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="[15, 30, 50, 100, 200]" />
        </PagerContent>
    </MudTable>

    @code {
    private List<TechProgram> programs = new();
    private string _searchString = string.Empty;
    private bool loadingData = false;
    MudMessageBox mbox { get; set; } = null!;

    private Func<TechProgram, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Affliation.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };

    protected override async Task OnInitializedAsync()
    {
        loadingData = true;
        programs = await Db.TechPrograms.ToListAsync();
        loadingData = false;
    }

    private async Task ConfirmDelete(TechProgram program)
    {
        bool? result = await mbox.ShowAsync();
        if (result == null)
            return;

        Db.TechPrograms.Remove(program);

        var rowsAffected = await Db.SaveChangesAsync();

        if (rowsAffected > 0)
        {
            SnackBar.Add("Program Deleted successfully", Severity.Success);
            programs.Remove(program);
        }
        else
        {
            SnackBar.Add("Program Delete failed", Severity.Error);
        }
    }
}