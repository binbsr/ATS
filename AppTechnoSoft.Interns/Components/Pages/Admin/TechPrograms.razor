@page "/programs"
@attribute [Authorize(Roles = "Admin")]
@inject ApplicationDbContext db

<MudDataGrid T="TechProgram"
    MultiSelection="true" 
    Items="@programs" 
    SortMode="SortMode.Multiple" 
    Filterable="true" 
    Hover="true"
    QuickFilter="@_quickFilter"
    Loading="loadingData"
    Hideable="true">
    
    <ToolBarContent>
        <MudText Typo="Typo.h6">All Tech Degrees & Programs</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
            AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <Columns>
        <PropertyColumn Property="x => programs.IndexOf(x) + 1" Title="#" Filterable="false"/>
        <PropertyColumn Property="x => x.Name" SortBy="@_sortBy" />
        <PropertyColumn Property="x => x.Affliation" />
    </Columns>
    <PagerContent>
        <MudDataGridPager T="TechProgram" PageSizeOptions="[15, 30, 50, 100, 200]"/>
    </PagerContent>
</MudDataGrid>

@code {
    private List<TechProgram> programs = new();
    private string _searchString;
    private bool _sortNameByLength;
    private bool loadingData = false;
    private Func<TechProgram, object> _sortBy => x =>
    {
        if (_sortNameByLength)
            return x.Name.Length;
        else
            return x.Name;
    };

    private Func<TechProgram, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Affliation.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };

    protected override async Task OnInitializedAsync()
    {
        loadingData = true;
        programs = await db.TechPrograms.ToListAsync();
        loadingData = false;
    }
}