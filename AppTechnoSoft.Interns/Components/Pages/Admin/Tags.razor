@page "/tags"

@inject ApplicationDbContext Db

<MudTable Items="@tags" Hover="true" Filter="new Func<Tag,bool>(FilterFunc1)" @bind-SelectedItem="selectedTag" Loading="@loadingData">
    <ToolBarContent>
        <MudFab Href="/add-tag" StartIcon="@Icons.Material.Filled.Add" Title="Add New Tag" Size="Size.Small" Color="Color.Tertiary"></MudFab>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search"
                      Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search"
                      IconSize="Size.Medium"
                      Class="mt-0">
        </MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>#</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Description</MudTh>
        <MudTh>Color Code</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="#">@(tags.IndexOf(context) + 1)</MudTd>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Description">@context.Description</MudTd>
            <MudTd DataLabel="ColorCode">@context.ColorCode</MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>


    @code {

    private List<Tag> tags = new();
    private Tag selectedTag = new();
    private bool loadingData;
    private string searchString = "";

    protected override async Task OnInitializedAsync()
    {
        loadingData = true;
        tags = await Db.Tags.ToListAsync();
        loadingData = false;
    }

    private bool FilterFunc1(Tag tag) => FilterFunc(tag, searchString);

    private bool FilterFunc(Tag tag, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (tag.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (tag.Description.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (tag.ColorCode.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
}
