@page "/add-widget"
@page "/edit-widget/{Id:int}"

@inject ApplicationDbContext Db
@inject ISnackbar SnackBar

<PageTitle>@pageTitle</PageTitle>

<EditForm Model="@model" OnValidSubmit="OnValidSubmit">
    <MudSelect T="string" Label="Widget Type" @bind-Value="model.Title" AnchorOrigin="Origin.BottomCenter" Variant="Variant.Outlined">
        @foreach (var filter in widgetFilters)
        {
            <MudSelectItem Value="@filter.Key">@filter.Value</MudSelectItem>
        }
    </MudSelect>

    <MudTextField Label="Description" Class="mt-3" @bind-Value="model.Description" Variant="Variant.Outlined" />

    <MudSelect T="Tag"
               Label="Tags"
               Dense="true"
               Variant="Variant.Outlined"
               HelperText="Check all tags that apply to this widget"
               MultiSelection="true"
               @bind-SelectedValues="@tagsSelected"
               Class="mb-3"
               MultiSelectionTextFunc="@(new Func<List<string>, string>(GetMultiSelectionText))"
               AnchorOrigin="Origin.BottomCenter">
        @foreach (var tag in tags)
        {
            <MudSelectItem Value="@tag">@tag.Name</MudSelectItem>
        }
    </MudSelect>

    <MudText Style="font-weight:bold" Class="py-2">Content RichText (Markdown) and Live Preview on Right Panel</MudText>
    <RichTextEditor MarkdownValue="@model.HtmlContent" EditorValueChanged="OnMarkdownValueChanged" />

    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Tertiary" Class="mt-3" StartIcon="@Icons.Material.Filled.Save">Save Widget</MudButton>
</EditForm>
@code {

    [Parameter]
    public int? Id { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> AuthTask { get; set; } = null!;

    Widget model = new Widget();
    List<Tag> tags = new();
    IEnumerable<Tag> tagsSelected = [];
    List<(string Key, string Value)> widgetFilters =
    [
        (nameof(WidgetFilter.Module), WidgetFilter.Module),
        (nameof(WidgetFilter.HomeIntro), WidgetFilter.HomeIntro),
        (nameof(WidgetFilter.CarouselItem), WidgetFilter.CarouselItem),
        (nameof(WidgetFilter.HomeTitle), WidgetFilter.HomeTitle),
        (nameof(WidgetFilter.Prospectus), WidgetFilter.Prospectus)
    ];

    string pageTitle = string.Empty;
    bool IsAdd => Id is null or 0;

    protected override async Task OnInitializedAsync()
    {
        tags = await Db.Tags.ToListAsync();

        if (IsAdd)
        {
            pageTitle = "Add Widget";
            model.Title = nameof(WidgetFilter.Module);
        }
        else
        {
            pageTitle = "Edit Widget";
            model = await Db.Widgets.Include(x => x.Tags).FirstAsync(x => x.Id == Id);
            tagsSelected = model.Tags ?? [];
        }
    }

    private async Task OnValidSubmit(EditContext context)
    {
        if (model.HtmlContent is null or "")
        {
            return;
        }

        var state = await AuthTask;
        var userName = state.User.Identity?.Name;

        model.Tags = tagsSelected.ToList();

        if (IsAdd)
        {
            model.AddCreatedStamps(userName);
            Db.Widgets.Add(model);
        }
        else
        {
            model.Id = Id!.Value;
            model.AddLastUpdatedStamps(userName);
            Db.Widgets.Update(model);
        }

        var rowsAffected = await Db.SaveChangesAsync();

        if (rowsAffected > 0)
        {
            SnackBar.Add("Widget saved successfully", Severity.Success);
        }
        else
        {
            SnackBar.Add("Widget save failed", Severity.Error);
        }
    }

    private string GetMultiSelectionText(List<string> selectedValues)
    {
        return $"{selectedValues.Count} tag{(selectedValues.Count > 1 ? "s have" : " has")} been selected";
    }

    void OnMarkdownValueChanged(string value)
    {
        model.HtmlContent = value;
    }
}
