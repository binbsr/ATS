@page "/review/forms"

@using System.Globalization

@attribute [Authorize(Roles = Role.Admins)]
@inject ApplicationDbContext db
@inject ISnackbar SnackBar

<PageTitle>Review Forms</PageTitle>

<MudDataGrid T="ReviewFormViewModel"
             MultiSelection="true"
             Items="@reviewFormViewModels"
             SortMode="SortMode.Multiple"
             Hover="true"
             Loading="loadingData"
             ReadOnly="false"
             EditMode="DataGridEditMode.Form"
             EditTrigger="DataGridEditTrigger.Manual">
    <ToolBarContent>
        <MudFab Href="/review/create"
                StartIcon="@Icons.Material.Filled.Add"
                title="Add Review Form"
                Size="Size.Small"
                Color="Color.Tertiary">
        </MudFab>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString"
                      Placeholder="Search"
                      Adornment="Adornment.Start"
                      Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search"
                      IconSize="Size.Medium"
                      Class="mt-0"></MudTextField>
    </ToolBarContent>
    <Columns>
        <PropertyColumn Property="x => x.Title" Title="Title" />
        <TemplateColumn Title="Expiration">
            <CellTemplate>
                @context.Item.Expiration?.ToLongDateString()
            </CellTemplate>
        </TemplateColumn>
        <PropertyColumn Property="x => x.Instructor.Name" Title="Instructor" />
        <PropertyColumn Property="x => x.Training.Title" Title="Training" />

        <TemplateColumn Title="Share">
            <CellTemplate>
                <MudLink Href="@context.Item.Link" Target="_blank">                    
                    <MudIcon Icon="@Icons.Material.Sharp.Share" />
                </MudLink>
            </CellTemplate>
        </TemplateColumn>
        <MudLink></MudLink>

    </Columns>
    <PagerContent>
        <MudDataGridPager T="ReviewFormViewModel" PageSizeOptions="[30, 50, 100, 200]" />
    </PagerContent>
</MudDataGrid>

@code {

    [CascadingParameter]
    private Task<AuthenticationState> AuthTask { get; set; } = null!;

    private List<ReviewFormViewModel> reviewFormViewModels = [];
    private string _searchString = string.Empty;
    private bool loadingData = false;

    private Func<ReviewFormViewModel, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.Title.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Instructor.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };

    protected override async Task OnInitializedAsync()
    {
        loadingData = true;

        var reviewForms = await db.Reviews
            .Include(x => x.Training)
            .Include(x => x.Instructor)
            .AsNoTracking()
            .ToListAsync() ?? [];

        reviewFormViewModels = reviewForms.ToViewModel();
        loadingData = false;
    }
}
